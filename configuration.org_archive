#    -*- mode: org -*-


Archived entries from file /home/d/.emacs.d/configuration.org


* Add a CREATED timestamp property to all TODOs
  :PROPERTIES:
  :ARCHIVE_TIME: 2021-09-18 Sat 07:14
  :ARCHIVE_FILE: ~/.emacs.d/configuration.org
  :ARCHIVE_OLPATH: Org Mode/Personal and Work Toggle
  :ARCHIVE_CATEGORY: configuration
  :END:

  All of this comes from [[https://gist.github.com/mrvdb/4037694][this gist]]. Would be nice if org mode just offered
  this as a local set up option.

  #+begin_src emacs-lisp

    ;; Allow automatically handing of created/expired meta data.
    (require 'org-expiry)

    ;; Configure it a bit to my liking
    (setq
      org-expiry-created-property-name "CREATED" ; Name of property when an item is created
      org-expiry-inactive-timestamps   t         ; Don't have everything in the agenda view
    )

    (defun db/insert-created-timestamp()
      "Insert a CREATED property using org-expiry.el for TODO entries"
      (org-expiry-insert-created)
      (org-back-to-heading)
      (org-end-of-line)
      (insert " "))

    ;; Whenever a TODO entry is created, I want a timestamp
    ;; Advice org-insert-todo-heading to insert a created timestamp using org-expiry
    (defadvice org-insert-todo-heading (after db/created-timestamp-advice activate)
      "Insert a CREATED property using org-expiry.el for TODO entries"
      (db/insert-created-timestamp))

    ;; Make it active
    (ad-activate 'org-insert-todo-heading)

    (defadvice org-capture (after db/created-timestamp-advice activate)
      "Insert a CREATED property using org-expiry.el for TODO entries"
      ; Test if the captured entry is a TODO, if so insert the created
      ; timestamp property, otherwise ignore
      (when (member (org-get-todo-state) org-todo-keywords-1)
        (db/insert-created-timestamp)))

    (ad-activate 'org-capture)

    ;; Add feature to allow easy adding of tags in a capture window
    (defun db/add-tags-in-capture()
      (interactive)
      "Insert tags in a capture window without losing the point"
      (save-excursion
        (org-back-to-heading)
        (org-set-tags)))

  #+end_src

* SUSPENDED Undo Tree
  :PROPERTIES:
  :ARCHIVE_TIME: 2022-08-08 Mon 09:42
  :ARCHIVE_FILE: ~/.emacs.d/configuration.org
  :ARCHIVE_CATEGORY: configuration
  :ARCHIVE_TODO: SUSPENDED
  :END:

  Performance on msys2 is very sub-par so turning off.
  
  #+BEGIN_SRC emacs-lisp
    ;; (use-package undo-tree
    ;;   :config
    ;;   (setq undo-tree-history-directory-alist '(("." . "~/.emacs.d/undo")))
    ;;   (global-undo-tree-mode))
  #+END_SRC
  

* Hyperbole
  :PROPERTIES:
  :ARCHIVE_TIME: 2022-08-08 Mon 09:43
  :ARCHIVE_FILE: ~/.emacs.d/configuration.org
  :ARCHIVE_CATEGORY: configuration
  :END:

  Change Hyperbole key to M-\ which is nicely above the enter key on this
  laptop.
  
  #+BEGIN_SRC emacs-lisp
    (use-package hyperbole
      :config
      (add-hook 'hyperbole-init-hook (lambda () (hkey-set-key "\M-\\" 'hkey-either))))
  #+END_SRC
  

* Chat GPT Integration in Org Mode
  :PROPERTIES:
  :ARCHIVE_TIME: 2023-05-15 Mon 14:59
  :ARCHIVE_FILE: ~/.emacs.d/configuration.org
  :ARCHIVE_CATEGORY: configuration
  :END:

  Using https://github.com/rksm/org-ai
  
  #+BEGIN_SRC emacs-lisp

    (setq db/org-ai nil)

    
    (if (db/add-to-load-path "~/.emacs.d/lisp/org-ai" db/org-ai)
        (use-package org-ai
          :load-path (lambda () "lisp/org-ai")
          :commands (org-ai-mode)
          :custom
          (org-ai-openai-api-token (db/openai-api-key))
          :init
          (add-hook 'org-mode-hook #'org-ai-mode)
          :config
          (advice-add 'keyboard-quit :before #'org-ai-keyboard-quit)))

  #+END_SRC


* Reading Email with mu4e
  :PROPERTIES:
  :ARCHIVE_TIME: 2023-06-15 Thu 14:30
  :ARCHIVE_FILE: ~/.emacs.d/configuration.org
  :ARCHIVE_CATEGORY: configuration
  :END:

  mu4e isn't in melpa (wtf) and has to be installed by installing mu which
  on fedora is =sudu dnf install maildir-utils=

  To initialize the database =mu init --maildir=~/Maildir --my-address=donald.brady@gmail.com=

   #+BEGIN_SRC emacs-lisp
     (if (file-directory-p "/usr/share/emacs/site-lisp/mu4e")
         (progn
           ;; if the directory exists then load up otherwise not
           (db/add-to-load-path "/usr/share/emacs/site-lisp/mu4e" t)
           (require 'mu4e)

           ;; contexts
           (setq mu4e-contexts
                 `( ,(make-mu4e-context
                      :name "gmail"
                      :enter-func (lambda () (mu4e-message "Entering gmail context"))
                      :leave-func (lambda () (mu4e-message "Leaving gmail Context"))
                      ;; we match based on the contact-fields of the message
                      :match-func (lambda (msg)
                                    (when msg
                                      (mu4e-message-contact-field-matches msg
                                                                          :to "donald.brady@gmail.com")))
                      :vars '( ( user-mail-address	    . "donald.brady@gmail.com"  )
                               ( user-full-name	    . "Donald Brady" )
                               ( mu4e-compose-signature .
                                 (concat
                                  "Donald Brady\n"
                                  "e: donald.brady@gmail.com\n" "t: 260 632 7239\n"))))))

           (setq mu4e-context-policy 'pick-first)

           ;; use mu4e for e-mail in emacs
           (setq mail-user-agent 'mu4e-user-agent)

           ;; these must start with a "/", and must exist
           ;; (i.e.. /home/user/Maildir/gmail/Sent must exist) you use e.g. 'mu mkdir' and
           ;; 'mu init' to make the Maildirs if they don't already exist.

           (setq mu4e-sent-folder   "/gmail/Sent")
           (setq mu4e-drafts-folder "/gmail/Drafts")
           (setq mu4e-trash-folder  "/gmail/Trash")
           (setq mu4e-refile-folder "/gmail/Archive")

           ;; mbsync for fetching email
           (setq mu4e-get-mail-command "mbsync -V gmail")

           ;; reading
           (setq mu4e-attachment-dir "~/Downloads")  

           (define-key mu4e-view-mode-map (kbd "C-c C-o") 'mu4e~view-browse-url-from-binding)  

           ;; View images inline

           (setq mu4e-view-show-images t)
           (when (fboundp 'imagemagick-register-types)
             (imagemagick-register-types))

           ;; You will need to install =msmtp= and configure that as needed.

           (setq message-send-mail-function 'message-send-mail-with-sendmail)
           (setq message-sendmail-extra-arguments '("--read-envelope-from"))
           (setq message-sendmail-f-is-evil 't)
           (setq sendmail-program "msmtp") 

           ;; agenda integration
           (require 'org-mu4e)
           (setq org-mu4e-link-query-in-headers-mode nil)

           ;; contacts integration
           (load-file (expand-file-name "lisp/org-contacts/org-contacts.el" user-emacs-directory))
           (require 'org-contacts)

           (setq org-contacts-files '("~/OrgDocuments/personal/contacts.org"))
           (setq mu4e-org-contacts-file (car org-contacts-files))
           (add-to-list 'mu4e-headers-actions
                        '("org-contact-add" . mu4e-action-add-org-contact) t)

           (setq mu4e-view-actions
                 '(("sMark as spam" . mu4e-view-register-msg-as-spam)
                   ("bViewInBrowser" . mu4e-action-view-in-browser)
                   ("capture message" . mu4e-action-capture-message)
                   ("oOrg Contact Add" . mu4e-action-add-org-contact)
                   ("tShow this thread" . mu4e-action-show-thread)))

           (setq mu4e-headers-actions mu4e-view-actions)

           ;; global key
           (global-set-key (kbd "C-c m") 'mu4e)
           ))

   #+END_SRC


* LSP-Bridge (Experimental)
  :PROPERTIES:
  :ARCHIVE_TIME: 2023-07-15 Sat 14:01
  :ARCHIVE_FILE: ~/.emacs.d/configuration.org
  :ARCHIVE_CATEGORY: configuration
  :END:

  #+BEGIN_SRC emacs-lisp

    ;; don't go global on for now. 
    (setq db/go-lsp-bridge nil)

    (if (and (file-directory-p "~/src/lsp-bridge") db/go-lsp-bridge)
        (progn
          (require 'lsp-bridge)
          (global-lsp-bridge-mode)))
  #+END_SRC


* Chat GPT Integration as a Shell
  :PROPERTIES:
  :ARCHIVE_TIME: 2023-07-15 Sat 14:01
  :ARCHIVE_FILE: ~/.emacs.d/configuration.org
  :ARCHIVE_CATEGORY: configuration
  :END:

  Using https://github.com/xenodium/chatgpt-shell

  #+BEGIN_SRC emacs-lisp

    (use-package chatgpt-shell
      :ensure t
      :custom
      ((chatgpt-shell-openai-key
        (lambda ()
          (auth-source-pass-get 'secret "openai-key")))))

    (setq chatgpt-shell-openai-key
          (auth-source-pick-first-password :host "api.openai.com"))    
    (define-key global-map (kbd "C-c g r") 'chatgpt-shell-send-region)

  #+END_SRC


* lsp-bridge (Experimental)
  :PROPERTIES:
  :ARCHIVE_TIME: 2023-07-15 Sat 14:02
  :ARCHIVE_FILE: ~/.emacs.d/configuration.org
  :ARCHIVE_CATEGORY: configuration
  :END:

  [[https://github.com/manateelazycat/lsp-bridge][lsp-bridge]]
   
  #+BEGIN_SRC emacs-lisp
    (db/add-to-load-path "~/src/lsp-bridge" nil '(posframe))
  #+END_SRC
   

* Window Handling
  :PROPERTIES:
  :ARCHIVE_TIME: 2023-07-15 Sat 14:02
  :ARCHIVE_FILE: ~/.emacs.d/configuration.org
  :ARCHIVE_CATEGORY: configuration
  :END:

  This is from system crafters.

  #+BEGIN_SRC emacs-lisp
    ;; Make sure repeat-mode is turned on first!
    (repeat-mode 1)

    (defvar-keymap db/window-key-map
      :doc "Bindings for managing windows, configured to be repeatable."
      :repeat t
      "c" 'delete-window
      "|" 'split-window-horizontally
      "-" 'split-window-vertically
      "h" 'windmove-left
      "j" 'windmove-down
      "k" 'windmove-up
      "l" 'windmove-right
      "C-h" 'shrink-window-horizontally
      "C-j" 'shrink-window
      "C-k" 'enlarge-window
      "C-l" 'enlarge-window-horizontally
      "H" 'windmove-swap-states-left
      "J" 'windmove-swap-states-down
      "K" 'windmove-swap-states-up
      "L" 'windmove-swap-states-right)

    (global-set-key (kbd "C-c w") db/window-key-map)

  #+END_SRC


* Paren Handling and  Matching
  :PROPERTIES:
  :ARCHIVE_TIME: 2023-07-15 Sat 14:02
  :ARCHIVE_FILE: ~/.emacs.d/configuration.org
  :ARCHIVE_CATEGORY: configuration
  :END:

  Configuration for a bunch of built in packages.

  #+BEGIN_SRC emacs-lisp

    (use-package paren
      :config
      (show-paren-mode +1))

    (use-package elec-pair
      :config
      (electric-pair-mode 1))

  #+END_SRC


* Windows Specific Setup
  :PROPERTIES:
  :ARCHIVE_TIME: 2023-07-15 Sat 14:02
  :ARCHIVE_FILE: ~/.emacs.d/configuration.org
  :ARCHIVE_CATEGORY: configuration
  :END:
  
** WSL to use Windows Native Browser

   #+BEGIN_SRC emacs-lisp
     (when (and (eq system-type 'gnu/linux)
                (string-match
                 "Linux.*Microsoft.*Linux"
                 (shell-command-to-string "uname -a")))
       (setq
        browse-url-generic-program  "/mnt/c/Windows/System32/cmd.exe"
        browse-url-generic-args     '("/c" "start")
        browse-url-browser-function #'browse-url-generic))
   #+END_SRC
   

* Avy
  :PROPERTIES:
  :ARCHIVE_TIME: 2023-07-15 Sat 14:02
  :ARCHIVE_FILE: ~/.emacs.d/configuration.org
  :ARCHIVE_CATEGORY: configuration
  :END:
  Avy has one really useful function =avy-goto-line= which supports multiple
  buffers

  #+BEGIN_SRC emacs-lisp
    (use-package avy
      :bind (("M-g f" . avy-goto-line)))
  #+END_SRC
  

* Dired Mode
  :PROPERTIES:
  :ARCHIVE_TIME: 2023-07-15 Sat 14:02
  :ARCHIVE_FILE: ~/.emacs.d/configuration.org
  :ARCHIVE_CATEGORY: configuration
  :END:

  Dired mode is built in and powerful but easy to forget the commands and
  capabilities. Make things a bit easier to remember for me

  #+BEGIN_SRC emacs-lisp
    ;; dired-x comes with emacs but isn't loaded by default.
    (require 'dired-x)

    (setq-default dired-omit-files-p t) ; Buffer-local variable
    (setq dired-omit-files (concat dired-omit-files "\\|^\\..+$"))
    (setq dired-dwim-target t) ;; guess destination
    (setq dired-recursive-copies 'always)
    (setq dired-recursive-deletes 'always)

    ;; add these simple keys to dired mode
    (define-key dired-mode-map (kbd "% f") 'find-name-dired)
    (define-key dired-mode-map (kbd "% .") 'dired-omit-mode)
    (define-key dired-mode-map (kbd "% w") 'db/wsl-open-in-external-app)

  #+END_SRC


* Flycheck
  :PROPERTIES:
  :ARCHIVE_TIME: 2023-07-15 Sat 14:02
  :ARCHIVE_FILE: ~/.emacs.d/configuration.org
  :ARCHIVE_CATEGORY: configuration
  :END:

  #+BEGIN_SRC emacs-lisp
    (use-package flycheck
      :ensure 
        :init (global-flycheck-mode))

    (use-package flycheck-inline
      :ensure t
      :after flycheck
      :config
      (add-hook 'flycheck-mode-hook #'flycheck-inline-mode))
  #+END_SRC

  Vale integration:
  https://github.com/grettke/flycheck-org-vale
  
  #+BEGIN_SRC emacs-lisp
    (db/add-to-load-path "~/src/flycheck-org-vale" t '(flycheck-org-vale))
  #+END_SRC
  

* Text Scaling
  :PROPERTIES:
  :ARCHIVE_TIME: 2023-07-15 Sat 14:02
  :ARCHIVE_FILE: ~/.emacs.d/configuration.org
  :ARCHIVE_CATEGORY: configuration
  :END:

  =default-text-scale= allows you to quickly resize text. By default binds to
  C-M-= and C-M-- to increase and decrease the face size 

  #+BEGIN_SRC emacs-lisp
    (use-package default-text-scale
      :config
      (default-text-scale-mode))
  #+END_SRC


* Ivy
  :PROPERTIES:
  :ARCHIVE_TIME: 2023-07-15 Sat 14:02
  :ARCHIVE_FILE: ~/.emacs.d/configuration.org
  :ARCHIVE_CATEGORY: configuration
  :END:

  #+BEGIN_SRC emacs-lisp
    (use-package ivy
      :config
      (setq ivy-use-virtual-buffers t)
      (setq ivy-use-selectable-prompt t)
      (setq enable-recursive-minibuffers t)
      (ivy-mode 1))
  #+END_SRC


* Swiper
  :PROPERTIES:
  :ARCHIVE_TIME: 2023-07-15 Sat 14:02
  :ARCHIVE_FILE: ~/.emacs.d/configuration.org
  :ARCHIVE_CATEGORY: configuration
  :END:
  Use swiper for better searching
  #+BEGIN_SRC emacs-lisp
    (use-package swiper
      :bind
      (("\C-s" . swiper)))
  #+END_SRC


* Orderless
  :PROPERTIES:
  :ARCHIVE_TIME: 2023-07-15 Sat 14:02
  :ARCHIVE_FILE: ~/.emacs.d/configuration.org
  :ARCHIVE_CATEGORY: configuration
  :END:
  When searching order does not matter making it easier to find things. 

  #+BEGIN_SRC emacs-lisp
    (use-package orderless
      :config
      (setq completion-styles '(orderless)))
  #+END_SRC


* Marginalia
  :PROPERTIES:
  :ARCHIVE_TIME: 2023-07-15 Sat 14:02
  :ARCHIVE_FILE: ~/.emacs.d/configuration.org
  :ARCHIVE_CATEGORY: configuration
  :END:
  Provides richer annotaions in minibuffer

  #+BEGIN_SRC emacs-lisp

    (use-package marginalia
      ;; Either bind `marginalia-cycle` globally or only in the minibuffer
    :bind (("M-A" . marginalia-cycle)
           :map minibuffer-local-map
           ("M-A" . marginalia-cycle))
    :init
    ;; Must be in the :init section of use-package such that the mode gets
    ;; enabled right away. Note that this forces loading the package.
    (marginalia-mode))

  #+END_SRC


* Markdown Mode
  :PROPERTIES:
  :ARCHIVE_TIME: 2023-07-15 Sat 14:02
  :ARCHIVE_FILE: ~/.emacs.d/configuration.org
  :ARCHIVE_CATEGORY: configuration
  :END:

  #+BEGIN_SRC emacs-lisp
    (use-package markdown-mode
      :ensure t
      :mode ("README\\.md\\'" . gfm-mode)
      :init (setq markdown-command "multimarkdown"))
  #+END_SRC
  

* PDF Tools
  :PROPERTIES:
  :ARCHIVE_TIME: 2023-07-15 Sat 14:02
  :ARCHIVE_FILE: ~/.emacs.d/configuration.org
  :ARCHIVE_CATEGORY: configuration
  :END:
  PDF viewer and annotator

  #+BEGIN_SRC emacs-lisp
    (use-package pdf-tools
      :init
      (pdf-loader-install))
  #+END_SRC


* Yas Snippets
  :PROPERTIES:
  :ARCHIVE_TIME: 2023-07-15 Sat 14:02
  :ARCHIVE_FILE: ~/.emacs.d/configuration.org
  :ARCHIVE_CATEGORY: configuration
  :END:
  Use yas snippets templating package

  #+BEGIN_SRC emacs-lisp
    (use-package yasnippet
      :config
      (yas-global-mode 1))
    (use-package yasnippet-snippets)
  #+END_SRC


* Projectile
  :PROPERTIES:
  :ARCHIVE_TIME: 2023-07-15 Sat 14:02
  :ARCHIVE_FILE: ~/.emacs.d/configuration.org
  :ARCHIVE_CATEGORY: configuration
  :END:

  [[https://projectile.mx/][Projectile]] is useful for navigating dev projects
  
  #+BEGIN_SRC emacs-lisp
    (use-package projectile)
    (require 'projectile)
    (projectile-mode +1)
  #+END_SRC


* Org Mode
  :PROPERTIES:
  :ARCHIVE_TIME: 2023-07-15 Sat 14:02
  :ARCHIVE_FILE: ~/.emacs.d/configuration.org
  :ARCHIVE_CATEGORY: configuration
  :END:

** Org Mode Packages

   #+BEGIN_SRC emacs-lisp
     (use-package org)
     (use-package org-contrib)
     (use-package org-superstar)
     (use-package org-edna)
     (use-package org-ql)
     (use-package counsel)
     (use-package org-super-agenda)
     (require 'org-habit)
  #+END_SRC

** Org Appearance

  #+BEGIN_SRC emacs-lisp


  #+END_SRC
  
** Basic Org Config  

   #+BEGIN_SRC emacs-lisp
     (add-hook 'org-mode-hook (lambda () (org-superstar-mode 1)))

     (setq org-image-actual-width nil)
     (setq org-modules (append '(org-protocol) org-modules))
     (setq org-modules (append '(habit) org-modules))
     (setq org-catch-invisible-edits 'smart)
     (setq org-ctrl-k-protect-subtree t)
     (set-face-attribute 'org-headline-done nil :strike-through t)
     (setq org-return-follows-link t)
     (setq org-adapt-indentation t)
     (setq org-odt-preferred-output-format "docx")

     ;; all my org related keys will be set up in this keymap
     (global-set-key
      (kbd "C-c o")
      (define-keymap
        :prefix 'db/org-key-map
        "l" 'org-store-link
        "c" 'org-capture
        "a" 'org-agenda))

     ;; override y (agenda year) with more useful todo yesterday for marking habits done prior day 
     (define-key org-agenda-mode-map (kbd "y") 'org-agenda-todo-yesterday)

   #+END_SRC

** Org File Locations

   My setup now includes two org-directories under an umberlla OrgDocuments
   directory. They are personal and dcllp (work). The default opening setup is
   to default to personal. Some files may also be gpg encrypted and need to be
   added as well.

   #+BEGIN_SRC emacs-lisp
     (setq org-directory-personal "~/OrgDocuments/personal")
     (setq org-directory-work "~/OrgDocuments/dcllp")
     (setq org-directory org-directory-personal)
     (setq org-id-locations-file (expand-file-name ".org-id-locations" org-directory))
     (setq org-attach-dir-relative t)

     (defun db/current-index-file ()
       "Returns the current index file which is dependent on current context" 
       (expand-file-name "index.org" org-directory))

     (defun db/current-monthly-journal ()
       "Returns the current months journal"
       (setq current-year (format-time-string "%Y"))
       (setq current-month (format-time-string "%m"))
       (concat "~/OrgDocuments/personal/journals/" current-year "/" current-year "-" current-month ".org"))

     (defun db/org-agenda-files ()
       ;; org files for agenda
       (setq ofiles (directory-files-recursively org-directory "org$"))
       ;; some may be encrypted though
       (setq gfiles (directory-files-recursively org-directory "org.gpg$"))
       (append ofiles gfiles))

     (setq org-agenda-files (db/org-agenda-files))
     (setq org-default-notes-file (concat org-directory "/index.org"))
  #+END_SRC

** Org Roam

   Likewise org-roam defaults to personal.

   #+BEGIN_SRC emacs-lisp
     (setq org-roam-v2-ack t)
     (use-package org-roam)
     (setq org-roam-directory (expand-file-name "roam" org-directory))
     (setq org-roam-db-location (expand-file-name "org-roam.db" org-roam-directory))
     (setq org-roam-db-autosync-mode t)

     ;; required for org-roam bookmarklet 
     (require 'org-roam-protocol)

     ;; Org-roam Capture Templates

     ;; Starter pack. If there is only one, it uses automatically without asking.

     (setq org-roam-capture-templates
           '(("d" "default" plain "%?"
              :if-new (file+head"%(format-time-string \"%Y-%m-%d--%H-%M-%SZ--${slug}.org\" (current-time) t)"
                                "#+title: ${title}\n#+filetags: %^G:\n\n* ${title}\n\n")
              :unnarrowed t)
             ("y" "yank" plain "%?"
              :if-new (file+head"%(format-time-string \"%Y-%m-%d--%H-%M-%SZ--${slug}.org\" (current-time) t)"
                                "#+title: ${title}\n#+filetags: %^G\n\n%c\n\n")
              :unnarrowed t)
             ("r" "region" plain "%?"
              :if-new (file+head"%(format-time-string \"%Y-%m-%d--%H-%M-%SZ--${slug}.org\" (current-time) t)"
                                "#+title: ${title}\n#+filetags: %^G\n\n%i\n\n")
              :unnarrowed t)

             ("o" "org-roam-it" plain "%?"
              :if-new (file+head"%(format-time-string \"%Y-%m-%d--%H-%M-%SZ--${slug}.org\" (current-time) t)"
                                "#+title: ${title}\n#+filetags:\n{ref}\n")
              :unnarrowed t)))

     (add-hook 'org-capture-after-finalize-hook
               (lambda ()
                 (if (org-roam-file-p)
                     (org-roam-db-sync))))

     ;; this is required to get matching on tags
     (setq org-roam-node-display-template
           (concat "${title:*} "
                   (propertize "${tags:10}" 'face 'org-tag)))


   #+END_SRC

   Install org-roam-ui for a vizual of my roam database.

   #+BEGIN_SRC emacs-lisp
     (package-install 'org-roam-ui)
   #+END_SRC

** Language Support

   #+BEGIN_SRC emacs-lisp
     (org-babel-do-load-languages
      'org-babel-load-languages
      '((emacs-lisp . t)
        (ruby . t)
        (python . t)
        (sql . t)
        (shell . t)
        (clojure . t)
        (gnuplot . t)))

     (setq org-confirm-babel-evaluate nil)
     (setq org-export-with-smart-quotes t)
     (setq org-src-fontify-natively t)
     (setq org-src-tab-acts-natively t)
     (setq org-src-window-setup 'current-window)

   #+END_SRC

** Task Handling and Agenda

   Establishes the states and other settings related to task handling.

   #+BEGIN_SRC emacs-lisp

     (setq org-enforce-todo-dependencies t)
     (setq org-enforce-todo-checkbox-dependencies t)
     (setq org-deadline-warning-days 7)

     (setq org-todo-keywords '((sequence
                                "TODO(t)"
                                "STARTED(s)"
                                "DELEGATED(e)"
                                "WAITING(w)"
                                "HOLD(h)" "|"
                                "DONE(d)"
                                "SUSPENDED(u)")))


     (setq org-todo-keyword-faces
           '(("TODO" . (:foreground "blue" :weight bold))
             ("STARTED" . (:foreground "green"))
             ("DONE" . (:foreground "pink"))
             ("WAITING" . (:foreground "orange"))
             ("HOLD" . (:foreground "orange"))
             ("SUSPENDED" . (:foreground "forest green"))
             ("DELEGATED" . (:foreground "light blue"))
             ("TASK" . (:foreground "blue"))))

     (setq org-tags-exclude-from-inheritance '("project")
           org-stuck-projects '("+project/-MAYBE-DONE"
                                ("TODO" "WAITING" "DELEGATED") ()))

     (setq org-log-done 'time)
     (setq org-log-into-drawer t)
     (setq org-log-reschedule 'note)

     ;; agenda settings
     (setq org-agenda-span 1)
     (setq org-agenda-start-on-weekday nil)

    (add-hook 'org-agenda-mode-hook (lambda ()
                                      (define-key org-agenda-mode-map (kbd "S") 'org-agenda-schedule)))
    (add-hook 'org-agenda-mode-hook (lambda ()
                                      (define-key org-agenda-mode-map (kbd "D") 'org-agenda-deadline)))
     
   #+END_SRC

   Use org-super-agenda

   #+BEGIN_SRC emacs-lisp
     (require 'org-super-agenda)
     (setq org-super-agenda-groups
            '(;; Each group has an implicit boolean OR operator between its selectors.
              (:name "Today"  ; Optionally specify section name
                     :time-grid t  ; Items that appear on the time grid
                     :todo "TODAY")  ; Items that have this TODO keyword
              (:name "Projects"
                     :tag "project")
              (:name "Important"
                     :priority "A")
              ;; Set order of multiple groups at once
              ;; (:order-multi (2 (:name "Shopping in town"
              ;;                         ;; Boolean AND group matches items that match all subgroups
              ;;                         :and (:tag "shopping" :tag "@town"))
              ;;                  (:name "Food-related"
              ;;                         ;; Multiple args given in list with implicit OR
              ;;                         :tag ("food" "dinner"))
              ;;                  (:name "Personal"
              ;;                         :habit t
              ;;                         :tag "personal")
              ;;                  (:name "Space-related (non-moon-or-planet-related)"
              ;;                         ;; Regexps match case-insensitively on the entire entry
              ;;                         :and (:regexp ("space" "NASA")
              ;;                                       ;; Boolean NOT also has implicit OR between selectors
              ;;                                       :not (:regexp "moon" :tag "planet")))))
              ;; Groups supply their own section names when none are given
              (:todo "WAITING" :order 8)  ; Set order of this section
              (:name "Errands" :tag "errand")
              (:name "Calls" :tag "call")
              (:todo ("EVENT" "INFO" "TO-READ" "CHECK" "TO-WATCH" "WATCHING")
                     ;; Show this group at the end of the agenda (since it has the
                     ;; highest number). If you specified this group last, items
                     ;; with these todo keywords that e.g. have priority A would be
                     ;; displayed in that group instead, because items are grouped
                     ;; out in the order the groups are listed.
                     :order 9)
              (:priority<= "B"
                           ;; Show this section after "Today" and "Important", because
                           ;; their order is unspecified, defaulting to 0. Sections
                           ;; are displayed lowest-number-first.
                           :order 1)
              ;; After the last group, the agenda will display items that didn't
              ;; match any of these groups, with the default order position of 99
              ))
     (org-super-agenda-mode t)

   #+END_SRC         

** Diary Settings

    I don't use the diary file but it's useful for holidays.

    #+BEGIN_SRC emacs-lisp
      (setq calendar-bahai-all-holidays-flag nil)
      (setq calendar-christian-all-holidays-flag t)
      (setq calendar-hebrew-all-holidays-flag t)
      (setq calendar-islamic-all-holidays-flag t)
   #+END_SRC

** Calfw

   [[https://github.com/kiwanami/emacs-calfw][Calfw]] generates useful calendar views suitable for printing or providing a
   more visual outlook on the day, week, two weeks, or month

   #+BEGIN_SRC emacs-lisp
     (use-package calfw)
     (use-package calfw-org)
     (require 'calfw)
     (require 'calfw-org)

     (defun db/my-open-calendar ()
       (interactive)
       (cfw:open-calendar-buffer
        :contents-sources
        (list
         (cfw:org-create-source "Green")  ; orgmode source
         ;;    (cfw:howm-create-source "Blue")  ; howm source
         ;;    (cfw:cal-create-source "Orange") ; diary source
         ;;    (cfw:ical-create-source "Moon" "~/moon.ics" "Gray")  ; ICS source1
         ;;    (cfw:ical-create-source "gcal" "https://..../basic.ics" "IndianRed") ; google calendar ICS
         )))
    #+END_SRC

** Org Edna

   Provides more powerful org dependency management.

   #+BEGIN_SRC emacs-lisp
     (org-edna-mode)

     (defun db/org-edna-blocked-by-descendants ()
       "Adds PROPERTY blocking this tasks unless descendants are DONE"
       (interactive)
       (org-set-property "BLOCKER" "descendants"))

     (defun db/org-edna-blocked-by-ancestors ()
       "Adds PROPERTY blocking this tasks unless ancestors are DONE"
       (interactive)
       (org-set-property "BLOCKER" "ancestors"))

     (defun db/org-edna-current-id ()
       "Get the current ID to make it easier to set up BLOCKER ids"
       (interactive)
       (set-register 'i (org-entry-get (point) "ID"))
       (message "ID stored"))

     (defun db/org-edna-blocked-by-id ()
       "Adds PROPERTY blocking task at point with specific task ID"
       (interactive)
       (org-set-property "BLOCKER" (s-concat "ids(" (get-register 'i) ")")))

     (define-keymap
       :keymap db/org-key-map
       "<up>"    'db/org-edna-blocked-by-ancestors
       "<down>"  'db/org-edna-blocked-by-descendants
       "<left>"  'db/org-edna-current-id
       "<right>" 'db/org-edna-blocked-by-id
       "i d"     'org-id-get-create)

   #+END_SRC

** Orgql

   #+BEGIN_SRC emacs-lisp
     (use-package org-ql)
   #+END_SRC
   
** Filter Refile Targets

   I have monthly log files used to take notes / journal that are sources of refile
   items but not targets. They are named YYYY-MM(w).org

   #+BEGIN_SRC emacs-lisp
     (defun db-filtered-refile-targets ()
       "Removes month journals as valid refile targets"
       (remove nil (mapcar (lambda (x)
                             (if (string-match-p "journals" x)
                                 nil x)) org-agenda-files)))

     (setq org-refile-targets '((db-filtered-refile-targets :maxlevel . 10)))

   #+END_SRC

** Org Capture Setup

   Org capture templates for Chrome org-capture from [[https://github.com/sprig/org-capture-extension][site]].

   Added this file: ~/.local/share/applications/org-protocol.desktop~ using the
   following command:

   #+BEGIN_EXAMPLE
     cat > "${HOME}/.local/share/applications/org-protocol.desktop" << EOF
     [Desktop Entry]
     Name=org-protocol
     Exec=emacsclient %u
     Type=Application
     Terminal=false
     Categories=System;
     MimeType=x-scheme-handler/org-protocol;
     EOF
   #+END_EXAMPLE

   and then run

   #+BEGIN_EXAMPLE
     update-desktop-database ~/.local/share/applications
   #+END_EXAMPLE

   #+BEGIN_SRC emacs-lisp
     (require 'org-protocol)
   #+END_SRC

*** Setting up org-protocol handler. This page has best description:

    [[https://github.com/sprig/org-capture-extension#set-up-handlers-in-emacs][This page]] has the best description. This is working in linux only, hence the todo. 

    #+BEGIN_SRC emacs-lisp
      (defun transform-square-brackets-to-round-ones(string-to-transform)
        "Transforms [ into ( and ] into ), other chars left unchanged."
        (concat 
         (mapcar #'(lambda (c) (if (equal c ?[) ?\( (if (equal c ?]) ?\) c))) string-to-transform))
        )

      (defvar db/org-contacts-template "* %(org-contacts-template-name)
              :PROPERTIES:
              :ADDRESS: %^{289 Cleveland St. Brooklyn, 11206 NY, USA}
              :MOBILE: %^{MOBILE}
              :BIRTHDAY: %^{yyyy-mm-dd}
              :EMAIL: %(org-contacts-template-email)
              :NOTE: %^{NOTE}
              :END:" "Template for org-contacts.")

      ;; if you set this variable you have to redefine the default t/Todo.
      (setq org-capture-templates 
            `(

              ;; ("t" "Tasks")

              ;; TODO     (t) Todo template
              ("t" "Todo" entry (file+headline ,org-default-notes-file "Refile")
               "* TODO %?"
               :empty-lines 1)

              ;; ("te" "Delegated" entry (file+headline ,org-default-notes-file "Refile")
              ;;  "* DELEGATED %?
              ;;  :PROPERTIES:
              ;;  :OWNER: %^{Delegated to?}
              ;;  :END:"
              ;;  :empty-lines 1)

              ;; ;; Note (n) template
              ("n" "Note" entry (file+headline ,org-default-notes-file "Refile")
               "* %? %(%i)"
               :empty-lines 1)

              ;; Protocol (p) template
              ("p" "Protocol" entry (file+headline ,org-default-notes-file "Refile")
               "* %^{Title}
                          Source: %u, %c
                         ,#+BEGIN_QUOTE
                         %i
                         ,#+END_QUOTE
                         %?"
               :empty-lines 1)

              ;; Protocol Link (L) template
              ("L" "Protocol Link" entry (file+headline ,org-default-notes-file "Refile")
               "* %? [[%:link][%(transform-square-brackets-to-round-ones \"%:description\")]]"
               :empty-lines 1)

              ;; Goal (G) template
              ("G" "Goal" entry (file+headline ,org-default-notes-file "Refile")
               "* GOAL %^{Describe your goal}
            Added on %U - Last reviewed on %U
                 :SMART:
                 :Sense: %^{What is the sense of this goal?}
            :Measurable: %^{How do you measure it?}
               :Actions: %^{What actions are needed?}
             :Resources: %^{Which resources do you need?}
               :Timebox: %^{How much time are you spending for it?}
                   :END:"
               :empty-lines 1)
              ;; Contact (c) template
              ("c" "Contact" entry (file+headline ,(concat org-directory "/contacts.org") "Contacts")
               "* %(org-contacts-template-name)
            :PROPERTIES:
             :ADDRESS: %^{289 Cleveland St. Brooklyn, 11206 NY, USA}
            :BIRTHDAY: %^{yyyy-mm-dd}
               :EMAIL: %(org-contacts-template-email)
                 :TEL: %^{NUMBER}
                :NOTE: %^{NOTE}
            :END:"
               :empty-lines 1)
              ))

   #+END_SRC        

** Org Screenshots

   #+BEGIN_SRC emacs-lisp
     (use-package org-attach-screenshot
       :config (setq org-attach-screenshot-dirfunction
             (lambda () 
               (when (cl-assert (buffer-file-name))
                  (concat (file-name-sans-extension (buffer-file-name))
                      "-att")))
             org-attach-screenshot-command-line "gnome-screenshot -a -f %f"))
   #+END_SRC

** Org Download

   Drag and drop support for images

   #+BEGIN_SRC emacs-lisp
     (use-package org-download)
     (require 'org-download)
     (setq org-download-method 'attach)
     ;; Drag-and-drop to `dired`
     (add-hook 'dired-mode-hook 'org-download-enable)
   #+END_SRC

** Personal and Work Toggle

   #+BEGIN_SRC emacs-lisp
     (defun db/org-work-context ()
       (interactive)
       (setq org-directory org-directory-work)
       (db/org-switch-context))

     (defun db/org-personal-context ()
       (interactive)
       (setq org-directory org-directory-personal)
       (db/org-switch-context))

     (defun db/org-switch-context ()
       (setq org-agenda-files (db/org-agenda-files))
       (setq org-default-notes-file (concat org-directory "/index.org"))
       (setq org-id-locations-file (expand-file-name ".org-id-locations" org-directory))
       (setq org-roam-directory (expand-file-name "roam" org-directory))
       (setq org-roam-db-location (expand-file-name "org-roam.db" org-roam-directory))
       (org-roam-db-sync))
  #+END_SRC

** Org Key Mappings

   #+BEGIN_SRC emacs-lisp
     (define-keymap
       :keymap db/org-key-map
       ;; dalies hang of C-o d
       "d ."    'org-roam-dailies-goto-today
       "d d"    'org-roam-dailies-capture-today
       "d y"    'org-roam-dailies-goto-yesterday
       "d t"    'org-roam-dailies-goto-tomorrow
       ;; roam hang of C-o r
       "r b"    'org-roam-buffer-toggle
       "r f"    'org-roam-node-find
       "r c"    'org-roam-capture              
       "r g"    'org-roam-graph
       "r i"    'org-roam-node-insert
       "r r"    'counsel-rg
       "j"      'counsel-org-goto
       "n o"    'counsel-org-agenda-headlines
       "r l"    'counsel-org-link
       "s"      'org-attach-screenshot)

   #+END_SRC


* Elfeed
  :PROPERTIES:
  :ARCHIVE_TIME: 2023-07-15 Sat 14:02
  :ARCHIVE_FILE: ~/.emacs.d/configuration.org
  :ARCHIVE_CATEGORY: configuration
  :END:

  Read news with elfeed

  #+BEGIN_SRC emacs-lisp
    (use-package elfeed)
    (use-package elfeed-org
      :init
      (setq elfeed-set-max-connections 32)
      (setq rmh-elfeed-org-files (list (expand-file-name "rss-feeds.org" org-directory-personal)))
      (elfeed-org)
      :bind
      (("C-c r" . elfeed)
       :map elfeed-show-mode-map
       ("o" . elfeed-show-visit)
       :map elfeed-search-mode-map
       ("o" . elfeed-search-browse-url)))

   #+END_SRC


* Elfeed-Tube
  :PROPERTIES:
  :ARCHIVE_TIME: 2023-07-15 Sat 14:02
  :ARCHIVE_FILE: ~/.emacs.d/configuration.org
  :ARCHIVE_CATEGORY: configuration
  :END:

  Use elfeed for youtube channels

  #+BEGIN_SRC emacs-lisp
    (use-package elfeed-tube
      :ensure t ;; or :straight t
      :after elfeed
      :demand t
      :config
      ;; (setq elfeed-tube-auto-save-p nil) ; default value
      ;; (setq elfeed-tube-auto-fetch-p t)  ; default value
      (elfeed-tube-setup)

      :bind (:map elfeed-show-mode-map
                  ("F" . elfeed-tube-fetch)
                  ([remap save-buffer] . elfeed-tube-save)
                  :map elfeed-search-mode-map
                  ("F" . elfeed-tube-fetch)
                  ([remap save-buffer] . elfeed-tube-save)))


    (use-package elfeed-tube-mpv
      :ensure t ;; or :straight t
      :bind (:map elfeed-show-mode-map
                  ("C-c C-f" . elfeed-tube-mpv-follow-mode)
                  ("C-c C-w" . elfeed-tube-mpv-where)))
  #+END_SRC


* Org Present
  :PROPERTIES:
  :ARCHIVE_TIME: 2023-07-15 Sat 14:02
  :ARCHIVE_FILE: ~/.emacs.d/configuration.org
  :ARCHIVE_CATEGORY: configuration
  :END:

  #+BEGIN_SRC emacs-lisp

    (unless (package-installed-p 'org-present)
      (package-install 'org-present))

    (defun db/org-present-prepare-slide (buffer-name heading)
      ;; Show only top-level headlines
      (org-overview)

      ;; Unfold the current entry
      (org-show-entry)

      ;; Show only direct subheadings of the slide but don't expand them
      (org-show-children))

    (defun db/org-present-start ()
      ;; Tweak font sizes
      (setq-local face-remapping-alist '((default (:height 1.5) variable-pitch)
                     (header-line (:height 4.0) variable-pitch)
                     (org-document-title (:height 1.75) org-document-title)
                     (org-code (:height 1.55) org-code)
                     (org-verbatim (:height 1.55) org-verbatim)
                     (org-block (:height 1.25) org-block)
                     (org-block-begin-line (:height 0.7) org-block)))

      ;; Set a blank header line string to create blank space at the top
      (setq header-line-format " ")

      ;; Display inline images automatically
      (org-display-inline-images)

      ;; Center the presentation and wrap lines
      (visual-fill-column-mode 1)
      (visual-line-mode 1))

    (defun db/org-present-end ()
      ;; Reset font customizations
      (setq-local face-remapping-alist '((default variable-pitch default)))

      ;; Clear the header line string so that it isn't displayed
      (setq header-line-format nil)

      ;; Stop displaying inline images
      (org-remove-inline-images)

      ;; Stop centering the document
      (visual-fill-column-mode 0)
      (visual-line-mode 0))

    ;; Turn on variable pitch fonts in Org Mode buffers
    ;; (add-hook 'org-mode-hook 'variable-pitch-mode)

    ;; Register hooks with org-present
    (add-hook 'org-present-mode-hook 'db/org-present-start)
    (add-hook 'org-present-mode-quit-hook 'db/org-present-end)
    (add-hook 'org-present-after-navigate-functions 'db/org-present-prepare-slide)

  #+END_SRC


* Org Transculsion
  :PROPERTIES:
  :ARCHIVE_TIME: 2023-07-15 Sat 14:02
  :ARCHIVE_FILE: ~/.emacs.d/configuration.org
  :ARCHIVE_CATEGORY: configuration
  :END:

  #+BEGIN_SRC emacs-lisp

    (use-package org-transclusion
      :after org
      :init
      )

  #+END_SRC


* Org Habit Stats
  :PROPERTIES:
  :ARCHIVE_TIME: 2023-07-15 Sat 14:02
  :ARCHIVE_FILE: ~/.emacs.d/configuration.org
  :ARCHIVE_CATEGORY: configuration
  :END:

  Comprehensive [[https://github.com/ml729/org-habit-stats][stats on your habits]].
   
  #+BEGIN_SRC emacs-lisp

    ;; if it is installed
    (if (db/add-to-load-path "~/.emacs.d/lisp/org-habit-stats" t)
        (load "org-habit-stats"))

  #+END_SRC


* Blogging / Org2Blog
  :PROPERTIES:
  :ARCHIVE_TIME: 2023-07-15 Sat 14:02
  :ARCHIVE_FILE: ~/.emacs.d/configuration.org
  :ARCHIVE_CATEGORY: configuration
  :END:

  Blogging set up for https://www.donald-brady.com

  #+BEGIN_SRC emacs-lisp
    (use-package org2blog
      :config
      (setq org2blog/wp-blog-alist
            '(
              ("wordpress"
               :url "https://donaldbrady.wordpress.com/xmlrpc.php"
               :username "donald.brady@gmail.com")))
      (setq org2blog/wp-image-upload t)
      (setq org2blog/wp-image-thumbnails t)
      (setq org2blog/wp-show-post-in-browser 'ask)
      :bind
      ("\C-c h" . org2blog-user-interface))

  #+END_SRC


* Mastodon
  :PROPERTIES:
  :ARCHIVE_TIME: 2023-07-15 Sat 14:02
  :ARCHIVE_FILE: ~/.emacs.d/configuration.org
  :ARCHIVE_CATEGORY: configuration
  :END:

  From here: https://codeberg.org/martianh/mastodon.el
  
  #+BEGIN_SRC emacs-lisp

    (use-package mastodon
      :ensure t
      :config
      (setq mastodon-tl--show-avatars t)
      (setq mastodon-media--avatar-height 40)
      (mastodon-discover))

    (setq mastodon-instance-url "https://mastodon.social"
          mastodon-active-user "donald_brady")



  #+END_SRC


* Developer Modes
  :PROPERTIES:
  :ARCHIVE_TIME: 2023-07-15 Sat 14:02
  :ARCHIVE_FILE: ~/.emacs.d/configuration.org
  :ARCHIVE_CATEGORY: configuration
  :END:

  #+BEGIN_SRC emacs-lisp
    (require 'yaml-mode)
    (add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-mode))
   #+END_SRC


* lsp-bridge (Experimental)
  :PROPERTIES:
  :ARCHIVE_TIME: 2023-07-15 Sat 14:02
  :ARCHIVE_FILE: ~/.emacs.d/configuration.org
  :ARCHIVE_CATEGORY: configuration
  :END:

  [[https://github.com/manateelazycat/lsp-bridge][lsp-bridge]]
   
  #+BEGIN_SRC emacs-lisp
    (db/add-to-load-path "~/src/lsp-bridge" nil '(posframe))
  #+END_SRC
   

* Vale Integration
  :PROPERTIES:
  :ARCHIVE_TIME: 2023-07-15 Sat 14:02
  :ARCHIVE_FILE: ~/.emacs.d/configuration.org
  :ARCHIVE_CATEGORY: configuration
  :END:
  
  Vale integration:
  https://github.com/grettke/flycheck-org-vale
  
  #+BEGIN_SRC emacs-lisp
    (db/add-to-load-path "~/src/flycheck-org-vale" t '(flycheck-org-vale))
  #+END_SRC
  

* LSP-Bridge (Experimental)
  :PROPERTIES:
  :ARCHIVE_TIME: 2023-07-15 Sat 14:24
  :ARCHIVE_FILE: ~/.emacs.d/configuration.org
  :ARCHIVE_CATEGORY: configuration
  :END:

  #+BEGIN_SRC emacs-lisp

    ;; don't go global on for now. 
    (setq db/go-lsp-bridge nil)

    (if (and (file-directory-p "~/src/lsp-bridge") db/go-lsp-bridge)
        (progn
          (require 'lsp-bridge)
          (global-lsp-bridge-mode)))
  #+END_SRC


* Personal and Work Toggle
  :PROPERTIES:
  :ARCHIVE_TIME: 2023-08-13 Sun 11:13
  :ARCHIVE_FILE: ~/.emacs.d/configuration.org
  :ARCHIVE_OLPATH: Org Mode
  :ARCHIVE_CATEGORY: configuration
  :END:

  #+BEGIN_SRC emacs-lisp
    (defun db/org-work-context ()
      (interactive)
      (setq org-directory org-directory-work)
      (db/org-switch-context))

    (defun db/org-personal-context ()
      (interactive)
      (setq org-directory org-directory-personal)
      (db/org-switch-context))

    (defun db/org-switch-context ()
      (setq org-agenda-files (db/org-agenda-files))
      (setq org-default-notes-file (concat org-directory "/index.org"))
      (setq org-id-locations-file (expand-file-name ".org-id-locations" org-directory))
      (setq org-roam-directory (expand-file-name "roam" org-directory))
      (setq org-roam-db-location (expand-file-name "org-roam.db" org-roam-directory))
      (org-roam-db-sync))
 #+END_SRC


* Flycheck
  :PROPERTIES:
  :ARCHIVE_TIME: 2023-09-07 Thu 18:17
  :ARCHIVE_FILE: ~/.emacs.d/configuration.org
  :ARCHIVE_CATEGORY: configuration
  :END:

  #+BEGIN_SRC emacs-lisp
    (use-package flycheck
        :init (global-flycheck-mode))

    (use-package flycheck-inline
      :after flycheck
      :config
      (add-hook 'flycheck-mode-hook #'flycheck-inline-mode))
  #+END_SRC


* Markdown Mode
  :PROPERTIES:
  :ARCHIVE_TIME: 2023-09-07 Thu 18:18
  :ARCHIVE_FILE: ~/.emacs.d/configuration.org
  :ARCHIVE_CATEGORY: configuration
  :END:

  #+BEGIN_SRC emacs-lisp
    (use-package markdown-mode
      :mode ("README\\.md\\'" . gfm-mode)
      :init (setq markdown-command "multimarkdown"))
  #+END_SRC
  

* Marginalia
  :PROPERTIES:
  :ARCHIVE_TIME: 2023-09-29 Fri 10:56
  :ARCHIVE_FILE: ~/.emacs.d/configuration.org
  :ARCHIVE_CATEGORY: configuration
  :END:
  Provides richer annotations in minibuffer

  #+BEGIN_SRC emacs-lisp

    (use-package marginalia
      ;; Either bind `marginalia-cycle` globally or only in the minibuffer
    :bind (("M-A" . marginalia-cycle)
           :map minibuffer-local-map
           ("M-A" . marginalia-cycle))
    :init
    ;; Must be in the :init section of use-package such that the mode gets
    ;; enabled right away. Note that this forces loading the package.
    (marginalia-mode))

  #+END_SRC


* Consult
  :PROPERTIES:
  :ARCHIVE_TIME: 2023-09-29 Fri 10:56
  :ARCHIVE_FILE: ~/.emacs.d/configuration.org
  :ARCHIVE_CATEGORY: configuration
  :END:

  #+BEGIN_SRC emacs-lisp
    ;; Consult: Misc. enhanced commands
    (use-package consult
      :ensure t
      ;; Other good things to bind: consult-ripgrep, consult-line-multi,
      ;; consult-history, consult-outline
      :bind (("C-x b" . consult-buffer) ; orig. switch-to-buffer
             ("M-y" . consult-yank-pop) ; orig. yank-pop
             ("C-s" . consult-line))    ; orig. isearch
      :config
      ;; Narrowing lets you restrict results to certain groups of candidates
      (setq consult-narrow-key "<"))

    #+END_SRC


* Embark    
  :PROPERTIES:
  :ARCHIVE_TIME: 2023-09-29 Fri 10:56
  :ARCHIVE_FILE: ~/.emacs.d/configuration.org
  :ARCHIVE_CATEGORY: configuration
  :END:

  #+BEGIN_SRC emacs-lisp

    (use-package embark
      :ensure t
      :demand t
      :after avy
      :bind (("C-c a" . embark-act))        ; bind this to an easy key to hit
      :init
      ;; Add the option to run embark when using avy
      (defun bedrock/avy-action-embark (pt)
        (unwind-protect
            (save-excursion
              (goto-char pt)
              (embark-act))
          (select-window
           (cdr (ring-ref avy-ring 0))))
        t)

      ;; After invoking avy-goto-char-timer, hit "." to run embark at the next
      ;; candidate you select
      (setf (alist-get ?. avy-dispatch-alist) 'bedrock/avy-action-embark))

    (use-package embark-consult
      :ensure t)

  #+END_SRC  


* Mini-buffer Completion
  :PROPERTIES:
  :ARCHIVE_TIME: 2023-09-29 Fri 10:56
  :ARCHIVE_FILE: ~/.emacs.d/configuration.org
  :ARCHIVE_CATEGORY: configuration
  :END:
** Vertico

   #+BEGIN_SRC emacs-lisp

     (use-package vertico
       :ensure t
       :init
       ;; You'll want to make sure that e.g. fido-mode isn't enabled
       (vertico-mode))

     (require 'vertico-directory)

   #+END_SRC

** Corfu

   #+BEGIN_SRC emacs-lisp

     ;; Popup completion-at-point
     (use-package corfu
       :ensure t
       :init
       (progn
         (global-corfu-mode)
         (setq corfu-popupinfo-delay 0.2)
         (corfu-popupinfo-mode))
       :bind
       (:map corfu-map
             ("SPC" . corfu-insert-separator)
             ("C-n" . corfu-next)
             ("C-p" . corfu-previous)))

     ;; Pretty icons for corfu
     (use-package kind-icon
       :if (display-graphic-p)
       :ensure t
       :after corfu
       :config
       (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter))

   #+END_SRC


* Ivy
  :PROPERTIES:
  :ARCHIVE_TIME: 2023-09-29 Fri 10:58
  :ARCHIVE_FILE: ~/.emacs.d/configuration.org
  :ARCHIVE_CATEGORY: configuration
  :END:

  #+BEGIN_SRC emacs-lisp
    (use-package ivy
      :config
      (setq ivy-use-virtual-buffers t)
      (setq ivy-use-selectable-prompt t)
      (setq enable-recursive-minibuffers t)
      (ivy-mode 1))
  #+END_SRC


* Elfeed-Tube
  :PROPERTIES:
  :ARCHIVE_TIME: 2023-09-29 Fri 11:00
  :ARCHIVE_FILE: ~/.emacs.d/configuration.org
  :ARCHIVE_CATEGORY: configuration
  :END:

  Use elfeed for youtube channels

  #+BEGIN_SRC emacs-lisp
    (use-package elfeed-tube
      :after elfeed
      :demand t
      :config
      ;; (setq elfeed-tube-auto-save-p nil) ; default value
      ;; (setq elfeed-tube-auto-fetch-p t)  ; default value
      (elfeed-tube-setup)

      :bind (:map elfeed-show-mode-map
                  ("F" . elfeed-tube-fetch)
                  ([remap save-buffer] . elfeed-tube-save)
                  :map elfeed-search-mode-map
                  ("F" . elfeed-tube-fetch)
                  ([remap save-buffer] . elfeed-tube-save)))


    (use-package elfeed-tube-mpv
      :bind (:map elfeed-show-mode-map
                  ("C-c C-f" . elfeed-tube-mpv-follow-mode)
                  ("C-c C-w" . elfeed-tube-mpv-where)))
  #+END_SRC


* Swiper
  :PROPERTIES:
  :ARCHIVE_TIME: 2023-09-29 Fri 11:18
  :ARCHIVE_FILE: ~/.emacs.d/configuration.org
  :ARCHIVE_CATEGORY: configuration
  :END:
  Use swiper for better searching
  #+BEGIN_SRC emacs-lisp
    (use-package swiper
      :bind
      (("\C-s" . swiper)))
  #+END_SRC



* Org Present
  :PROPERTIES:
  :ARCHIVE_TIME: 2023-10-08 Sun 06:57
  :ARCHIVE_FILE: ~/newemacs/configuration.org
  :ARCHIVE_CATEGORY: configuration
  :END:

  #+BEGIN_SRC emacs-lisp

    (unless (package-installed-p 'org-present)
      (package-install 'org-present))

    (defun db/org-present-prepare-slide (buffer-name heading)
      ;; Show only top-level headlines
      (org-overview)

      ;; Unfold the current entry
      (org-show-entry)

      ;; Show only direct subheadings of the slide but don't expand them
      (org-show-children))

    (defun db/org-present-start ()
      ;; Tweak font sizes
      (setq-local face-remapping-alist '((default (:height 1.5) variable-pitch)
                     (header-line (:height 4.0) variable-pitch)
                     (org-document-title (:height 1.75) org-document-title)
                     (org-code (:height 1.55) org-code)
                     (org-verbatim (:height 1.55) org-verbatim)
                     (org-block (:height 1.25) org-block)
                     (org-block-begin-line (:height 0.7) org-block)))

      ;; Set a blank header line string to create blank space at the top
      (setq header-line-format " ")

      ;; Display inline images automatically
      (org-display-inline-images)

      ;; Center the presentation and wrap lines
      (visual-fill-column-mode 1)
      (visual-line-mode 1))

    (defun db/org-present-end ()
      ;; Reset font customizations
      (setq-local face-remapping-alist '((default variable-pitch default)))

      ;; Clear the header line string so that it isn't displayed
      (setq header-line-format nil)

      ;; Stop displaying inline images
      (org-remove-inline-images)

      ;; Stop centering the document
      (visual-fill-column-mode 0)
      (visual-line-mode 0))

    ;; Turn on variable pitch fonts in Org Mode buffers
    ;; (add-hook 'org-mode-hook 'variable-pitch-mode)

    ;; Register hooks with org-present
    (add-hook 'org-present-mode-hook 'db/org-present-start)
    (add-hook 'org-present-mode-quit-hook 'db/org-present-end)
    (add-hook 'org-present-after-navigate-functions 'db/org-present-prepare-slide)

  #+END_SRC


* Org Transculsion
  :PROPERTIES:
  :ARCHIVE_TIME: 2023-10-08 Sun 06:57
  :ARCHIVE_FILE: ~/newemacs/configuration.org
  :ARCHIVE_CATEGORY: configuration
  :END:

  #+BEGIN_SRC emacs-lisp

    (use-package org-transclusion
      :after org
      :init
      )

  #+END_SRC


* Window Handling
  :PROPERTIES:
  :ARCHIVE_TIME: 2023-10-08 Sun 07:03
  :ARCHIVE_FILE: ~/newemacs/configuration.org
  :ARCHIVE_CATEGORY: configuration
  :END:

  This is from system crafters.

  #+BEGIN_SRC emacs-lisp
    ;; Make sure repeat-mode is turned on first!
    (repeat-mode 1)

    (defvar-keymap db/window-key-map
      :doc "Bindings for managing windows, configured to be repeatable."
      :repeat t
      "c" 'delete-window
      "|" 'split-window-horizontally
      "-" 'split-window-vertically
      "h" 'windmove-left
      "j" 'windmove-down
      "k" 'windmove-up
      "l" 'windmove-right
      "C-h" 'shrink-window-horizontally
      "C-j" 'shrink-window
      "C-k" 'enlarge-window
      "C-l" 'enlarge-window-horizontally
      "H" 'windmove-swap-states-left
      "J" 'windmove-swap-states-down
      "K" 'windmove-swap-states-up
      "L" 'windmove-swap-states-right)

    (global-set-key (kbd "C-c w") db/window-key-map)

  #+END_SRC


* Developer Modes
  :PROPERTIES:
  :ARCHIVE_TIME: 2023-10-08 Sun 07:06
  :ARCHIVE_FILE: ~/newemacs/configuration.org
  :ARCHIVE_CATEGORY: configuration
  :END:

  #+BEGIN_SRC emacs-lisp
    (require 'yaml-mode)
    (add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-mode))
   #+END_SRC


* Projectile
:PROPERTIES:
:ARCHIVE_TIME: 2023-10-08 Sun 07:28
:ARCHIVE_FILE: ~/newemacs/configuration.org
:ARCHIVE_CATEGORY: configuration
:END:

  [[https://projectile.mx/][Projectile]] is useful for navigating dev projects
  
  #+BEGIN_SRC emacs-lisp
    (use-package projectile)
    (require 'projectile)
    (projectile-mode +1)
  #+END_SRC

# * Ivy

#   #+BEGIN_SRC emacs-lisp
#     (use-package ivy
#       :config
#       (setq ivy-use-virtual-buffers t)
#       (setq ivy-use-selectable-prompt t)
#       (setq enable-recursive-minibuffers t)
#       (ivy-mode 1))
#   #+END_SRC

# * Orderless

#   When searching order does not matter making it easier to find things. 

#   #+BEGIN_SRC emacs-lisp
#     (use-package orderless
#       :config
#       (setq completion-styles '(orderless)))
#   #+END_SRC

# * Swiper
#   Use swiper for better searching
#   #+BEGIN_SRC emacs-lisp
#     (use-package swiper
#       :bind
#       (("\C-s" . swiper)))
#   #+END_SRC

# * Org Mode

# ** Org Mode Packages

#    #+BEGIN_SRC emacs-lisp
#      (use-package org)
#      (use-package org-contrib)
#      (use-package org-superstar)
#      (use-package org-edna)
#      (use-package org-ql)
#      (use-package counsel)
#      (use-package org-super-agenda)
#      (require 'org-habit)
#   #+END_SRC

# ** Org Appearance

#   #+BEGIN_SRC emacs-lisp


#   #+END_SRC
  
# ** Basic Org Config  

#    #+BEGIN_SRC emacs-lisp
#      (add-hook 'org-mode-hook (lambda () (org-superstar-mode 1)))

#      (setq org-image-actual-width nil)
#      (setq org-modules (append '(org-protocol) org-modules))
#      (setq org-modules (append '(habit) org-modules))
#      (setq org-catch-invisible-edits 'smart)
#      (setq org-ctrl-k-protect-subtree t)
#      (set-face-attribute 'org-headline-done nil :strike-through t)
#      (setq org-return-follows-link t)
#      (setq org-adapt-indentation t)
#      (setq org-odt-preferred-output-format "docx")
#      (setq org-agenda-skip-scheduled-if-done t)
#      (setq org-agenda-skip-scheduled-if-deadline-is-shown t)
#      ;; all my org related keys will be set up in this keymap
#      (global-set-key
#       (kbd "C-c o")
#       (define-keymap
#         :prefix 'db/org-key-map
#         "l" 'org-store-link
#         "c" 'org-capture
#         "a" 'org-agenda))

#      ;; override y (agenda year) with more useful todo yesterday for marking habits done prior day 
#      (define-key org-agenda-mode-map (kbd "y") 'org-agenda-todo-yesterday)

#    #+END_SRC

# ** Org File Locations

#    #+BEGIN_SRC emacs-lisp
#      (setq org-directory "~/OrgDocuments/personal")
#      (setq org-id-locations-file (expand-file-name ".org-id-locations" org-directory))
#      (setq org-attach-dir-relative t)

#      ;; various helper functions for finding files
#      (defun db/current-index-file ()
#        "Returns the current index file which is dependent on current context" 
#        (expand-file-name "index.org" org-directory))

#      (setq org-default-notes-file (db/current-index-file))


#      (defun db/current-monthly-journal ()
#        "Returns the current months journal"
#        (setq current-year (format-time-string "%Y"))
#        (setq current-month (format-time-string "%m"))
#        (concat org-directory "/journals/" current-year "/" current-year "-" current-month ".org"))

#      (defun db/get-all-directories (directory)
#        "Return a list of DIRECTORY and all its subdirectories, excluding directories with a '.orgexclude' file."
#        (let ((directories '()))
#          (dolist (file (directory-files directory t))
#            (when (and (file-directory-p file)
#                       (not (string-prefix-p "." (file-name-nondirectory file)))
#                       (not (file-exists-p (expand-file-name ".orgexclude" file))))
#              (setq directories (append directories (list file)))))
#          (append (list directory) (mapcan 'db/get-all-directories directories))))

#      (defun db/get-org-files-in-directories (directories)
#        "Return a list of all .org and .org.gpg files within the given DIRECTORIES."
#        (let ((org-files '()))
#          (dolist (dir directories)
#            (dolist (file (directory-files dir t))
#              (let ((name (file-name-nondirectory file)))
#                (when (or (string-suffix-p ".org" name)
#                          (string-suffix-p ".org.gpg" name))
#                  (push file org-files)))))
#          org-files))

#      (defun db/org-agenda-files ()
#        (db/get-org-files-in-directories (db/get-all-directories org-directory)))

#      (setq org-agenda-files (db/org-agenda-files))

#   #+END_SRC

# ** Org Roam

#    Likewise org-roam defaults to personal.

#    #+BEGIN_SRC emacs-lisp
#      (setq org-roam-v2-ack t)
#      (use-package org-roam)
#      (setq org-roam-directory (expand-file-name "roam" org-directory))
#      (setq org-roam-db-location (expand-file-name "org-roam.db" org-roam-directory))
#      (setq org-roam-db-autosync-mode t)

#      ;; required for org-roam bookmarklet 
#      (require 'org-roam-protocol)

#      ;; Org-roam Capture Templates

#      ;; Starter pack. If there is only one, it uses automatically without asking.

#      (setq org-roam-capture-templates
#            '(("d" "default" plain "%?"
#               :if-new (file+head"%(format-time-string \"%Y-%m-%d--%H-%M-%SZ--${slug}.org\" (current-time) t)"
#                                 "#+title: ${title}\n#+filetags: %^G:\n\n* ${title}\n\n")
#               :unnarrowed t)
#              ("y" "yank" plain "%?"
#               :if-new (file+head"%(format-time-string \"%Y-%m-%d--%H-%M-%SZ--${slug}.org\" (current-time) t)"
#                                 "#+title: ${title}\n#+filetags: %^G\n\n%c\n\n")
#               :unnarrowed t)
#              ("r" "region" plain "%?"
#               :if-new (file+head"%(format-time-string \"%Y-%m-%d--%H-%M-%SZ--${slug}.org\" (current-time) t)"
#                                 "#+title: ${title}\n#+filetags: %^G\n\n%i\n\n")
#               :unnarrowed t)

#              ("o" "org-roam-it" plain "%?"
#               :if-new (file+head"%(format-time-string \"%Y-%m-%d--%H-%M-%SZ--${slug}.org\" (current-time) t)"
#                                 "#+title: ${title}\n#+filetags:\n{ref}\n")
#               :unnarrowed t)))

#      (add-hook 'org-capture-after-finalize-hook
#                (lambda ()
#                  (if (org-roam-file-p)
#                      (org-roam-db-sync))))

#      ;; this is required to get matching on tags
#      (setq org-roam-node-display-template
#            (concat "${title:*} "
#                    (propertize "${tags:10}" 'face 'org-tag)))


#    #+END_SRC

#    Install org-roam-ui for a vizual of my roam database.

#    #+BEGIN_SRC emacs-lisp
#      (package-install 'org-roam-ui)
#    #+END_SRC

# ** Language Support

#    #+BEGIN_SRC emacs-lisp
#      (org-babel-do-load-languages
#       'org-babel-load-languages
#       '((emacs-lisp . t)
#         (ruby . t)
#         (python . t)
#         (sql . t)
#         (shell . t)
#         (clojure . t)
#         (gnuplot . t)))

#      (setq org-confirm-babel-evaluate nil)
#      (setq org-export-with-smart-quotes t)
#      (setq org-src-fontify-natively t)
#      (setq org-src-tab-acts-natively t)
#      (setq org-src-window-setup 'current-window)

#    #+END_SRC

# ** Task Handling and Agenda

#    Establishes the states and other settings related to task handling.

#    #+BEGIN_SRC emacs-lisp

#      (setq org-enforce-todo-dependencies t)
#      (setq org-enforce-todo-checkbox-dependencies t)
#      (setq org-deadline-warning-days 7)

#      (setq org-todo-keywords '((sequence
#                                 "TODO(t)"
#                                 "STARTED(s)"
#                                 "WAITING(w)"
#                                 "HOLD(h)" "|"
#                                 "DONE(d)"
#                                 "SUSPENDED(u)")))


#      (setq org-todo-keyword-faces
#            '(("TODO" . (:foreground "blue" :weight bold))
#              ("STARTED" . (:foreground "green"))
#              ("DONE" . (:foreground "pink"))
#              ("WAITING" . (:foreground "orange"))
#              ("HOLD" . (:foreground "orange"))
#              ("SUSPENDED" . (:foreground "forest green"))
#              ("TASK" . (:foreground "blue"))))

#      (setq org-tags-exclude-from-inheritance '("project" "interview" "call" "errand" "meeting")
#            org-stuck-projects '("+project/-MAYBE-DONE"
#                                 ("TODO" "WAITING") ()))

#      (setq org-log-done 'time)
#      (setq org-log-into-drawer t)
#      (setq org-log-reschedule 'note)

#      ;; agenda settings
#      (setq org-agenda-span 1)
#      (setq org-agenda-start-on-weekday nil)

#     (add-hook 'org-agenda-mode-hook (lambda ()
#                                       (define-key org-agenda-mode-map (kbd "S") 'org-agenda-schedule)))
#     (add-hook 'org-agenda-mode-hook (lambda ()
#                                       (define-key org-agenda-mode-map (kbd "D") 'org-agenda-deadline)))
     
#    #+END_SRC

#    Use org-super-agenda

#    #+BEGIN_SRC emacs-lisp
#      (require 'org-super-agenda)
#      (setq org-super-agenda-groups
#             '(;; Each group has an implicit boolean OR operator between its selectors.
#               (:name "Today"  ; Optionally specify section name
#                      :time-grid t  ; Items that appear on the time grid
#                      :todo "TODAY")  ; Items that have this TODO keyword
#               (:name "Projects"
#                      :tag "project")
#               (:name "Important"
#                      :priority "A")
#               ;; Set order of multiple groups at once
#               ;; (:order-multi (2 (:name "Shopping in town"
#               ;;                         ;; Boolean AND group matches items that match all subgroups
#               ;;                         :and (:tag "shopping" :tag "@town"))
#               ;;                  (:name "Food-related"
#               ;;                         ;; Multiple args given in list with implicit OR
#               ;;                         :tag ("food" "dinner"))
#               ;;                  (:name "Personal"
#               ;;                         :habit t
#               ;;                         :tag "personal")
#               ;;                  (:name "Space-related (non-moon-or-planet-related)"
#               ;;                         ;; Regexps match case-insensitively on the entire entry
#               ;;                         :and (:regexp ("space" "NASA")
#               ;;                                       ;; Boolean NOT also has implicit OR between selectors
#               ;;                                       :not (:regexp "moon" :tag "planet")))))
#               ;; Groups supply their own section names when none are given
#               (:todo "WAITING" :order 8)  ; Set order of this section
#               (:name "Errands" :tag "errand")
#               (:name "Calls" :tag "call")
#               (:todo ("EVENT" "INFO" "TO-READ" "CHECK" "TO-WATCH" "WATCHING")
#                      ;; Show this group at the end of the agenda (since it has the
#                      ;; highest number). If you specified this group last, items
#                      ;; with these todo keywords that e.g. have priority A would be
#                      ;; displayed in that group instead, because items are grouped
#                      ;; out in the order the groups are listed.
#                      :order 9)
#               (:priority<= "B"
#                            ;; Show this section after "Today" and "Important", because
#                            ;; their order is unspecified, defaulting to 0. Sections
#                            ;; are displayed lowest-number-first.
#                            :order 1)
#               ;; After the last group, the agenda will display items that didn't
#               ;; match any of these groups, with the default order position of 99
#               ))
#      (org-super-agenda-mode t)

#    #+END_SRC         

# ** Diary Settings

#     I don't use the diary file but it's useful for holidays.

#     #+BEGIN_SRC emacs-lisp
#       (setq calendar-bahai-all-holidays-flag nil)
#       (setq calendar-christian-all-holidays-flag t)
#       (setq calendar-hebrew-all-holidays-flag t)
#       (setq calendar-islamic-all-holidays-flag t)
#    #+END_SRC

# ** Calfw

#    [[https://github.com/kiwanami/emacs-calfw][Calfw]] generates useful calendar views suitable for printing or providing a
#    more visual outlook on the day, week, two weeks, or month

#    #+BEGIN_SRC emacs-lisp
#      (use-package calfw)
#      (use-package calfw-org)
#      (require 'calfw)
#      (require 'calfw-org)

#      (defun db/my-open-calendar ()
#        (interactive)
#        (cfw:open-calendar-buffer
#         :contents-sources
#         (list
#          (cfw:org-create-source "Green")  ; orgmode source
#          ;;    (cfw:howm-create-source "Blue")  ; howm source
#          ;;    (cfw:cal-create-source "Orange") ; diary source
#          ;;    (cfw:ical-create-source "Moon" "~/moon.ics" "Gray")  ; ICS source1
#          ;;    (cfw:ical-create-source "gcal" "https://..../basic.ics" "IndianRed") ; google calendar ICS
#          )))
#     #+END_SRC

# ** Org Edna

#    Provides more powerful org dependency management.

#    #+BEGIN_SRC emacs-lisp
#      (org-edna-mode)

#      (defun db/org-edna-blocked-by-descendants ()
#        "Adds PROPERTY blocking this tasks unless descendants are DONE"
#        (interactive)
#        (org-set-property "BLOCKER" "descendants"))

#      (defun db/org-edna-blocked-by-ancestors ()
#        "Adds PROPERTY blocking this tasks unless ancestors are DONE"
#        (interactive)
#        (org-set-property "BLOCKER" "ancestors"))

#      (defun db/org-edna-current-id ()
#        "Get the current ID to make it easier to set up BLOCKER ids"
#        (interactive)
#        (set-register 'i (org-entry-get (point) "ID"))
#        (message "ID stored"))

#      (defun db/org-edna-blocked-by-id ()
#        "Adds PROPERTY blocking task at point with specific task ID"
#        (interactive)
#        (org-set-property "BLOCKER" (s-concat "ids(" (get-register 'i) ")")))

#      (define-keymap
#        :keymap db/org-key-map
#        "<up>"    'db/org-edna-blocked-by-ancestors
#        "<down>"  'db/org-edna-blocked-by-descendants
#        "<left>"  'db/org-edna-current-id
#        "<right>" 'db/org-edna-blocked-by-id
#        "i d"     'org-id-get-create)

#    #+END_SRC

# ** Orgql

#    #+BEGIN_SRC emacs-lisp
#      (use-package org-ql)
#    #+END_SRC
   
# ** Filter Refile Targets

#    I have monthly log files used to take notes / journal that are sources of refile
#    items but not targets. They are named YYYY-MM(w).org

#    #+BEGIN_SRC emacs-lisp
#      (defun db-filtered-refile-targets ()
#        "Removes month journals as valid refile targets"
#        (remove nil (mapcar (lambda (x)
#                              (if (string-match-p "journals" x)
#                                  nil x)) org-agenda-files)))

#      (setq org-refile-targets '((db-filtered-refile-targets :maxlevel . 10)))

#    #+END_SRC

# ** Org Capture Setup

#    Org capture templates for Chrome org-capture from [[https://github.com/sprig/org-capture-extension][site]].

#    Added this file: ~/.local/share/applications/org-protocol.desktop~ using the
#    following command:

#    #+BEGIN_EXAMPLE
#      cat > "${HOME}/.local/share/applications/org-protocol.desktop" << EOF
#      [Desktop Entry]
#      Name=org-protocol
#      Exec=emacsclient %u
#      Type=Application
#      Terminal=false
#      Categories=System;
#      MimeType=x-scheme-handler/org-protocol;
#      EOF
#    #+END_EXAMPLE

#    and then run

#    #+BEGIN_EXAMPLE
#      update-desktop-database ~/.local/share/applications
#    #+END_EXAMPLE

#    #+BEGIN_SRC emacs-lisp
#      (require 'org-protocol)
#    #+END_SRC

# *** Setting up org-protocol handler. This page has best description:

#     [[https://github.com/sprig/org-capture-extension#set-up-handlers-in-emacs][This page]] has the best description. This is working in linux only, hence the todo. 

#     #+BEGIN_SRC emacs-lisp
#       (defun transform-square-brackets-to-round-ones(string-to-transform)
#         "Transforms [ into ( and ] into ), other chars left unchanged."
#         (concat 
#          (mapcar #'(lambda (c) (if (equal c ?[) ?\( (if (equal c ?]) ?\) c))) string-to-transform))
#         )

#       (defvar db/org-contacts-template "* %(org-contacts-template-name)
#               :PROPERTIES:
#               :ADDRESS: %^{289 Cleveland St. Brooklyn, 11206 NY, USA}
#               :MOBILE: %^{MOBILE}
#               :BIRTHDAY: %^{yyyy-mm-dd}
#               :EMAIL: %(org-contacts-template-email)
#               :NOTE: %^{NOTE}
#               :END:" "Template for org-contacts.")

#       ;; if you set this variable you have to redefine the default t/Todo.
#       (setq org-capture-templates 
#             `(

#               ;; ("t" "Tasks")

#               ;; TODO     (t) Todo template
#               ("t" "Todo" entry (file+headline ,org-default-notes-file "Refile")
#                "* TODO %?"
#                :empty-lines 1)

#               ;; ;; Note (n) template
#               ("n" "Note" entry (file+headline ,org-default-notes-file "Refile")
#                "* %? %(%i)"
#                :empty-lines 1)

#               ;; Protocol (p) template
#               ("p" "Protocol" entry (file+headline ,org-default-notes-file "Refile")
#                "* %^{Title}
#                           Source: %u, %c
#                          ,#+BEGIN_QUOTE
#                          %i
#                          ,#+END_QUOTE
#                          %?"
#                :empty-lines 1)

#               ;; Protocol Link (L) template
#               ("L" "Protocol Link" entry (file+headline ,org-default-notes-file "Refile")
#                "* %? [[%:link][%(transform-square-brackets-to-round-ones \"%:description\")]]"
#                :empty-lines 1)

#               ;; Goal (G) template
#               ("G" "Goal" entry (file+headline ,org-default-notes-file "Refile")
#                "* GOAL %^{Describe your goal}
#             Added on %U - Last reviewed on %U
#                  :SMART:
#                  :Sense: %^{What is the sense of this goal?}
#             :Measurable: %^{How do you measure it?}
#                :Actions: %^{What actions are needed?}
#              :Resources: %^{Which resources do you need?}
#                :Timebox: %^{How much time are you spending for it?}
#                    :END:"
#                :empty-lines 1)
#               ;; Contact (c) template
#               ("c" "Contact" entry (file+headline ,(concat org-directory "/contacts.org") "Contacts")
#                "* %(org-contacts-template-name)
#             :PROPERTIES:
#              :ADDRESS: %^{289 Cleveland St. Brooklyn, 11206 NY, USA}
#             :BIRTHDAY: %^{yyyy-mm-dd}
#                :EMAIL: %(org-contacts-template-email)
#                  :TEL: %^{NUMBER}
#                 :NOTE: %^{NOTE}
#             :END:"
#                :empty-lines 1)
#               ))

#    #+END_SRC        

# ** Org Screenshots

#    #+BEGIN_SRC emacs-lisp
#      (use-package org-attach-screenshot
#        :config (setq org-attach-screenshot-dirfunction
#              (lambda () 
#                (when (cl-assert (buffer-file-name))
#                   (concat (file-name-sans-extension (buffer-file-name))
#                       "-att")))
#              org-attach-screenshot-command-line "gnome-screenshot -a -f %f"))
#    #+END_SRC

# ** Org Download

#    Drag and drop support for images

#    #+BEGIN_SRC emacs-lisp
#      (use-package org-download)
#      (require 'org-download)
#      (setq org-download-method 'attach)
#      ;; Drag-and-drop to `dired`
#      (add-hook 'dired-mode-hook 'org-download-enable)
#    #+END_SRC

# ** Org Key Mappings

#    #+BEGIN_SRC emacs-lisp
#      (define-keymap
#        :keymap db/org-key-map
#        ;; dalies hang of C-c o d
#        "d ."    'org-roam-dailies-goto-today
#        "d d"    'org-roam-dailies-capture-today
#        "d y"    'org-roam-dailies-goto-yesterday
#        "d t"    'org-roam-dailies-goto-tomorrow
#        ;; roam hang of C-c o r
#        "r b"    'org-roam-buffer-toggle
#        "r f"    'org-roam-node-find
#        "r c"    'org-roam-capture              
#        "r g"    'org-roam-graph
#        "r i"    'org-roam-node-insert
#        ;; counsel mish mash
#        "r r"    'counsel-rg
#        "j"      'counsel-org-goto-all
#        "n o"    'counsel-org-agenda-headlines
#        "n l"    'db/counsel-org-agenda-insert-link-to-headlines
#        "r l"    'counsel-org-link
#        "s"      'org-attach-screenshot)

#    #+END_SRC

# * Elfeed

#   Read news with elfeed

#   #+BEGIN_SRC emacs-lisp
#     (use-package elfeed)
#     (use-package elfeed-org
#       :init
#       (setq elfeed-set-max-connections 32)
#       (setq rmh-elfeed-org-files (list (expand-file-name "rss-feeds.org" org-directory)))
#       (elfeed-org)
#       :bind
#       (("C-c r" . elfeed)
#        :map elfeed-show-mode-map
#        ("o" . elfeed-show-visit)
#        :map elfeed-search-mode-map
#        ("o" . elfeed-search-browse-url)))

#    #+END_SRC

# * Elfeed with xwidgets

#   #+BEGIN_SRC emacs-lisp
#     (use-package elfeed-webkit
#        :init
#        (setq elfeed-webkit-auto-tags '(webkit comics))
#        :config
#        (elfeed-webkit-auto-enable-by-tag)
#        :bind (:map elfeed-show-mode-map
#                    ("t" . elfeed-webkit-toggle)))
#   #+END_SRC

# * Org Habit Stats

#   Comprehensive [[https://github.com/ml729/org-habit-stats][stats on your habits]].
   
#   #+BEGIN_SRC emacs-lisp

#     ;; if it is installed
#     (if (db/add-to-load-path "~/.emacs.d/lisp/org-habit-stats" t)
#         (load "org-habit-stats"))

#   #+END_SRC

# * Blogging / Org2Blog

#   Blogging set up for https://www.donald-brady.com

#   #+BEGIN_SRC emacs-lisp
#     (use-package org2blog
#       :config
#       (setq org2blog/wp-blog-alist
#             '(
#               ("wordpress"
#                :url "https://donaldbrady.wordpress.com/xmlrpc.php"
#                :username "donald.brady@gmail.com")))
#       (setq org2blog/wp-image-upload t)
#       (setq org2blog/wp-image-thumbnails t)
#       (setq org2blog/wp-show-post-in-browser 'ask)
#       :bind
#       ("\C-c h" . org2blog-user-interface))

#   #+END_SRC

# * Mastodon

#   From here: https://codeberg.org/martianh/mastodon.el
  
#   #+BEGIN_SRC emacs-lisp

#     (use-package mastodon
#       :config
#       (setq mastodon-tl--show-avatars t)
#       (setq mastodon-media--avatar-height 40)
#       (mastodon-discover))

#     (setq mastodon-instance-url "https://mastodon.social"
#           mastodon-active-user "donald_brady")



#   #+END_SRC

# * Developer Enhancements

# ** Git Gutter

#    #+BEGIN_SRC emacs-lisp
#      (use-package git-gutter
#        :config
#        (setq git-gutter:modified-sign "|")
#        (setq git-gutter:added-sign "|")
#        (setq git-gutter:deleted-sign "|")
#        (global-git-gutter-mode t))
#    #+END_SRC

# * ChatGPT Integration as a Shell

#   Using https://github.com/xenodium/chatgpt-shell

#   #+BEGIN_SRC emacs-lisp

#     (use-package chatgpt-shell
#       :init
#       (setq chatgpt-shell-openai-key
#           (auth-source-pick-first-password :host "api.openai.com")))
   
#     (define-key global-map (kbd "C-c g r") 'chatgpt-shell-send-region)

#   #+END_SRC

# * Company

#   #+BEGIN_SRC emacs-lisp
#     (use-package company
#       :config
#       (add-hook 'after-init-hook 'global-company-mode))

#     (use-package company-emoji
#       :init
#       (add-to-list 'company-backends 'company-emoji))

#   #+END_SRC

# * Hydra

#   Starting to use Hydra for better navigation options and rusty memory when
#   accessing seldom used modes.

#   #+BEGIN_SRC emacs-lisp
#     (use-package hydra :commands defhydra)
#     (use-package use-package-hydra)
#   #+END_SRC

# ** My File Hydra

#    This is taken from [[https://sachachua.com/dotemacs/index.html][sachachua]] but seems over complex.
   
#    #+BEGIN_SRC emacs-lisp
#           (defvar my-refile-map (make-sparse-keymap))

#           (defmacro my-defshortcut (key file)
#             `(progn
#                (set-register ,key (cons 'file ,file))
#                (bookmark-store ,file (list (cons 'filename ,file)
#                                            (cons 'position 1)
#                                            (cons 'front-context-string "")) nil)
#                (define-key my-refile-map
#                            (char-to-string ,key)
#                            (lambda (prefix)
#                              (interactive "p")
#                              (let ((org-refile-targets '(((,file) :maxlevel . 6)))
#                                    (current-prefix-arg (or current-prefix-arg '(4))))
#                                (call-interactively 'org-refile))))))

#           (defmacro defshortcuts (name body &optional docstring &rest heads)
#             (declare (indent defun) (doc-string 3))
#             (cond ((stringp docstring))
#                   (t
#                    (setq heads (cons docstring heads))
#                    (setq docstring "")))
#             (list
#              'progn
#              (append `(defhydra ,name (:exit t))
#                      (mapcar (lambda (h)
#                                (list (elt h 0) (list 'find-file (elt h 1)) (elt h 2)))
#                              heads))
#              (cons 'progn
#                    (mapcar (lambda (h) (list 'my-defshortcut (string-to-char (elt h 0)) (elt h 1)))
#                            heads))))

#           (defmacro defshortcuts+ (name body &optional docstring &rest heads)
#             (declare (indent defun) (doc-string 3))
#             (cond ((stringp docstring))
#                   (t
#                    (setq heads (cons docstring heads))
#                    (setq docstring "")))
#             (list
#              'progn
#              (append `(defhydra+ ,name (:exit t))
#                      (mapcar (lambda (h)
#                                (list (elt h 0) (list 'find-file (elt h 1)) (elt h 2)))
#                              heads))
#              (cons 'progn
#                    (mapcar (lambda (h) (list 'my-defshortcut (string-to-char (elt h 0)) (elt h 1)))
#                            heads))))


#           (use-package hydra
#             :config
#             (defshortcuts my-file-shortcuts ()
#               ("i" (db/current-index-file) "Index File")
#               ("j" (db/current-monthly-journal) "Monthly Journal File")
#               ("b" "~/OrgDocuments/personal/Books/first-90-days/the-first-90-days.org" "Current Book")
#               ("s" "~/OrgDocuments/personal/shopping.org" "Shopping List")
#               ("p" "~/OrgDocuments/personal/peloton.org" "Peloton Log"))
#             :bind
#             ("C-c f" . #'my-file-shortcuts/body))

#    #+END_SRC

# ** Mastodon Hydra

#    #+BEGIN_SRC emacs-lisp

#      (defhydra mastodon-help (:color blue :hint nil)
#        "
#      Timelines^^   Toots^^^^           Own Toots^^   Profiles^^      Users/Follows^^  Misc^^
#      ^^-----------------^^^^--------------------^^----------^^-------------------^^------^^-----
#      _H_ome        _n_ext _p_rev       _r_eply       _A_uthors       follo_W_         _X_ lists
#      _L_ocal       _T_hread of toot^^  wri_t_e       user _P_rofile  _N_otifications  f_I_lter
#      _F_ederated   (un) _b_oost^^      _e_dit        ^^              _R_equests       _C_opy URL
#      fa_V_orites   (un) _f_avorite^^   _d_elete      _O_wn           su_G_estions     _S_earch
#      _#_ tagged    (un) p_i_n^^        ^^            _U_pdate own    _M_ute user      _h_elp
#      _@_ mentions  (un) boo_k_mark^^   show _E_dits  ^^              _B_lock user
#      boo_K_marks   _v_ote^^
#      trendin_g_
#      _u_pdate
#      "
#        ("H" mastodon-tl--get-home-timeline)
#        ("L" mastodon-tl--get-local-timeline)
#        ("F" mastodon-tl--get-federated-timeline)
#        ("V" mastodon-profile--view-favourites)
#        ("#" mastodon-tl--get-tag-timeline)
#        ("@" mastodon-notifications--get-mentions)
#        ("K" mastodon-profile--view-bookmarks)
#        ("g" mastodon-search--trending-tags)
#        ("u" mastodon-tl--update :exit nil)

#        ("n" mastodon-tl--goto-next-toot)
#        ("p" mastodon-tl--goto-prev-toot)
#        ("T" mastodon-tl--thread)
#        ("b" mastodon-toot--toggle-boost :exit nil)
#        ("f" mastodon-toot--toggle-favourite :exit nil)
#        ("i" mastodon-toot--pin-toot-toggle :exit nil)
#        ("k" mastodon-toot--bookmark-toot-toggle :exit nil)
#        ("c" mastodon-tl--toggle-spoiler-text-in-toot)
#        ("v" mastodon-tl--poll-vote)

#        ("A" mastodon-profile--get-toot-author)
#        ("P" mastodon-profile--show-user)
#        ("O" mastodon-profile--my-profile)
#        ("U" mastodon-profile--update-user-profile-note)

#        ("W" mastodon-tl--follow-user)
#        ("N" mastodon-notifications-get)
#        ("R" mastodon-profile--view-follow-requests)
#        ("G" mastodon-tl--get-follow-suggestions)
#        ("M" mastodon-tl--mute-user)
#        ("B" mastodon-tl--block-user)

#        ("r" mastodon-toot--reply)
#        ("t" mastodon-toot)
#        ("e" mastodon-toot--edit-toot-at-point)
#        ("d" mastodon-toot--delete-toot)
#        ("E" mastodon-toot--view-toot-edits)

#        ("I" mastodon-tl--view-filters)
#        ("X" mastodon-tl--view-lists)
#        ("C" mastodon-toot--copy-toot-url)
#        ("S" mastodon-search--search-query)
#        ("h" describe-mode)
#        )

#      (define-key mastodon-mode-map "?" 'mastodon-help/body)

#    #+END_SRC

# ** Org Mode Hydra

#    #+BEGIN_SRC emacs-lisp

#    #+END_SRC
   
# ** Dired Mode Hydra

#    #+BEGIN_SRC emacs-lisp
#           (defhydra hydra-dired (:hint nil :color pink)
#        "
#      _+_ mkdir          _v_iew           _m_ark             _(_ details        _i_nsert-subdir    wdired
#      _C_opy             _O_ view other   _U_nmark all       _)_ omit-mode      _$_ hide-subdir    C-x C-q : edit
#      _D_elete           _o_pen other     _u_nmark           _l_ redisplay      _w_ kill-subdir    C-c C-c : commit
#      _R_ename           _M_ chmod        _t_oggle           _g_ revert buf     _e_ ediff          C-c ESC : abort
#      _Y_ rel symlink    _G_ chgrp        _E_xtension mark   _s_ort             _=_ pdiff
#      _S_ymlink          ^ ^              _F_ind marked      _._ toggle hydra   \\ flyspell
#      _r_sync            ^ ^              ^ ^                ^ ^                _?_ summary
#      _z_ compress-file  _A_ find regexp
#      _Z_ compress       _Q_ repl regexp

#      T - tag prefix
#      "
#        ("\\" dired-do-ispell)
#        ("(" dired-hide-details-mode)
#        (")" dired-omit-mode)
#        ("+" dired-create-directory)
#        ("=" diredp-ediff)         ;; smart diff
#        ("?" dired-summary)
#        ("$" diredp-hide-subdir-nomove)
#        ("A" dired-do-find-regexp)
#        ("C" dired-do-copy)        ;; Copy all marked files
#        ("D" dired-do-delete)
#        ("E" dired-mark-extension)
#        ("e" dired-ediff-files)
#        ("F" dired-do-find-marked-files)
#        ("G" dired-do-chgrp)
#        ("g" revert-buffer)        ;; read all directories again (refresh)
#        ("i" dired-maybe-insert-subdir)
#        ("l" dired-do-redisplay)   ;; relist the marked or singel directory
#        ("M" dired-do-chmod)
#        ("m" dired-mark)
#        ("O" dired-display-file)
#        ("o" dired-find-file-other-window)
#        ("Q" dired-do-find-regexp-and-replace)
#        ("R" dired-do-rename)
#        ("r" dired-do-rsynch)
#        ("S" dired-do-symlink)
#        ("s" dired-sort-toggle-or-edit)
#        ("t" dired-toggle-marks)
#        ("U" dired-unmark-all-marks)
#        ("u" dired-unmark)
#        ("v" dired-view-file)      ;; q to exit, s to search, = gets line #
#        ("w" dired-kill-subdir)
#        ("Y" dired-do-relsymlink)
#        ("z" diredp-compress-this-file)
#        ("Z" dired-do-compress)
#        ("q" nil)
#        ("." nil :color blue))

#        (define-key dired-mode-map "?" 'hydra-dired/body)

#    #+END_SRC

# ** PDF Tools Hydra

#    #+BEGIN_SRC emacs-lisp

#      (defhydra hydra-pdftools (:color blue :hint nil)
#              "
#                                                                            ╭───────────┐
#             Move  History   Scale/Fit     Annotations  Search/Link    Do   │ PDF Tools │
#         ╭──────────────────────────────────────────────────────────────────┴───────────╯
#               ^^_g_^^      _B_    ^↧^    _+_    ^ ^     [_al_] list    [_s_] search    [_u_] revert buffer
#               ^^^↑^^^      ^↑^    _H_    ^↑^  ↦ _W_ ↤   [_am_] markup  [_o_] outline   [_i_] info
#               ^^_p_^^      ^ ^    ^↥^    _0_    ^ ^     [_at_] text    [_F_] link      [_d_] dark mode
#               ^^^↑^^^      ^↓^  ╭─^─^─┐  ^↓^  ╭─^ ^─┐   [_ad_] delete  [_f_] search link
#          _h_ ←pag_e_→ _l_  _N_  │ _P_ │  _-_    _b_     [_aa_] dired
#               ^^^↓^^^      ^ ^  ╰─^─^─╯  ^ ^  ╰─^ ^─╯   [_y_]  yank
#               ^^_n_^^      ^ ^  _r_eset slice box
#               ^^^↓^^^
#               ^^_G_^^
#         --------------------------------------------------------------------------------
#              "
#              ("\\" hydra-master/body "back")
#              ("<ESC>" nil "quit")
#              ("al" pdf-annot-list-annotations)
#              ("ad" pdf-annot-delete)
#              ("aa" pdf-annot-attachment-dired)
#              ("am" pdf-annot-add-markup-annotation)
#              ("at" pdf-annot-add-text-annotation)
#              ("y"  pdf-view-kill-ring-save)
#              ("+" pdf-view-enlarge :color red)
#              ("-" pdf-view-shrink :color red)
#              ("0" pdf-view-scale-reset)
#              ("H" pdf-view-fit-height-to-window)
#              ("W" pdf-view-fit-width-to-window)
#              ("P" pdf-view-fit-page-to-window)
#              ("n" pdf-view-next-page-command :color red)
#              ("p" pdf-view-previous-page-command :color red)
#              ("d" pdf-view-dark-minor-mode)
#              ("b" pdf-view-set-slice-from-bounding-box)
#              ("r" pdf-view-reset-slice)
#              ("g" pdf-view-first-page)
#              ("G" pdf-view-last-page)
#              ("e" pdf-view-goto-page)
#              ("o" pdf-outline)
#              ("s" pdf-occur)
#              ("i" pdf-misc-display-metadata)
#              ("u" pdf-view-revert-buffer)
#              ("F" pdf-links-action-perfom)
#              ("f" pdf-links-isearch-link)
#              ("B" pdf-history-backward :color red)
#              ("N" pdf-history-forward :color red)
#              ("l" image-forward-hscroll :color red)
#              ("h" image-backward-hscroll :color red))

#    #+END_SRC
# * Globally set keys

#   #+BEGIN_SRC emacs-lisp
#     ;; keyboard macros
#     (global-set-key (kbd "<f1>") 'start-kbd-macro)
#     (global-set-key (kbd "<f2>") 'end-kbd-macro)
#     (global-set-key (kbd "<f3>") 'call-last-kbd-macro)

#     ;; replace buffer-menu with ibuffer
#     (global-set-key (kbd "C-x C-b") 'ibuffer)
#     (global-set-key (kbd "<f12>") 'bury-buffer) ;; F12 on logi keybpard
#     (global-set-key (kbd "C-c M-l") 'global-display-line-numbers-mode)

#   #+END_SRC

# * Theme and Faces and Fun

#   #+BEGIN_SRC emacs-lisp

#     (setq custom-safe-themes t)
#     (load-theme 'ef-deuteranopia-dark)
#     (nyan-mode)

#   #+END_SRC

# * Start a server

#   #+BEGIN_SRC emacs-lisp
#     (load "server")
#     (unless (server-running-p) (server-start))
#   #+END_SRC

#   #+BEGIN_SRC emacs-lisp
#     (file-notify-rm-all-watches)
#   #+END_SRC
# * Load any of my lisp files

#   Load any .el files in =.emacs.d/lisp= directory. This is not recursive so any
#   code in sub-directories will not be loaded. This is intentional to allow for
#   later selective loading if there are dependencies. 
  
#   #+BEGIN_SRC emacs-lisp
#     (defun load-directory (dir)
#       (let ((load-it (lambda (f)
#                (load-file (concat (file-name-as-directory dir) f)))
#              ))
#     (mapc load-it (directory-files dir nil "\\.el$"))))
#     (load-directory (concat user-emacs-directory "/lisp"))
#   #+END_SRC


#   #+BEGIN_SRC emacs-lisp

#     (defun db/add-to-load-path (path feature_toggle &optional dependency_list)
#       "Adds a path to the load-path if it exists and the feature_toggle
#       is on. An optional list of packages that are dependencies can be
#       provided and they will be required if the load-path is updated."
#       (when (and feature_toggle (file-directory-p path))
#         (add-to-list 'load-path path)
#         (when dependency_list
#           (dolist (package dependency_list)
#             (require package)))
#         t))

#   #+END_SRC


* Elfeed with xwidgets
  :PROPERTIES:
  :ARCHIVE_TIME: 2024-02-17 Sat 15:05
  :ARCHIVE_FILE: ~/.emacs.d/configuration.org
  :ARCHIVE_CATEGORY: configuration
  :END:

  #+BEGIN_SRC emacs-lisp
    (use-package elfeed-webkit
       :init
       (setq elfeed-webkit-auto-tags '(webkit comics))
       :config
       (elfeed-webkit-auto-enable-by-tag)
       :bind (:map elfeed-show-mode-map
                   ("t" . elfeed-webkit-toggle)))
  #+END_SRC


* ChatGPT Integration as a Shell
  :PROPERTIES:
  :ARCHIVE_TIME: 2024-03-06 Wed 10:24
  :ARCHIVE_FILE: ~/.emacs.d/configuration.org
  :ARCHIVE_CATEGORY: configuration
  :END:

  Using https://github.com/xenodium/chatgpt-shell

  #+BEGIN_SRC emacs-lisp

    (use-package chatgpt-shell
      :ensure t
      :config
      (setq chatgpt-shell-openai-key
            (auth-source-pick-first-password :host "api.openai.com")))

  #+END_SRC


* Golden Ratio
  :PROPERTIES:
  :ARCHIVE_TIME: 2024-04-29 Mon 10:58
  :ARCHIVE_FILE: ~/.emacs.d/configuration.org
  :ARCHIVE_OLPATH: Visual Appearance
  :ARCHIVE_CATEGORY: configuration
  :END:

  #+BEGIN_SRC emacs-lisp
    (golden-ratio-mode)
  #+END_SRC
   

* Denote
  :PROPERTIES:
  :ARCHIVE_TIME: 2024-06-24 Mon 15:10
  :ARCHIVE_FILE: ~/.emacs.d/configuration.org
  :ARCHIVE_CATEGORY: configuration
  :END:

  #+BEGIN_SRC emacs-lisp
    (use-package denote)
    (require 'denote)
    (require 'denote-journal-extras)
    (require 'denote-silo-extras)    

    ;; Remember to check the doc strings of those variables.
    (setq denote-directory (expand-file-name "~/OrgDocuments/personal/"))
    (setq denote-known-keywords '("emacs" "philosophy" "politics" "economics"))
    (setq denote-infer-keywords t)
    (setq denote-sort-keywords t)
    (setq denote-file-type nil) ; Org is the default, set others here
    (setq denote-prompts '(title keywords))
    (setq denote-excluded-directories-regexp nil)
    (setq denote-excluded-keywords-regexp nil)
    (setq denote-journal-extras-directory "~/OrgDocuments/personal/journals")

    ;; Pick dates, where relevant, with Org's advanced interface:
    (setq denote-date-prompt-use-org-read-date t)


    ;; Read this manual for how to specify `denote-templates'.  We do not
    ;; include an example here to avoid potential confusion.


    (setq denote-date-format nil) ; read doc string

    ;; By default, we do not show the context of links.  We just display
    ;; file names.  This provides a more informative view.
    (setq denote-backlinks-show-context t)

    ;; Also see `denote-link-backlinks-display-buffer-action' which is a bit
    ;; advanced.

    ;; If you use Markdown or plain text files (Org renders links as buttons
    ;; right away)
    (add-hook 'find-file-hook #'denote-link-buttonize-buffer)

    ;; We use different ways to specify a path for demo purposes.
    (setq denote-dired-directories
          (list denote-directory
                (thread-last denote-directory (expand-file-name "attachments"))
                (expand-file-name "~/OrgDocuments/personal/books")))

    ;; Generic (great if you rename files Denote-style in lots of places):
    ;; (add-hook 'dired-mode-hook #'denote-dired-mode)
    ;;
    ;; OR if only want it in `denote-dired-directories':
    (add-hook 'dired-mode-hook #'denote-dired-mode-in-directories)


    ;; Automatically rename Denote buffers using the `denote-rename-buffer-format'.
    (denote-rename-buffer-mode 1)

    ;; Denote DOES NOT define any key bindings.  This is for the user to
    ;; decide.  For example:
    (let ((map global-map))
      (define-key map (kbd "C-c n n") #'denote)
      (define-key map (kbd "C-c n c") #'denote-region) ; "contents" mnemonic
      (define-key map (kbd "C-c n N") #'denote-type)
      (define-key map (kbd "C-c n d") #'denote-date)
      (define-key map (kbd "C-c n z") #'denote-signature) ; "zettelkasten" mnemonic
      (define-key map (kbd "C-c n s") #'denote-subdirectory)
      (define-key map (kbd "C-c n t") #'denote-template)
      ;; If you intend to use Denote with a variety of file types, it is
      ;; easier to bind the link-related commands to the `global-map', as
      ;; shown here.  Otherwise follow the same pattern for `org-mode-map',
      ;; `markdown-mode-map', and/or `text-mode-map'.
      (define-key map (kbd "C-c n i") #'denote-link) ; "insert" mnemonic
      (define-key map (kbd "C-c n I") #'denote-add-links)
      (define-key map (kbd "C-c n b") #'denote-backlinks)
      (define-key map (kbd "C-c n f f") #'denote-find-link)
      (define-key map (kbd "C-c n f b") #'denote-find-backlink)
      ;; Note that `denote-rename-file' can work from any context, not just
      ;; Dired bufffers.  That is why we bind it here to the `global-map'.
      (define-key map (kbd "C-c n r") #'denote-rename-file)
      (define-key map (kbd "C-c n R") #'denote-rename-file-using-front-matter))

    ;; Key bindings specifically for Dired.
    (let ((map dired-mode-map))
      (define-key map (kbd "C-c C-d C-i") #'denote-link-dired-marked-notes)
      (define-key map (kbd "C-c C-d C-r") #'denote-dired-rename-files)
      (define-key map (kbd "C-c C-d C-k") #'denote-dired-rename-marked-files-with-keywords)
      (define-key map (kbd "C-c C-d C-R") #'denote-dired-rename-marked-files-using-front-matter))

    (with-eval-after-load 'org-capture
      (setq denote-org-capture-specifiers "%l\n%i\n%?")
      (add-to-list 'org-capture-templates
                   '("n" "New note (with denote.el)" plain
                     (file denote-last-path)
                     #'denote-org-capture
                     :no-save t
                     :immediate-finish nil
                     :kill-buffer t
                     :jump-to-captured t)))

    ;; Also check the commands `denote-link-after-creating',
    ;; `denote-link-or-create'.  You may want to bind them to keys as well.


    ;; If you want to have Denote commands available via a right click
    ;; context menu, use the following and then enable
    ;; `context-menu-mode'.
    (add-hook 'context-menu-functions #'denote-context-menu)
  #+END_SRC

* Casual
  :PROPERTIES:
  :ARCHIVE_TIME: 2024-07-08 Mon 17:02
  :ARCHIVE_FILE: ~/.emacs.d/configuration.org
  :ARCHIVE_OLPATH: Developer Enhancements
  :ARCHIVE_CATEGORY: configuration
  :END:

  Makes calc a little easier to use.
   
  #+BEGIN_SRC emacs-lisp
    (use-package casual)
    (define-key calc-mode-map (kbd "C-o") 'casual-main-menu)
  #+END_SRC
