#    -*- mode: org -*-


Archived entries from file /home/d/.emacs.d/configuration.org


* Add a CREATED timestamp property to all TODOs
  :PROPERTIES:
  :ARCHIVE_TIME: 2021-09-18 Sat 07:14
  :ARCHIVE_FILE: ~/.emacs.d/configuration.org
  :ARCHIVE_OLPATH: Org Mode/Personal and Work Toggle
  :ARCHIVE_CATEGORY: configuration
  :END:

  All of this comes from [[https://gist.github.com/mrvdb/4037694][this gist]]. Would be nice if org mode just offered
  this as a local set up option.

  #+begin_src emacs-lisp

    ;; Allow automatically handing of created/expired meta data.
    (require 'org-expiry)

    ;; Configure it a bit to my liking
    (setq
      org-expiry-created-property-name "CREATED" ; Name of property when an item is created
      org-expiry-inactive-timestamps   t         ; Don't have everything in the agenda view
    )

    (defun db/insert-created-timestamp()
      "Insert a CREATED property using org-expiry.el for TODO entries"
      (org-expiry-insert-created)
      (org-back-to-heading)
      (org-end-of-line)
      (insert " "))

    ;; Whenever a TODO entry is created, I want a timestamp
    ;; Advice org-insert-todo-heading to insert a created timestamp using org-expiry
    (defadvice org-insert-todo-heading (after db/created-timestamp-advice activate)
      "Insert a CREATED property using org-expiry.el for TODO entries"
      (db/insert-created-timestamp))

    ;; Make it active
    (ad-activate 'org-insert-todo-heading)

    (defadvice org-capture (after db/created-timestamp-advice activate)
      "Insert a CREATED property using org-expiry.el for TODO entries"
      ; Test if the captured entry is a TODO, if so insert the created
      ; timestamp property, otherwise ignore
      (when (member (org-get-todo-state) org-todo-keywords-1)
        (db/insert-created-timestamp)))

    (ad-activate 'org-capture)

    ;; Add feature to allow easy adding of tags in a capture window
    (defun db/add-tags-in-capture()
      (interactive)
      "Insert tags in a capture window without losing the point"
      (save-excursion
        (org-back-to-heading)
        (org-set-tags)))

  #+end_src

* SUSPENDED Undo Tree
  :PROPERTIES:
  :ARCHIVE_TIME: 2022-08-08 Mon 09:42
  :ARCHIVE_FILE: ~/.emacs.d/configuration.org
  :ARCHIVE_CATEGORY: configuration
  :ARCHIVE_TODO: SUSPENDED
  :END:

  Performance on msys2 is very sub-par so turning off.
  
  #+BEGIN_SRC emacs-lisp
    ;; (use-package undo-tree
    ;;   :config
    ;;   (setq undo-tree-history-directory-alist '(("." . "~/.emacs.d/undo")))
    ;;   (global-undo-tree-mode))
  #+END_SRC
  

* Hyperbole
  :PROPERTIES:
  :ARCHIVE_TIME: 2022-08-08 Mon 09:43
  :ARCHIVE_FILE: ~/.emacs.d/configuration.org
  :ARCHIVE_CATEGORY: configuration
  :END:

  Change Hyperbole key to M-\ which is nicely above the enter key on this
  laptop.
  
  #+BEGIN_SRC emacs-lisp
    (use-package hyperbole
      :config
      (add-hook 'hyperbole-init-hook (lambda () (hkey-set-key "\M-\\" 'hkey-either))))
  #+END_SRC
  

* Chat GPT Integration in Org Mode
  :PROPERTIES:
  :ARCHIVE_TIME: 2023-05-15 Mon 14:59
  :ARCHIVE_FILE: ~/.emacs.d/configuration.org
  :ARCHIVE_CATEGORY: configuration
  :END:

  Using https://github.com/rksm/org-ai
  
  #+BEGIN_SRC emacs-lisp

    (setq db/org-ai nil)

    
    (if (db/add-to-load-path "~/.emacs.d/lisp/org-ai" db/org-ai)
        (use-package org-ai
          :load-path (lambda () "lisp/org-ai")
          :commands (org-ai-mode)
          :custom
          (org-ai-openai-api-token (db/openai-api-key))
          :init
          (add-hook 'org-mode-hook #'org-ai-mode)
          :config
          (advice-add 'keyboard-quit :before #'org-ai-keyboard-quit)))

  #+END_SRC


* Reading Email with mu4e
  :PROPERTIES:
  :ARCHIVE_TIME: 2023-06-15 Thu 14:30
  :ARCHIVE_FILE: ~/.emacs.d/configuration.org
  :ARCHIVE_CATEGORY: configuration
  :END:

  mu4e isn't in melpa (wtf) and has to be installed by installing mu which
  on fedora is =sudu dnf install maildir-utils=

  To initialize the database =mu init --maildir=~/Maildir --my-address=donald.brady@gmail.com=

   #+BEGIN_SRC emacs-lisp
     (if (file-directory-p "/usr/share/emacs/site-lisp/mu4e")
         (progn
           ;; if the directory exists then load up otherwise not
           (db/add-to-load-path "/usr/share/emacs/site-lisp/mu4e" t)
           (require 'mu4e)

           ;; contexts
           (setq mu4e-contexts
                 `( ,(make-mu4e-context
                      :name "gmail"
                      :enter-func (lambda () (mu4e-message "Entering gmail context"))
                      :leave-func (lambda () (mu4e-message "Leaving gmail Context"))
                      ;; we match based on the contact-fields of the message
                      :match-func (lambda (msg)
                                    (when msg
                                      (mu4e-message-contact-field-matches msg
                                                                          :to "donald.brady@gmail.com")))
                      :vars '( ( user-mail-address	    . "donald.brady@gmail.com"  )
                               ( user-full-name	    . "Donald Brady" )
                               ( mu4e-compose-signature .
                                 (concat
                                  "Donald Brady\n"
                                  "e: donald.brady@gmail.com\n" "t: 260 632 7239\n"))))))

           (setq mu4e-context-policy 'pick-first)

           ;; use mu4e for e-mail in emacs
           (setq mail-user-agent 'mu4e-user-agent)

           ;; these must start with a "/", and must exist
           ;; (i.e.. /home/user/Maildir/gmail/Sent must exist) you use e.g. 'mu mkdir' and
           ;; 'mu init' to make the Maildirs if they don't already exist.

           (setq mu4e-sent-folder   "/gmail/Sent")
           (setq mu4e-drafts-folder "/gmail/Drafts")
           (setq mu4e-trash-folder  "/gmail/Trash")
           (setq mu4e-refile-folder "/gmail/Archive")

           ;; mbsync for fetching email
           (setq mu4e-get-mail-command "mbsync -V gmail")

           ;; reading
           (setq mu4e-attachment-dir "~/Downloads")  

           (define-key mu4e-view-mode-map (kbd "C-c C-o") 'mu4e~view-browse-url-from-binding)  

           ;; View images inline

           (setq mu4e-view-show-images t)
           (when (fboundp 'imagemagick-register-types)
             (imagemagick-register-types))

           ;; You will need to install =msmtp= and configure that as needed.

           (setq message-send-mail-function 'message-send-mail-with-sendmail)
           (setq message-sendmail-extra-arguments '("--read-envelope-from"))
           (setq message-sendmail-f-is-evil 't)
           (setq sendmail-program "msmtp") 

           ;; agenda integration
           (require 'org-mu4e)
           (setq org-mu4e-link-query-in-headers-mode nil)

           ;; contacts integration
           (load-file (expand-file-name "lisp/org-contacts/org-contacts.el" user-emacs-directory))
           (require 'org-contacts)

           (setq org-contacts-files '("~/OrgDocuments/personal/contacts.org"))
           (setq mu4e-org-contacts-file (car org-contacts-files))
           (add-to-list 'mu4e-headers-actions
                        '("org-contact-add" . mu4e-action-add-org-contact) t)

           (setq mu4e-view-actions
                 '(("sMark as spam" . mu4e-view-register-msg-as-spam)
                   ("bViewInBrowser" . mu4e-action-view-in-browser)
                   ("capture message" . mu4e-action-capture-message)
                   ("oOrg Contact Add" . mu4e-action-add-org-contact)
                   ("tShow this thread" . mu4e-action-show-thread)))

           (setq mu4e-headers-actions mu4e-view-actions)

           ;; global key
           (global-set-key (kbd "C-c m") 'mu4e)
           ))

   #+END_SRC

