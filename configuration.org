#+TITLE: Emacs Configuration
#+AUTHOR: Donald Brady
#+EMAIL: d@donald-brady.com
#+OPTIONS: toc:nil
#+STARTUP: overview


* See .init.el

  =.init.el= set up the magic that is =use-package= and =org-babel-load-file= to
  allow for confirguration to be literate.
  
* Configure use-package

Use =use-package= to install and configure packages. My =init.el= includes
the initial setup for =package.el= and ensures that =use-package= is installed.

This makes sure that =use-package= will install the package if it's not already
available. 

#+BEGIN_SRC emacs-lisp
  (require 'use-package-ensure)
  (setq use-package-always-ensure t)
#+END_SRC

I use this on windows as well and things are just flakier over there so there I
am going to turn off package signature check

#+BEGIN_SRC emacs-lisp
  (if (string-equal system-type "windows-nt")
      (setq package-check-signature nil))
#+END_SRC

Always compile packages, and use the newest version available.

#+BEGIN_SRC emacs-lisp
  (use-package auto-compile
    :config (auto-compile-on-load-mode))

  (setq load-prefer-newer t)
#+END_SRC

* Personal Details Setup

Sets up some personal information sucha as email

#+BEGIN_SRC emacs-lisp

  (setq user-full-name "Donald Brady" user-mail-address "d@donald-brady.com")

#+END_SRC

* Set up savefile, backup, and autosave directories

#+BEGIN_SRC emacs-lisp

  (defconst dbrady-savefile-dir (expand-file-name "savefile" user-emacs-directory))

  ;; create the savefile dir if it doesn't exist
  (unless (file-exists-p dbrady-savefile-dir) (make-directory dbrady-savefile-dir))

  ;; store all backup and autosave files in the tmp dir
  (setq backup-directory-alist `((".*" . ,temporary-file-directory)))
  (setq auto-save-file-name-transforms `((".*" ,temporary-file-directory t)))

  ;; saveplace remembers your location in a file when saving files
  (use-package saveplace
    :config
    (setq save-place-file (expand-file-name "saveplace" dbrady-savefile-dir))
    ;; activate it for all buffers
    (setq-default save-place t))

  (use-package savehist
    :config
    (setq savehist-additional-variables
    ;; search entries
    '(search-ring regexp-search-ring)
    ;; save every minute
    savehist-autosave-interval 60
    ;; keep the home clean
    savehist-file (expand-file-name "savehist" dbrady-savefile-dir))
    (savehist-mode +1))

#+END_SRC

* Basic Configurations

Place for a grab bag of basic settings

#+BEGIN_SRC emacs-lisp

    (setq inhibit-startup-screen t)
    (when (fboundp 'tool-bar-mode) (tool-bar-mode -1))
    (setq ring-bell-function 'ignore)
    (line-number-mode t)
    (column-number-mode t)
    (size-indication-mode t)
    (fset 'yes-or-no-p 'y-or-n-p)
    (setq require-final-newline t)
    (setq-default fill-column 80)
    (add-hook 'text-mode-hook 'auto-fill-mode)
    (prefer-coding-system 'utf-8)
    (set-default-coding-systems 'utf-8)
    (set-terminal-coding-system 'utf-8)
    (set-keyboard-coding-system 'utf-8)
    (setq-default indent-tabs-mode nil)   
    (setq-default tab-width 4)            
    ;; smart tab behavior - indent or complete
    (setq tab-always-indent 'complete)
    (global-display-line-numbers-mode 1) ; line number in margin
    ;(global-hl-line-mode 1) ; highlight current line

    ;; scroll to the bottom of repls on output
    (add-hook 'comint-output-filter-functions 'comint-postoutput-scroll-to-bottom)

    (defvar default-gc-cons-threshold 16777216 ; 16mb
      "my default desired value of `gc-cons-threshold' during normal emacs operations.")

  ;; make garbage collector less invasive
  (setq gc-cons-threshold  most-positive-fixnum gc-cons-percentage 0.6)
#+END_SRC

* Custom Packages

Packages here don't have any major configuration and are loaded vanilla.

#+BEGIN_SRC emacs-lisp

  (defvar my-packages '(
                        eglot
                        elec-pair
                        epresent
                        flycheck            
                        git-timemachine
                        gnuplot 
                        s                   ; some nice easy string manipulation functions
                        ))
#+END_SRC

Loop over the above list, loading using =use-package=

#+BEGIN_SRC emacs-lisp
  (dolist (p my-packages)
    (unless (package-installed-p p)
      (package-refresh-contents)
      (package-install p))
    (add-to-list 'package-selected-packages p))
#+END_SRC

* Additional Path Setup
  There are some nuances with environment variables especially on windows.

#+BEGIN_SRC emacs-lisp
  (use-package exec-path-from-shell
  :config
  (when (memq window-system '(mac ns x))
    (exec-path-from-shell-initialize)))
#+END_SRC

* Recent File Saving

#+BEGIN_SRC emacs-lisp
  (use-package recentf
  :config
  (setq recentf-save-file (expand-file-name "recentf" dbrady-savefile-dir))
  (setq recentf-max-saved-items 50)
  (setq recentf-max-menu-items 15)
  (setq recentf-auto-cleanup 'never)
  (recentf-mode +1))
#+END_SRC

* Paren Matching

Configuration for a bunch of built in packages.

#+BEGIN_SRC emacs-lisp

  (use-package paren
  :config
  (show-paren-mode +1))

#+END_SRC

* Avy
  Avy has one really useful function =avy-goto-line= which supports multiple
  buffers

#+BEGIN_SRC emacs-lisp
  (use-package avy
    :bind (("M-g f" . avy-goto-line)))
#+END_SRC
  
* Dired Mode

Dired mode is built in and powerful but easy to forget the commands and
capabilities. Make things a bit easier to remember for me

#+BEGIN_SRC emacs-lisp
  ;; dired-x comes with emacs but isn't loaded by default.
  (require 'dired-x)

  (setq-default dired-omit-files-p t) ; Buffer-local variable
  (setq dired-omit-files (concat dired-omit-files "\\|^\\..+$"))
  (define-key dired-mode-map (kbd "% f") 'find-name-dired)
  (define-key dired-mode-map (kbd "% .") 'dired-omit-mode)

  ;; Changes to prevent navigating in dired mode from creating a bunch of buffers for every directory
  (put 'dired-find-alternate-file 'disabled nil)
  (add-hook 'dired-mode-hook
   (lambda ()
    (define-key dired-mode-map (kbd "^")
      (lambda () (interactive) (find-alternate-file "..")))
    (define-key dired-mode-map (kbd "e")
      (lambda () (interactive) (find-alternate-file (dired-copy-filename-as-kill))))
    (define-key dired-mode-map (kbd "f")
      (lambda () (interactive) (find-alternate-file (dired-copy-filename-as-kill))))))

#+END_SRC

* Text Scaling

  =default-text-scale= allows you to quickly resize text. By default binds to
  C-M-= and C-M-- to increase and decrease the face size 

#+BEGIN_SRC emacs-lisp
  (use-package default-text-scale
    :config
      (default-text-scale-mode))
#+END_SRC

* Ivy
  Ivy is a completion framework

#+BEGIN_SRC emacs-lisp
  (use-package ivy
  :config
  (setq ivy-use-virtual-buffers t)
  (setq enable-recursive-minibuffers t)
  (ivy-mode 1))
#+END_SRC

* Swiper
  A generic completion front end

#+BEGIN_SRC emacs-lisp
  (use-package swiper
  :bind (("C-s" . swiper)))
#+END_SRC

* Spray Speed Reader

[[https://gitlab.com/iankelling/spray][Speed reading mode]]. Just enter the mode and use keys h/left arrow, l/right arrow, f and s for faster
and slower, q quits

#+BEGIN_SRC emacs-lisp

  (require 'spray)
  (setq spray-wpm 200)

#+END_SRC

* PDF Tools

[[https://github.com/politza/pdf-tools][PDF Tools]] is a much better pdf viewer

#+BEGIN_SRC emacs-lisp
      (use-package pdf-tools
        :config
        (pdf-loader-install))
#+END_SRC

* (Yas) Snippets
  Use =yas-snippets= for handy text completion

#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
  :ensure yasnippet-snippets
  :config
  (yas-global-mode 1))
#+END_SRC
  
* Org Mode

Set up for all things =org-mode=

** TODO Org and Extensions
   :LOGBOOK:
   - Note taken on [2020-11-25 Wed 08:43] \\
     There are dependency issues with org-ql at least. Have to manually invoke a
     org-ql call before being able to use inine org-ql blocks.
   :END:
   Load org and other related packages. 

#+BEGIN_SRC emacs-lisp
  ;; (use-package org
  ;;          :ensure org-plus-contrib
  ;;          :ensure org-superstar
  ;;          :ensure org-edna
  ;;          :ensure org-super-agenda
  ;;          :ensure org-ql
  ;;        )

  (use-package org
    :ensure org-plus-contrib)
  (use-package org-superstar)
  (use-package org-edna)
  (use-package org-super-agenda)
  (use-package org-ql
    :demand)
#+END_SRC

Some basic configuration for Org Mode beginning with minor modes for spell
checking and replacing the =*='s with various types of bullets.
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook (lambda () (org-superstar-mode 1)))
  (define-key org-mode-map (kbd "C-c l") 'org-store-link)
  (define-key org-mode-map (kbd "C-x n s") 'org-toggle-narrow-to-subtree)
  (setq org-image-actual-width nil)
  (setq org-modules (append '(org-protocol) org-modules))
  (setq org-modules (append '(habit) org-modules))
  (setq org-catch-invisible-edits t)

#+END_SRC

** Org File Locations

Just one location and using git to manage sharing as needed. 

#+BEGIN_SRC emacs-lisp
  (setq org-directory "~/OrgDocuments")
  (setq org-agenda-files (directory-files-recursively org-directory "org$"))
  (setq org-default-notes-file (expand-file-name org-directory "index.org"))
#+END_SRC

** Org Roam

#+BEGIN_SRC emacs-lisp

  (use-package org-roam
        :ensure t
        :hook
        (after-init . org-roam-mode)
        :custom
        (org-roam-directory "~/OrgDocuments")
        :bind (:map org-roam-mode-map
                (("C-c n l" . org-roam)
                 ("C-c n f" . org-roam-find-file)
                 ("C-c n g" . org-roam-graph))
                :map org-mode-map
                (("C-c n i" . org-roam-insert))
                (("C-c n I" . org-roam-insert-immediate))))

#+END_SRC

** Language Support

Setup =babel= to evaluate the languages / scripts I use.

#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (ruby . t)
     (python . t)
     (sql . t)
     (shell . t)
     (gnuplot . t)))
#+END_SRC

Don't ask before evaluating code blocks.

#+BEGIN_SRC emacs-lisp
  (setq org-confirm-babel-evaluate nil)
#+END_SRC

=htmlize= is used to ensure that exported code blocks use syntax highlighting.

Translate regular ol' straight quotes to typographically-correct curly quotes
when exporting.

#+BEGIN_SRC emacs-lisp
  (setq org-export-with-smart-quotes t)
#+END_SRC

Settings related to source code blocks

#+BEGIN_SRC emacs-lisp
  (setq org-src-fontify-natively t) ;; syntax highlighting in source blocks
  (setq org-src-tab-acts-natively t) ;; Make TAB act as if language's major mode.
  (setq org-src-window-setup 'current-window) ;; Use the current window rather than popping open a new onw
#+END_SRC

** Task Handling and Agenda

Establishes the states and other settings related to task handling. 

#+BEGIN_SRC emacs-lisp
              (setq org-enforce-todo-dependencies t)
              (setq org-enforce-todo-checkbox-dependencies t)
              (setq org-deadline-warning-days 7)

              (setq org-todo-keywords '((sequence
                                         "TODO(t)"
                                         "STARTED(s)"
                                         "NEXT(n)"
                                         "WAITING(w)" "|"
                                         "DONE(d)"
                                         "SUSPENDED(u)"
                                         "SKIPPED(k)")))
              (setq org-log-done 'time)
              (setq org-log-into-drawer t)
              (setq org-log-reschedule 'note)

              ;; agenda settings
              (setq org-agenda-span 1)
              (setq org-agenda-start-on-weekday nil)

              ;; Normally bound to org-agenda-sunrise-sunset which is kinda useless
              (add-hook 'org-agenda-mode-hook (lambda ()
                                                (define-key org-agenda-mode-map (kbd "S") 'org-agenda-schedule)))
              ;; Normally bound to toggle diary inclusion which would never really do
              (add-hook 'org-agenda-mode-hook (lambda ()
                                                (define-key org-agenda-mode-map (kbd "D") 'org-agenda-deadline)))

#+END_SRC

** Diary Settings

#+BEGIN_SRC emacs-lisp
  (setq diary-file (expand-file-name "diary" org-directory))
  (setq org-agenda-include-diary t)
  (setq calendar-bahai-all-holidays-flag nil)
  (setq calendar-christian-all-holidays-flag t)
  (setq calendar-hebrew-all-holidays-flag t)
  (setq calendar-islamic-all-holidays-flag t)
#+END_SRC

** Org Edna
   [[https://savannah.nongnu.org/projects/org-edna-el/][Org Edna]] provides more powerful org dependency management.
   
#+BEGIN_SRC emacs-lisp
    (org-edna-mode)

        ;; ;; create id's when using org capture
        ;; (add-hook 'org-capture-prepare-finalize-hook 'org-id-get-create)

        ;; (defun db/org-add-ids-to-headlines-in-file ()
        ;;   "Add ID properties to all headlines in the current file which
        ;;     do not already have one."
        ;;   (interactive)
        ;;   (org-map-entries 'org-id-get-create))

        ;; (add-hook 'org-mode-hook
        ;;           (lambda ()
        ;;             (add-hook 'before-save-hook 'db/org-add-ids-to-headlines-in-file nil 'local)))

  (defun db/org-edna-blocked-by-descendants ()
    "Adds PROPERTY blocking this tasks unless descendants are DONE"
    (interactive)
    (org-set-property "BLOCKER" "descendants"))

  (defun db/org-edna-blocked-by-ancestors ()
    "Adds PROPERTY blocking this tasks unless ancestors are DONE"
    (interactive)
    (org-set-property "BLOCKER" "ancestors"))

  (defun db/org-edna-current-id ()
    "Get the current ID to make it easier to set up BLOCKER ids"
    (interactive)
    (set-register 'i (org-entry-get (point) "ID"))
    (message "ID stored"))

  (defun db/org-edna-blocked-by-id ()
    "Adds PROPERTY blocking task at point with specific task ID"
    (interactive)
    (org-set-property "BLOCKER" (s-concat "ids(" (get-register 'i) ")")))

  (define-key org-mode-map (kbd "C-c C-x <up>") 'db/org-edna-blocked-by-ancestors)
  (define-key org-mode-map (kbd "C-c C-x <down>") 'db/org-edna-blocked-by-descendants)
  (define-key org-mode-map (kbd "C-c C-x <left>") 'db/org-edna-current-id)
  (define-key org-mode-map (kbd "C-c C-x <right>") 'db/org-edna-blocked-by-id)
  (define-key org-mode-map (kbd "C-c C-x i") 'org-id-get-create)

#+END_SRC

** Filter Refile Targets

 I have monthly log files used to take notes / journal that are sources of refile
 items but not targets. They are named YYYY-MM(w).org

 #+BEGIN_SRC emacs-lisp

   (defun db-filtered-refile-targets ()
     "Removes month journals as valid refile targets"
     (remove nil (mapcar (lambda (x)
                           (if (string-match-p "2[0-9]*\-[0-9]+w?" x)
                               nil x)) org-agenda-files)))

   (setq org-refile-targets '((db-filtered-refile-targets :maxlevel . 10)))

 #+END_SRC

** Super Agenda Setup

   [[https://github.com/alphapapa/org-super-agenda][Super Agenda]] allows for grouping of items that appear on the
   agenda. It doesn't alter what will appear.
   
#+BEGIN_SRC emacs-lisp

  (org-super-agenda-mode)

  (setq org-super-agenda-groups
        '((:name "Next Items"
                 :time-grid t
                 :tag ("NEXT" "outbox"))
          (:name "Important"
                 :priority "A")
          (:name "Quick Picks"
                 :effort< "0:30")
          (:name "With Caden"
                 :tag ("caden"))
          (:priority<= "B"
                       :scheduled future
                       :order 1)))
#+END_SRC

** Org Capture Setup

Org capture templates for Chrome org-capture from [[https://github.com/sprig/org-capture-extension][site]].

Added this file: ~/.local/share/applications/org-protocol.desktop~ using the
following command:

#+BEGIN_EXAMPLE
  cat > "${HOME}/.local/share/applications/org-protocol.desktop" << EOF
  [Desktop Entry]
  Name=org-protocol
  Exec=emacsclient %u
  Type=Application
  Terminal=false
  Categories=System;
  MimeType=x-scheme-handler/org-protocol;
  EOF
#+END_EXAMPLE

and then run =update-desktop-database ~/.local/share/applications/=

#+BEGIN_SRC emacs-lisp
  (require 'org-protocol)
#+END_SRC

*** Setting up org-protocol handler. This page has best description:
[[https://github.com/sprig/org-capture-extension#set-up-handlers-in-emacs][This page]] has the best description. This is working in linux only, hence the todo. 

#+BEGIN_SRC emacs-lisp

  (defun transform-square-brackets-to-round-ones(string-to-transform)
    "Transforms [ into ( and ] into ), other chars left unchanged."
    (concat 
     (mapcar #'(lambda (c) (if (equal c ?[) ?\( (if (equal c ?]) ?\) c))) string-to-transform))
    )

  (defvar my/org-contacts-template "* %(org-contacts-template-name)
  :PROPERTIES:
  :ADDRESS: %^{289 Cleveland St. Brooklyn, 11206 NY, USA}
  :BIRTHDAY: %^{yyyy-mm-dd}
  :EMAIL: %(org-contacts-template-email)
  :NOTE: %^{NOTE}
  :END:" "Template for org-contacts.")

  ;; if you set this variable you have to redefine the default t/Todo.
  (setq org-capture-templates 
        `(
          ;; TODO     (t) Todo template
          ("t" "Todo" entry (file+headline ,(concat org-directory "/index.org") "Refile")
           "* TODO %?"
           :empty-lines 1)

          ;; Note (n) template
          ("n" "Note" entry (file+headline ,(concat org-directory "/index.org") "Refile")
           "* %? %(%i)"
           :empty-lines 1)

          ;; Protocol (p) template
          ("p" "Protocol" entry (file+headline ,(concat org-directory "/index.org") "Refile")
           "* %^{Title}
              Source: %u, %c
             ,#+BEGIN_QUOTE
             %i
             ,#+END_QUOTE
             %?"
           :empty-lines 1)

          ;; Protocol Link (L) template
          ("L" "Protocol Link" entry (file+headline ,(concat org-directory "/index.org") "Refile")
           "* %? [[%:link][%(transform-square-brackets-to-round-ones \"%:description\")]]"
           :empty-lines 1)

          ;; Goal (G) template
          ("G" "Goal" entry (file+headline ,(concat org-directory "/index.org") "Refile")
           "* GOAL %^{Describe your goal}
Added on %U - Last reviewed on %U
:SMART:
:Sense: %^{What is the sense of this goal?}
:Measurable: %^{How do you measure it?}
:Actions: %^{What actions are needed?}
:Resources: %^{Which resources do you need?}
:Timebox: %^{How much time are you spending for it?}
:END:"
           :empty-lines 1)
        ;; Contact (c) template
          ("c" "Contact" entry (file+headline ,(concat org-directory "/contacts.org") "Contacts")
           "* %(org-contacts-template-name)
:PROPERTIES:
:ADDRESS: %^{289 Cleveland St. Brooklyn, 11206 NY, USA}
:BIRTHDAY: %^{yyyy-mm-dd}
:EMAIL: %(org-contacts-template-email)
:NOTE: %^{NOTE}
:END:"
           :empty-lines 1)
          ))

#+END_SRC

#+RESULTS:
| t | Todo     | entry | (file+headline ~/OrgDocuments/index.org Refile) | * TODO %?   | :empty-lines | 1 |
| n | Note     | entry | (file+headline ~/OrgDocuments/index.org Refile) | * %? %(%i)  | :empty-lines | 1 |
| p | Protocol | entry | (file+headline ~/OrgDocuments/index.org Refile) | * %^{Title} |              |   |

** Org Reveal

#+BEGIN_SRC emacs-lisp
  (use-package ox-reveal
  :ensure ox-reveal
  :ensure htmlize)
#+END_SRC

** Exporting

Allow export to markdown (for hugo) and beamer (for presentations).

#+BEGIN_SRC emacs-lisp
  (require 'ox-md)
  (require 'ox-beamer)
#+END_SRC

* Reading Email with mu4e
  So, mu4e isn't in melpa (wtf) and has to be installed
#+BEGIN_SRC sh
  sudo apt install mu4e  
#+END_SRC

#+BEGIN_SRC emacs-lisp
 (add-to-list 'load-path "/usr/share/emacs/site-lisp/mu4e")
 (require 'mu4e)
#+END_SRC

Some html emails seem to use large number of lisp bindings causing an
error. Need to increase the number available.

#+begin_src emacs-lisp
 (setq max-specpdl-size 13000)  
#+end_src

** Contexts

#+begin_src emacs-lisp
 (setq mu4e-contexts
    `( ,(make-mu4e-context
	  :name "Private"
	  :enter-func (lambda () (mu4e-message "Entering Private context"))
          :leave-func (lambda () (mu4e-message "Leaving Private context"))
	  ;; we match based on the contact-fields of the message
	  :match-func (lambda (msg)
			(when msg
			  (mu4e-message-contact-field-matches msg
			    :to "d@donald-brady.com")))
	  :vars '( ( user-mail-address	    . "d@donald-brady.com"  )
		   ( user-full-name	    . "Donald Brady" )
		   ( mu4e-compose-signature .
		     (concat
		       "Donald Brady\n"
		       "e: d@donald-brady.com\n"))))
       ,(make-mu4e-context
	  :name "Gmail"
	  :enter-func (lambda () (mu4e-message "Switch to the Gmail context"))
	  ;; no leave-func
	  ;; we match based on the maildir of the message
	  ;; this matches maildir /Arkham and its sub-directories
	  :match-func (lambda (msg)
			(when msg
			  (mu4e-message-contact-field-matches msg
			    :to "donald.brady@gmail.com")))
	  :vars '( ( user-mail-address	     . "donald.brady@gmail.com" )
		   ( user-full-name	     . "Donald Brady" )
		   ( mu4e-compose-signature  .
		     (concat
		       "Donald Brady\n"
		       "e: donald.brady@gmail.com\n"))))))
#+end_src

#+begin_src emacs-lisp
  (setq mu4e-context-policy 'pick-first)
#+end_src
   
#+BEGIN_SRC emacs-lisp

  ;; use mu4e for e-mail in emacs
  (setq mail-user-agent 'mu4e-user-agent)

  ;; these must start with a "/", and must exist
  ;; (i.e.. /home/user/Maildir/sent must exist)
  ;; you use e.g. 'mu mkdir' to make the Maildirs if they don't
  ;; already exist

  (setq mu4e-sent-folder   "/Sent")
  (setq mu4e-drafts-folder "/Drafts")
  (setq mu4e-trash-folder  "/Trash")
  (setq mu4e-refile-folder "/Archive")
      
#+END_SRC

** Fetching

   The most comprehensive setup documentation I have found for setting up your
   own email server using iRedMail is [[https://www.linuxbabe.com/mail-server/ubuntu-18-04-iredmail-email-server][here]]. Fetching is accomplished with
   =offlineimap= running periodically or launched from mu4e.

#+begin_src emacs-lisp
  (setq mu4e-get-mail-command "offlineimap")
#+end_src

** Composing

** Reading

   Save attachments to Downloads
   
#+BEGIN_SRC emacs-lisp
   (setq mu4e-attachment-dir "~/Downloads")  
#+END_SRC

  Use C-c C-o to open links

#+BEGIN_SRC emacs-lisp
  (define-key mu4e-view-mode-map (kbd "C-c C-o") 'mu4e~view-browse-url-from-binding)  
#+END_SRC

  While HTML emails are just fundamentally awful, we usually still need to read
  them. This ensures that their formatting in Emacs isn’t too hideous:

#+BEGIN_SRC emacs-lisp

  (require 'mu4e-contrib)
  (setq mu4e-html2text-command 'mu4e-shr2text
        shr-color-visible-luminance-min 60
        shr-color-visible-distance-min 5
        shr-use-fonts nil
        shr-use-colors nil)
  (advice-add #'shr-colorize-region
              :around (defun shr-no-colourise-region (&rest ignore)))

#+END_SRC

  But some HTML emails are just too messy to display in Emacs. This binds a h to
  open the current email in my default Web browser.

#+BEGIN_SRC emacs-lisp

  (add-to-list 'mu4e-view-actions
               '("html in browser" . mu4e-action-view-in-browser)
               t)
#+END_SRC

View images inline

#+begin_src emacs-lisp
  (setq mu4e-view-show-images t)
  (when (fboundp 'imagemagick-register-types)
    (imagemagick-register-types))
#+end_src

** Archiving

** Encryption

** Sending

   You will need to install =msmtp= and configure that as needed.
   
#+BEGIN_SRC emacs-lisp
  (setq message-send-mail-function 'message-send-mail-with-sendmail)
  (setq message-sendmail-extra-arguments '("--read-envelope-from"))
  (setq message-sendmail-f-is-evil 't)
  (setq sendmail-program "msmtp") 
#+END_SRC

** Org Agena Integration

   =org-mu4e= lets me store links to emails. I use this to reference emails in
   my TODO list while keeping my inbox empty. When storing a link to a message
   in the headers view, link to the message instead of the search that resulted
   in that view.

#+BEGIN_SRC emacs-lisp

  (require 'org-mu4e)
  (setq org-mu4e-link-query-in-headers-mode nil)

#+END_SRC

** Org Contacts

   Use an org-contacts file to manage my address book.

#+BEGIN_SRC emacs-lisp
 (use-package org-contacts
   :ensure nil
   :after org
   :custom (org-contacts-files '("~/OrgDocuments/contacts.org")))

 (setq mu4e-org-contacts-file (car org-contacts-files))
 (add-to-list 'mu4e-headers-actions
              '("org-contact-add" . mu4e-action-add-org-contact) t)
 (add-to-list 'mu4e-view-actions
              '("org-contact-add" . mu4e-action-add-org-contact) t)

#+END_SRC

** Key Bindings

#+BEGIN_SRC emacs-lisp

  (global-set-key (kbd "C-c m") 'mu4e)

#+END_SRC

* Projectile
Use =projectile= for projects navigation

#+BEGIN_SRC emacs-lisp
    (use-package projectile
    :config
    (setq projectile-switch-project-action #'projectile-dired)
    (projectile-mode +1)
    :bind ("C-c p p" . projectile-switch-project))
#+END_SRC

* Magit

#+BEGIN_SRC emacs-lisp
  (use-package magit
  :config
  (setq magit-push-always-verify nil)
  :bind 
  (("C-x g" . magit-status)))
#+END_SRC

* Hippie Expand Setup

This is a more powerful completion system.

#+BEGIN_SRC emacs-lisp

;; hippie expand is dabbrev expand on steroids
(setq hippie-expand-try-functions-list '(try-expand-dabbrev
                                         try-expand-dabbrev-all-buffers
                                         try-expand-dabbrev-from-kill
                                         try-complete-file-name-partially
                                         try-complete-file-name
                                         try-expand-all-abbrevs
                                         try-expand-list
                                         try-expand-line
                                         try-complete-lisp-symbol-partially
                                         try-complete-lisp-symbol))

;; use hippie-expand instead of dabbrev
(global-set-key (kbd "M-/") #'hippie-expand)
(global-set-key (kbd "s-/") #'hippie-expand)

#+END_SRC

* Blogging with Hugo

  [[https://gohugo.io/][Hugo]] is a static website generator great for blogging
  
#+BEGIN_SRC emacs-lisp

  (use-package easy-hugo
    :config
    (setq easy-hugo-basedir "~/bradydonald.github.io_dev/")
    (setq easy-hugo-url "https://www.donald-brady.com")
    (setq easy-hugo-sshdomain "donald-brady")
    (setq easy-hugo-postdir "content/posts")
    (setq easy-hugo-previewtime "300")
    :bind
    (("C-c h" . easy-hugo)))

#+END_SRC

* RSS with elfeed

Install =elfeed= and load up my feeds stored in =~OrgDocuments/rss-feeds.org=. Key
bindings are:

| Key   | Binding                                |
| C-c r | Read news                              |
| o     | In article or heading, open in browser |

#+BEGIN_SRC emacs-lisp
  (use-package elfeed
    :ensure elfeed-org
    :config
    (setq elfeed-set-max-connections 32)
    (setq rmh-elfeed-org-files (list (expand-file-name "rss-feeds.org" org-directory)))
    (elfeed-org)
    :bind
    (("C-c r" . elfeed)
     :map elfeed-show-mode-map
     ("o" . elfeed-show-visit)
     :map elfeed-search-mode-map
    ("o" . elfeed-search-browse-url)))
#+END_SRC

* Printing
  To enable easier printing on linux install gtklp

#+BEGIN_EXAMPLE
  sudo apt install gtklp
#+END_EXAMPLE

and then will allow a grpahical choice of printer and more. 

#+begin_src emacs-lisp
  (setq lpr-command "gtklp")
  (setq ps-lpr-command "gtklp")
#+end_src

* Globally Set Keys

This section has all globally set keys unless they are related to a package or mode config. 

#+BEGIN_SRC emacs-lisp

  ;; use hippie-expand instead of dabbrev
  (global-set-key (kbd "M-/") #'hippie-expand)
  (global-set-key (kbd "s-/") #'hippie-expand)

  ;; keyboard macros
  (global-set-key (kbd "<f1>") #'start-kbd-macro)
  (global-set-key (kbd "<f2>") #'end-kbd-macro)
  (global-set-key (kbd "<f3>") #'call-last-kbd-macro)

  ;; org keys
  (define-key global-map "\C-ca" 'org-agenda)
  (define-key global-map "\C-cc" 'org-capture)

  ;; replace buffer-menu with ibuffer
  (global-set-key (kbd "C-x C-b") #'ibuffer)

  ;; Lenovo Function Key Bindings
  (global-set-key (kbd "<XF86Favorites>") 'bury-buffer) ;; The Star on F12

  ;; M-0 to toggle hiding
  (global-set-key (kbd "M-0") 'hs-toggle-hiding)

#+END_SRC

* Python Setup

#+BEGIN_SRC emacs-lisp
  (use-package python
    :hook
    (python-mode . flycheck-mode)
    (python-mode . db/activate-pyvenv)
    (python-mode . hs-minor-mode))

#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package elpy
    :ensure t
    :init
    (elpy-enable))
#+END_SRC

Use pyvenv to support multiple python environments

#+BEGIN_SRC emacs-lisp
  (use-package pyvenv
    :after python
    :config
    (defun db/activate-pyvenv ()
      "Activate python environment according to the `.venv' file."
      (interactive)
      (pyvenv-mode)
      (let* ((pdir (projectile-project-root)) (pfile (concat pdir ".venv")))
        (if (file-exists-p pfile)
            (pyvenv-workon (with-temp-buffer
                             (insert-file-contents pfile)
                             (nth 0 (split-string (buffer-string)))))))))
#+END_SRC

* Load any Custom Code
  If there is a file =custom.el= in .emacs directory load it

#+BEGIN_SRC emacs-lisp
  ;; config changes made through the customize UI will be stored here
  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
  (when (file-exists-p custom-file)
    (load custom-file))
#+END_SRC

* Theme
  Kinda like this theme
#+begin_src emacs-lisp
  (load-theme 'anti-zenburn)
#+end_src
  
* Start a server
  Finally start a server
  
#+BEGIN_SRC emacs-lisp
  (server-start)
#+END_SRC



