
* Package management

  Where we get packages from:
  
  #+BEGIN_SRC emacs-lisp
    (require 'package)
    (setq package-enable-at-startup nil)

    (setq package-archives
	  '(("gnu"          . "https://elpa.gnu.org/packages/")
	    ("melpa"        . "https://melpa.org/packages/")
	    ("melpa-stable" . "https://stable.melpa.org/packages/")
	    ("org"          . "https://orgmode.org/elpa/")
	    ("nongnu"       . "https://elpa.nongnu.org/nongnu/")))
  #+END_SRC

  Now that Emacs knows where get from let's initialize:

  #+BEGIN_SRC emacs-lisp

    (package-initialize)

    (unless (package-installed-p 'use-package)
      (package-refresh-contents)
      (package-install 'use-package))

    (eval-when-compile
      (require 'use-package))

    (setq use-package-always-ensure t)
    (setq use-package-compute-statistics t)

    (use-package auto-package-update
      :config
      (setq auto-package-update-interval 14 ;; days
        auto-package-update-prompt-before-update t
        auto-package-update-delete-old-versions t
        auto-package-update-hide-results t)
      (auto-package-update-maybe))
  #+END_SRC

  Let's also add a way to ensure certain system packages are installed
  alongside Emacs packages.  This is useful when, for example, you
  need the =rg= executable, or an npm package.
  
  #+BEGIN_SRC emacs-lisp
    (use-package use-package-ensure-system-package)
  #+END_SRC

* Basic Settings

  Place for a grab bag of basic settings

  #+BEGIN_SRC emacs-lisp

    (setq inhibit-startup-screen t)
    (setq-default custom-file "~/.emacs.d/custom-file.el")
    (when (fboundp 'tool-bar-mode) (tool-bar-mode -1))
    (setq ring-bell-function 'ignore)
    (line-number-mode t)
    (column-number-mode t)
    (size-indication-mode t)
    (fset 'yes-or-no-p 'y-or-n-p)
    (setq require-final-newline t)
    (setq-default fill-column 80)
    (add-hook 'text-mode-hook 'auto-fill-mode)
    (prefer-coding-system 'utf-8)
    (set-default-coding-systems 'utf-8)
    (set-terminal-coding-system 'utf-8)
    (set-keyboard-coding-system 'utf-8)
    (setq-default indent-tabs-mode nil)   
    (setq-default tab-width 4)            
    ;; smart tab behavior - indent or complete
    (setq tab-always-indent 'complete)
    (global-display-line-numbers-mode 1) ; line number in margin
    (global-hl-line-mode 0) ; highlight current line
    (global-auto-revert-mode 1)
    (setq global-auto-revert-non-file-buffers t)
    (setq-default buffer-file-coding-system 'utf-8-unix)    
    ;; scroll to the bottom of repls on output
    (add-hook 'comint-output-filter-functions 'comint-postoutput-scroll-to-bottom)
    (put 'upcase-region 'disabled nil)

    ;; Speed up startup
    (defvar default-file-name-handler-alist file-name-handler-alist)
    (setq file-name-handler-alist nil)
    (setq gc-cons-threshold 80000000)
    (add-hook 'emacs-startup-hook
              (lambda ()
                "Restore defalut values after init."
                (setq file-name-handler-alist default-file-name-handler-alist)
                (setq gc-cons-threshold 800000)
                (if (boundp 'after-focus-change-function)
                    (add-function :after after-focus-change-function
                                  (lambda ()
                                    (unless (frame-focus-state)
                                      (garbage-collect))))
                  (add-hook 'focus-out-hook 'garbage-collect))))

    ;; ediff in same window
    (setq ediff-window-setup-function 'ediff-setup-windows-plain)

    ;; my email
    (setq user-full-name "Donald Brady" user-mail-address "donald.brady@gmail.com")

  #+END_SRC

* Visual Appearance

    #+BEGIN_SRC emacs-lisp

      ;; Let the desktop background show through
      (setq db/my-alpha 97)
;;      (set-frame-parameter (selected-frame) 'alpha '(97 . 100))
;;      (add-to-list 'default-frame-alist '(alpha . (90 . 90)))

      (defun db/toggle-transparency ()
        "Toggles transparency of current frame"
        (interactive)
        (setq current-alpha (car (frame-parameter (selected-frame) 'alpha)))
        (if (= current-alpha 100)
            (set-frame-parameter (selected-frame) 'alpha '(97 . 100))
          (set-frame-parameter (selected-frame) 'alpha '(100 . 100))))

      (scroll-bar-mode 0)
      (menu-bar-mode 0)

  #+END_SRC

* Pulsar

  #+BEGIN_SRC emacs-lisp
    (require 'pulsar)

    (setq pulsar-pulse t)
    (setq pulsar-delay 0.055)
    (setq pulsar-iterations 10)
    (setq pulsar-face 'pulsar-magenta)
    (setq pulsar-highlight-face 'pulsar-yellow)

    (pulsar-global-mode 1)

    (add-hook 'minibuffer-setup-hook #'pulsar-pulse-line)
    
  #+END_SRC

* Set up savefile, recent files, backup, and autosave features

  #+BEGIN_SRC emacs-lisp

    (defconst dbrady-savefile-dir (expand-file-name "savefile" user-emacs-directory))

    ;; create the savefile dir if it doesn't exist
    (unless (file-exists-p dbrady-savefile-dir) (make-directory dbrady-savefile-dir))

    ;; store all backup and autosave files in the tmp dir
    (setq backup-directory-alist `((".*" . ,temporary-file-directory)))
    (setq auto-save-file-name-transforms `((".*" ,temporary-file-directory t)))

    ;; saveplace remembers your location in a file when saving files
    (use-package saveplace
      :config
      (setq save-place-file (expand-file-name "saveplace" dbrady-savefile-dir))
      ;; activate it for all buffers
      (setq-default save-place t))

    (use-package savehist
      :config
      (setq savehist-additional-variables
            ;; search entries
            '(search-ring regexp-search-ring)
            ;; save every minute
            savehist-autosave-interval 60
            ;; keep the home clean
            savehist-file (expand-file-name "savehist" dbrady-savefile-dir))
      (savehist-mode +1))

  #+END_SRC

  #+BEGIN_SRC emacs-lisp
    (use-package frecentf
      :config
      (setq recentf-save-file (expand-file-name "recentf" dbrady-savefile-dir))
      (setq recentf-max-saved-items 50)
      (setq recentf-max-menu-items 15)
      (setq recentf-auto-cleanup 'never)
      (recentf-mode +1))
  #+END_SRC

* Vanilla Packages

  The packages are loaded as is

  #+BEGIN_SRC emacs-lisp
    (use-package diminish)        ;; diminsh minor mode-line entries
    (use-package git-timemachine) ;; use n and p to move between git revisions
    (use-package gnuplot)         ;; for the plotting of graphs
    (use-package s)               ;; some nice easy string manipulation functions
    (use-package magit)           ;; git chrome
    (use-package deadgrep)        ;; requires ripgrep binary
    (use-package ef-themes)       ;; Prot themes
    (use-package yaml-mode)
    (use-package nyan-mode)       ;; nyan cat as % of buffer
    (use-package ivy)
  #+END_SRC

* Load any lisp files

  Load any .el files in =.emacs.d/lisp= directory. This is not recursive so any
  code in sub-directories will not be loaded. This is intentional to allow for
  later selective loading if there are dependencies. 
  
  #+BEGIN_SRC emacs-lisp
    (defun load-directory (dir)
      (let ((load-it (lambda (f)
               (load-file (concat (file-name-as-directory dir) f)))
             ))
    (mapc load-it (directory-files dir nil "\\.el$"))))
    (load-directory "~/.emacs.d/lisp")
  #+END_SRC


  #+BEGIN_SRC emacs-lisp

    (defun db/add-to-load-path (path feature_toggle &optional dependency_list)
      "Adds a path to the load-path if it exists and the feature_toggle
      is on. An optional list of packages that are dependencies can be
      provided and they will be required if the load-path is updated."
      (when (and feature_toggle (file-directory-p path))
        (add-to-list 'load-path path)
        (when dependency_list
          (dolist (package dependency_list)
            (require package)))))    

  #+END_SRC

* Window Handling

  This is from system crafters.

  #+BEGIN_SRC emacs-lisp
    ;; Make sure repeat-mode is turned on first!
    (repeat-mode 1)

    (defvar-keymap db/window-key-map
      :doc "Bindings for managing windows, configured to be repeatable."
      :repeat t
      "c" 'delete-window
      "|" 'split-window-horizontally
      "-" 'split-window-vertically
      "h" 'windmove-left
      "j" 'windmove-down
      "k" 'windmove-up
      "l" 'windmove-right
      "C-h" 'shrink-window-horizontally
      "C-j" 'shrink-window
      "C-k" 'enlarge-window
      "C-l" 'enlarge-window-horizontally
      "H" 'windmove-swap-states-left
      "J" 'windmove-swap-states-down
      "K" 'windmove-swap-states-up
      "L" 'windmove-swap-states-right)

    (global-set-key (kbd "C-c w") db/window-key-map)

  #+END_SRC

* Paren Handling and  Matching

  Configuration for a bunch of built in packages.

  #+BEGIN_SRC emacs-lisp

    (use-package paren
      :config
      (show-paren-mode +1))

    (use-package elec-pair
      :config
      (electric-pair-mode 1))

  #+END_SRC

* Windows Specific Setup
  
** WSL to use Windows Native Browser

   #+BEGIN_SRC emacs-lisp
     (when (and (eq system-type 'gnu/linux)
                (string-match
                 "Linux.*Microsoft.*Linux"
                 (shell-command-to-string "uname -a")))
       (setq
        browse-url-generic-program  "/mnt/c/Windows/System32/cmd.exe"
        browse-url-generic-args     '("/c" "start")
        browse-url-browser-function #'browse-url-generic))
   #+END_SRC
   
* Avy
  Avy has one really useful function =avy-goto-line= which supports multiple
  buffers

  #+BEGIN_SRC emacs-lisp
    (use-package avy
      :bind (("M-g l" . avy-goto-line)
             ("M-g c" . avy-goto-char-timer)))
  #+END_SRC
  
* Dired Mode

  Dired mode is built in and powerful but easy to forget the commands and
  capabilities. Make things a bit easier to remember for me

  #+BEGIN_SRC emacs-lisp
    ;; dired-x comes with emacs but isn't loaded by default.
    (require 'dired-x)

    (setq-default dired-omit-files-p t) ; Buffer-local variable
    (setq dired-omit-files (concat dired-omit-files "\\|^\\..+$"))
    (setq dired-dwim-target t) ;; guess destination
    (setq dired-recursive-copies 'always)
    (setq dired-recursive-deletes 'always)

    ;; add these simple keys to dired mode
    (define-key dired-mode-map (kbd "% f") 'find-name-dired)
    (define-key dired-mode-map (kbd "% .") 'dired-omit-mode)
    (define-key dired-mode-map (kbd "% w") 'db/wsl-open-in-external-app)

  #+END_SRC

* Text Scaling

  =default-text-scale= allows you to quickly resize text. By default binds to
  C-M-= and C-M-- to increase and decrease the face size 

  #+BEGIN_SRC emacs-lisp
    (use-package default-text-scale
      :config
      (default-text-scale-mode))
  #+END_SRC

* Jinx Spell Checker

  #+BEGIN_SRC emacs-lisp
    (use-package jinx
      :hook (emacs-startup . global-jinx-mode)
      :bind (("M-$" . jinx-correct)
             ("C-M-$" . jinx-languages)))    
  #+END_SRC

* Ivy

  #+BEGIN_SRC emacs-lisp
    (use-package ivy
      :config
      (setq ivy-use-virtual-buffers t)
      (setq ivy-use-selectable-prompt t)
      (setq enable-recursive-minibuffers t)
      (ivy-mode 1))
  #+END_SRC

* Swiper
  Use swiper for better searching
  #+BEGIN_SRC emacs-lisp
    (use-package swiper
      :bind
      (("\C-s" . swiper)))
  #+END_SRC

* Orderless
  When searching order does not matter making it easier to find things. 

  #+BEGIN_SRC emacs-lisp
    (use-package orderless
      :config
      (setq completion-styles '(orderless)))
  #+END_SRC

* Marginalia
  Provides richer annotaions in minibuffer

  #+BEGIN_SRC emacs-lisp

    (use-package marginalia
      ;; Either bind `marginalia-cycle` globally or only in the minibuffer
    :bind (("M-A" . marginalia-cycle)
           :map minibuffer-local-map
           ("M-A" . marginalia-cycle))
    :init
    ;; Must be in the :init section of use-package such that the mode gets
    ;; enabled right away. Note that this forces loading the package.
    (marginalia-mode))

  #+END_SRC

* Other from emacs-bedrock in Testing

  #+BEGIN_SRC emacs-lisp
    ;; Consult: Misc. enhanced commands
    (use-package consult
      :ensure t
      ;; Other good things to bind: consult-ripgrep, consult-line-multi,
      ;; consult-history, consult-outline
      :bind (("C-x b" . consult-buffer) ; orig. switch-to-buffer
             ("M-y" . consult-yank-pop) ; orig. yank-pop
             ("C-s" . consult-line))    ; orig. isearch
      :config
      ;; Narrowing lets you restrict results to certain groups of candidates
      (setq consult-narrow-key "<"))

    (use-package embark
      :ensure t
      :demand t
      :after avy
      :bind (("C-c a" . embark-act))        ; bind this to an easy key to hit
      :init
      ;; Add the option to run embark when using avy
      (defun bedrock/avy-action-embark (pt)
        (unwind-protect
            (save-excursion
              (goto-char pt)
              (embark-act))
          (select-window
           (cdr (ring-ref avy-ring 0))))
        t)

      ;; After invoking avy-goto-char-timer, hit "." to run embark at the next
      ;; candidate you select
      (setf (alist-get ?. avy-dispatch-alist) 'bedrock/avy-action-embark))

    (use-package embark-consult
      :ensure t)

    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;;;
    ;;;   Minibuffer and completion
    ;;;
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

    ;; Vertico: better vertical completion for minibuffer commands
    (use-package vertico
      :ensure t
      :init
      ;; You'll want to make sure that e.g. fido-mode isn't enabled
      (vertico-mode))

    (use-package vertico-directory
      :after vertico
      :bind (:map vertico-map
                  ("M-DEL" . vertico-directory-delete-word)))

    ;; Popup completion-at-point
    (use-package corfu
      :ensure t
      :init
      (global-corfu-mode)
      :bind
      (:map corfu-map
            ("SPC" . corfu-insert-separator)
            ("C-n" . corfu-next)
            ("C-p" . corfu-previous)))

    ;; Part of corfu
    (use-package corfu-popupinfo
      :after corfu
      :hook (corfu-mode . corfu-popupinfo-mode)
      :custom
      (corfu-popupinfo-delay '(0.25 . 0.1))
      (corfu-popupinfo-hide nil)
      :config
      (corfu-popupinfo-mode))

    ;; Make corfu popup come up in terminal overlay
    (use-package corfu-terminal
      :if (not (display-graphic-p))
      :ensure t
      :config
      (corfu-terminal-mode))

    ;; Pretty icons for corfu
    (use-package kind-icon
      :if (display-graphic-p)
      :ensure t
      :after corfu
      :config
      (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter))

    (use-package eshell
      :bind (("C-r" . consult-history)))

  #+END_SRC

* Markdown Mode

  #+BEGIN_SRC emacs-lisp
    (use-package markdown-mode
      :mode ("README\\.md\\'" . gfm-mode)
      :init (setq markdown-command "multimarkdown"))
  #+END_SRC
  
* PDF Tools
  PDF viewer and annotator

  #+BEGIN_SRC emacs-lisp

     (use-package pdf-tools
         :ensure t
         :config
         (pdf-tools-install)
         (setq-default pdf-view-display-size 'fit-page)
         (bind-keys :map pdf-view-mode-map
             ("?" . hydra-pdftools/body)
             ("<s-spc>" .  pdf-view-scroll-down-or-next-page)
             ("g"  . pdf-view-first-page)
             ("G"  . pdf-view-last-page)
             ("l"  . image-forward-hscroll)
             ("h"  . image-backward-hscroll)
             ("j"  . pdf-view-next-page)
             ("k"  . pdf-view-previous-page)
             ("e"  . pdf-view-goto-page)
             ("u"  . pdf-view-revert-buffer)
             ("al" . pdf-annot-list-annotations)
             ("ad" . pdf-annot-delete)
             ("aa" . pdf-annot-attachment-dired)
             ("am" . pdf-annot-add-markup-annotation)
             ("at" . pdf-annot-add-text-annotation)
             ("y"  . pdf-view-kill-ring-save)
             ("i"  . pdf-misc-display-metadata)
             ("s"  . pdf-occur)
             ("b"  . pdf-view-set-slice-from-bounding-box)
             ("r"  . pdf-view-reset-slice)))
    
  #+END_SRC

* Yas Snippets
  Use yas snippets templating package

  #+BEGIN_SRC emacs-lisp
    (use-package yasnippet
      :config
      (yas-global-mode 1))
    (use-package yasnippet-snippets)
  #+END_SRC

* Projectile

  [[https://projectile.mx/][Projectile]] is useful for navigating dev projects
  
  #+BEGIN_SRC emacs-lisp
    (use-package projectile)
    (require 'projectile)
    (projectile-mode +1)
  #+END_SRC

* Org Mode

** Org Mode Packages

   #+BEGIN_SRC emacs-lisp
     (use-package org)
     (use-package org-contrib)
     (use-package org-superstar)
     (use-package org-edna)
     (use-package org-ql)
     (use-package counsel)
     (use-package org-super-agenda)
     (require 'org-habit)
  #+END_SRC

** Org Appearance

  #+BEGIN_SRC emacs-lisp


  #+END_SRC
  
** Basic Org Config  

   #+BEGIN_SRC emacs-lisp
     (add-hook 'org-mode-hook (lambda () (org-superstar-mode 1)))

     (setq org-image-actual-width nil)
     (setq org-modules (append '(org-protocol) org-modules))
     (setq org-modules (append '(habit) org-modules))
     (setq org-catch-invisible-edits 'smart)
     (setq org-ctrl-k-protect-subtree t)
     (set-face-attribute 'org-headline-done nil :strike-through t)
     (setq org-return-follows-link t)
     (setq org-adapt-indentation t)
     (setq org-odt-preferred-output-format "docx")
     (setq org-agenda-skip-scheduled-if-done t)
     (setq org-agenda-skip-scheduled-if-deadline-is-shown t)
     ;; all my org related keys will be set up in this keymap
     (global-set-key
      (kbd "C-c o")
      (define-keymap
        :prefix 'db/org-key-map
        "l" 'org-store-link
        "c" 'org-capture
        "a" 'org-agenda))

     ;; override y (agenda year) with more useful todo yesterday for marking habits done prior day 
     (define-key org-agenda-mode-map (kbd "y") 'org-agenda-todo-yesterday)

   #+END_SRC

** Org File Locations

   #+BEGIN_SRC emacs-lisp
     (setq org-directory "~/OrgDocuments/personal")
     (setq org-id-locations-file (expand-file-name ".org-id-locations" org-directory))
     (setq org-attach-dir-relative t)

     ;; various helper functions for finding files
     (defun db/current-index-file ()
       "Returns the current index file which is dependent on current context" 
       (expand-file-name "index.org" org-directory))

     (setq org-default-notes-file (db/current-index-file))


     (defun db/current-monthly-journal ()
       "Returns the current months journal"
       (setq current-year (format-time-string "%Y"))
       (setq current-month (format-time-string "%m"))
       (concat org-directory "/journals/" current-year "/" current-year "-" current-month ".org"))

     (defun db/get-all-directories (directory)
       "Return a list of DIRECTORY and all its subdirectories, excluding directories with a '.orgexclude' file."
       (let ((directories '()))
         (dolist (file (directory-files directory t))
           (when (and (file-directory-p file)
                      (not (string-prefix-p "." (file-name-nondirectory file)))
                      (not (file-exists-p (expand-file-name ".orgexclude" file))))
             (setq directories (append directories (list file)))))
         (append (list directory) (mapcan 'db/get-all-directories directories))))

     (defun db/get-org-files-in-directories (directories)
       "Return a list of all .org and .org.gpg files within the given DIRECTORIES."
       (let ((org-files '()))
         (dolist (dir directories)
           (dolist (file (directory-files dir t))
             (let ((name (file-name-nondirectory file)))
               (when (or (string-suffix-p ".org" name)
                         (string-suffix-p ".org.gpg" name))
                 (push file org-files)))))
         org-files))

     (defun db/org-agenda-files ()
       (db/get-org-files-in-directories (db/get-all-directories org-directory)))

     (setq org-agenda-files (db/org-agenda-files))

  #+END_SRC

** Org Roam

   Likewise org-roam defaults to personal.

   #+BEGIN_SRC emacs-lisp
     (setq org-roam-v2-ack t)
     (use-package org-roam)
     (setq org-roam-directory (expand-file-name "roam" org-directory))
     (setq org-roam-db-location (expand-file-name "org-roam.db" org-roam-directory))
     (setq org-roam-db-autosync-mode t)

     ;; required for org-roam bookmarklet 
     (require 'org-roam-protocol)

     ;; Org-roam Capture Templates

     ;; Starter pack. If there is only one, it uses automatically without asking.

     (setq org-roam-capture-templates
           '(("d" "default" plain "%?"
              :if-new (file+head"%(format-time-string \"%Y-%m-%d--%H-%M-%SZ--${slug}.org\" (current-time) t)"
                                "#+title: ${title}\n#+filetags: %^G:\n\n* ${title}\n\n")
              :unnarrowed t)
             ("y" "yank" plain "%?"
              :if-new (file+head"%(format-time-string \"%Y-%m-%d--%H-%M-%SZ--${slug}.org\" (current-time) t)"
                                "#+title: ${title}\n#+filetags: %^G\n\n%c\n\n")
              :unnarrowed t)
             ("r" "region" plain "%?"
              :if-new (file+head"%(format-time-string \"%Y-%m-%d--%H-%M-%SZ--${slug}.org\" (current-time) t)"
                                "#+title: ${title}\n#+filetags: %^G\n\n%i\n\n")
              :unnarrowed t)

             ("o" "org-roam-it" plain "%?"
              :if-new (file+head"%(format-time-string \"%Y-%m-%d--%H-%M-%SZ--${slug}.org\" (current-time) t)"
                                "#+title: ${title}\n#+filetags:\n{ref}\n")
              :unnarrowed t)))

     (add-hook 'org-capture-after-finalize-hook
               (lambda ()
                 (if (org-roam-file-p)
                     (org-roam-db-sync))))

     ;; this is required to get matching on tags
     (setq org-roam-node-display-template
           (concat "${title:*} "
                   (propertize "${tags:10}" 'face 'org-tag)))


   #+END_SRC

   Install org-roam-ui for a vizual of my roam database.

   #+BEGIN_SRC emacs-lisp
     (package-install 'org-roam-ui)
   #+END_SRC

** Language Support

   #+BEGIN_SRC emacs-lisp
     (org-babel-do-load-languages
      'org-babel-load-languages
      '((emacs-lisp . t)
        (ruby . t)
        (python . t)
        (sql . t)
        (shell . t)
        (clojure . t)
        (gnuplot . t)))

     (setq org-confirm-babel-evaluate nil)
     (setq org-export-with-smart-quotes t)
     (setq org-src-fontify-natively t)
     (setq org-src-tab-acts-natively t)
     (setq org-src-window-setup 'current-window)

   #+END_SRC

** Task Handling and Agenda

   Establishes the states and other settings related to task handling.

   #+BEGIN_SRC emacs-lisp

     (setq org-enforce-todo-dependencies t)
     (setq org-enforce-todo-checkbox-dependencies t)
     (setq org-deadline-warning-days 7)

     (setq org-todo-keywords '((sequence
                                "TODO(t)"
                                "STARTED(s)"
                                "WAITING(w)"
                                "HOLD(h)" "|"
                                "DONE(d)"
                                "SUSPENDED(u)")))


     (setq org-todo-keyword-faces
           '(("TODO" . (:foreground "blue" :weight bold))
             ("STARTED" . (:foreground "green"))
             ("DONE" . (:foreground "pink"))
             ("WAITING" . (:foreground "orange"))
             ("HOLD" . (:foreground "orange"))
             ("SUSPENDED" . (:foreground "forest green"))
             ("TASK" . (:foreground "blue"))))

     (setq org-tags-exclude-from-inheritance '("project" "interview" "call" "errand" "meeting")
           org-stuck-projects '("+project/-MAYBE-DONE"
                                ("TODO" "WAITING") ()))

     (setq org-log-done 'time)
     (setq org-log-into-drawer t)
     (setq org-log-reschedule 'note)

     ;; agenda settings
     (setq org-agenda-span 1)
     (setq org-agenda-start-on-weekday nil)

    (add-hook 'org-agenda-mode-hook (lambda ()
                                      (define-key org-agenda-mode-map (kbd "S") 'org-agenda-schedule)))
    (add-hook 'org-agenda-mode-hook (lambda ()
                                      (define-key org-agenda-mode-map (kbd "D") 'org-agenda-deadline)))
     
   #+END_SRC

   Use org-super-agenda

   #+BEGIN_SRC emacs-lisp
     (require 'org-super-agenda)
     (setq org-super-agenda-groups
            '(;; Each group has an implicit boolean OR operator between its selectors.
              (:name "Today"  ; Optionally specify section name
                     :time-grid t  ; Items that appear on the time grid
                     :todo "TODAY")  ; Items that have this TODO keyword
              (:name "Projects"
                     :tag "project")
              (:name "Important"
                     :priority "A")
              ;; Set order of multiple groups at once
              ;; (:order-multi (2 (:name "Shopping in town"
              ;;                         ;; Boolean AND group matches items that match all subgroups
              ;;                         :and (:tag "shopping" :tag "@town"))
              ;;                  (:name "Food-related"
              ;;                         ;; Multiple args given in list with implicit OR
              ;;                         :tag ("food" "dinner"))
              ;;                  (:name "Personal"
              ;;                         :habit t
              ;;                         :tag "personal")
              ;;                  (:name "Space-related (non-moon-or-planet-related)"
              ;;                         ;; Regexps match case-insensitively on the entire entry
              ;;                         :and (:regexp ("space" "NASA")
              ;;                                       ;; Boolean NOT also has implicit OR between selectors
              ;;                                       :not (:regexp "moon" :tag "planet")))))
              ;; Groups supply their own section names when none are given
              (:todo "WAITING" :order 8)  ; Set order of this section
              (:name "Errands" :tag "errand")
              (:name "Calls" :tag "call")
              (:todo ("EVENT" "INFO" "TO-READ" "CHECK" "TO-WATCH" "WATCHING")
                     ;; Show this group at the end of the agenda (since it has the
                     ;; highest number). If you specified this group last, items
                     ;; with these todo keywords that e.g. have priority A would be
                     ;; displayed in that group instead, because items are grouped
                     ;; out in the order the groups are listed.
                     :order 9)
              (:priority<= "B"
                           ;; Show this section after "Today" and "Important", because
                           ;; their order is unspecified, defaulting to 0. Sections
                           ;; are displayed lowest-number-first.
                           :order 1)
              ;; After the last group, the agenda will display items that didn't
              ;; match any of these groups, with the default order position of 99
              ))
     (org-super-agenda-mode t)

   #+END_SRC         

** Diary Settings

    I don't use the diary file but it's useful for holidays.

    #+BEGIN_SRC emacs-lisp
      (setq calendar-bahai-all-holidays-flag nil)
      (setq calendar-christian-all-holidays-flag t)
      (setq calendar-hebrew-all-holidays-flag t)
      (setq calendar-islamic-all-holidays-flag t)
   #+END_SRC

** Calfw

   [[https://github.com/kiwanami/emacs-calfw][Calfw]] generates useful calendar views suitable for printing or providing a
   more visual outlook on the day, week, two weeks, or month

   #+BEGIN_SRC emacs-lisp
     (use-package calfw)
     (use-package calfw-org)
     (require 'calfw)
     (require 'calfw-org)

     (defun db/my-open-calendar ()
       (interactive)
       (cfw:open-calendar-buffer
        :contents-sources
        (list
         (cfw:org-create-source "Green")  ; orgmode source
         ;;    (cfw:howm-create-source "Blue")  ; howm source
         ;;    (cfw:cal-create-source "Orange") ; diary source
         ;;    (cfw:ical-create-source "Moon" "~/moon.ics" "Gray")  ; ICS source1
         ;;    (cfw:ical-create-source "gcal" "https://..../basic.ics" "IndianRed") ; google calendar ICS
         )))
    #+END_SRC

** Org Edna

   Provides more powerful org dependency management.

   #+BEGIN_SRC emacs-lisp
     (org-edna-mode)

     (defun db/org-edna-blocked-by-descendants ()
       "Adds PROPERTY blocking this tasks unless descendants are DONE"
       (interactive)
       (org-set-property "BLOCKER" "descendants"))

     (defun db/org-edna-blocked-by-ancestors ()
       "Adds PROPERTY blocking this tasks unless ancestors are DONE"
       (interactive)
       (org-set-property "BLOCKER" "ancestors"))

     (defun db/org-edna-current-id ()
       "Get the current ID to make it easier to set up BLOCKER ids"
       (interactive)
       (set-register 'i (org-entry-get (point) "ID"))
       (message "ID stored"))

     (defun db/org-edna-blocked-by-id ()
       "Adds PROPERTY blocking task at point with specific task ID"
       (interactive)
       (org-set-property "BLOCKER" (s-concat "ids(" (get-register 'i) ")")))

     (define-keymap
       :keymap db/org-key-map
       "<up>"    'db/org-edna-blocked-by-ancestors
       "<down>"  'db/org-edna-blocked-by-descendants
       "<left>"  'db/org-edna-current-id
       "<right>" 'db/org-edna-blocked-by-id
       "i d"     'org-id-get-create)

   #+END_SRC

** Orgql

   #+BEGIN_SRC emacs-lisp
     (use-package org-ql)
   #+END_SRC
   
** Filter Refile Targets

   I have monthly log files used to take notes / journal that are sources of refile
   items but not targets. They are named YYYY-MM(w).org

   #+BEGIN_SRC emacs-lisp
     (defun db-filtered-refile-targets ()
       "Removes month journals as valid refile targets"
       (remove nil (mapcar (lambda (x)
                             (if (string-match-p "journals" x)
                                 nil x)) org-agenda-files)))

     (setq org-refile-targets '((db-filtered-refile-targets :maxlevel . 10)))

   #+END_SRC

** Org Capture Setup

   Org capture templates for Chrome org-capture from [[https://github.com/sprig/org-capture-extension][site]].

   Added this file: ~/.local/share/applications/org-protocol.desktop~ using the
   following command:

   #+BEGIN_EXAMPLE
     cat > "${HOME}/.local/share/applications/org-protocol.desktop" << EOF
     [Desktop Entry]
     Name=org-protocol
     Exec=emacsclient %u
     Type=Application
     Terminal=false
     Categories=System;
     MimeType=x-scheme-handler/org-protocol;
     EOF
   #+END_EXAMPLE

   and then run

   #+BEGIN_EXAMPLE
     update-desktop-database ~/.local/share/applications
   #+END_EXAMPLE

   #+BEGIN_SRC emacs-lisp
     (require 'org-protocol)
   #+END_SRC

*** Setting up org-protocol handler. This page has best description:

    [[https://github.com/sprig/org-capture-extension#set-up-handlers-in-emacs][This page]] has the best description. This is working in linux only, hence the todo. 

    #+BEGIN_SRC emacs-lisp
      (defun transform-square-brackets-to-round-ones(string-to-transform)
        "Transforms [ into ( and ] into ), other chars left unchanged."
        (concat 
         (mapcar #'(lambda (c) (if (equal c ?[) ?\( (if (equal c ?]) ?\) c))) string-to-transform))
        )

      (defvar db/org-contacts-template "* %(org-contacts-template-name)
              :PROPERTIES:
              :ADDRESS: %^{289 Cleveland St. Brooklyn, 11206 NY, USA}
              :MOBILE: %^{MOBILE}
              :BIRTHDAY: %^{yyyy-mm-dd}
              :EMAIL: %(org-contacts-template-email)
              :NOTE: %^{NOTE}
              :END:" "Template for org-contacts.")

      ;; if you set this variable you have to redefine the default t/Todo.
      (setq org-capture-templates 
            `(

              ;; ("t" "Tasks")

              ;; TODO     (t) Todo template
              ("t" "Todo" entry (file+headline ,org-default-notes-file "Refile")
               "* TODO %?"
               :empty-lines 1)

              ;; ;; Note (n) template
              ("n" "Note" entry (file+headline ,org-default-notes-file "Refile")
               "* %? %(%i)"
               :empty-lines 1)

              ;; Protocol (p) template
              ("p" "Protocol" entry (file+headline ,org-default-notes-file "Refile")
               "* %^{Title}
                          Source: %u, %c
                         ,#+BEGIN_QUOTE
                         %i
                         ,#+END_QUOTE
                         %?"
               :empty-lines 1)

              ;; Protocol Link (L) template
              ("L" "Protocol Link" entry (file+headline ,org-default-notes-file "Refile")
               "* %? [[%:link][%(transform-square-brackets-to-round-ones \"%:description\")]]"
               :empty-lines 1)

              ;; Goal (G) template
              ("G" "Goal" entry (file+headline ,org-default-notes-file "Refile")
               "* GOAL %^{Describe your goal}
            Added on %U - Last reviewed on %U
                 :SMART:
                 :Sense: %^{What is the sense of this goal?}
            :Measurable: %^{How do you measure it?}
               :Actions: %^{What actions are needed?}
             :Resources: %^{Which resources do you need?}
               :Timebox: %^{How much time are you spending for it?}
                   :END:"
               :empty-lines 1)
              ;; Contact (c) template
              ("c" "Contact" entry (file+headline ,(concat org-directory "/contacts.org") "Contacts")
               "* %(org-contacts-template-name)
            :PROPERTIES:
             :ADDRESS: %^{289 Cleveland St. Brooklyn, 11206 NY, USA}
            :BIRTHDAY: %^{yyyy-mm-dd}
               :EMAIL: %(org-contacts-template-email)
                 :TEL: %^{NUMBER}
                :NOTE: %^{NOTE}
            :END:"
               :empty-lines 1)
              ))

   #+END_SRC        

** Org Screenshots

   #+BEGIN_SRC emacs-lisp
     (use-package org-attach-screenshot
       :config (setq org-attach-screenshot-dirfunction
             (lambda () 
               (when (cl-assert (buffer-file-name))
                  (concat (file-name-sans-extension (buffer-file-name))
                      "-att")))
             org-attach-screenshot-command-line "gnome-screenshot -a -f %f"))
   #+END_SRC

** Org Download

   Drag and drop support for images

   #+BEGIN_SRC emacs-lisp
     (use-package org-download)
     (require 'org-download)
     (setq org-download-method 'attach)
     ;; Drag-and-drop to `dired`
     (add-hook 'dired-mode-hook 'org-download-enable)
   #+END_SRC

** Org Key Mappings

   #+BEGIN_SRC emacs-lisp
     (define-keymap
       :keymap db/org-key-map
       ;; dalies hang of C-c o d
       "d ."    'org-roam-dailies-goto-today
       "d d"    'org-roam-dailies-capture-today
       "d y"    'org-roam-dailies-goto-yesterday
       "d t"    'org-roam-dailies-goto-tomorrow
       ;; roam hang of C-c o r
       "r b"    'org-roam-buffer-toggle
       "r f"    'org-roam-node-find
       "r c"    'org-roam-capture              
       "r g"    'org-roam-graph
       "r i"    'org-roam-node-insert
       ;; counsel mish mash
       "r r"    'counsel-rg
       "j"      'counsel-org-goto-all
       "n o"    'counsel-org-agenda-headlines
       "n l"    'db/counsel-org-agenda-insert-link-to-headlines
       "r l"    'counsel-org-link
       "s"      'org-attach-screenshot)

   #+END_SRC

* Elfeed

  Read news with elfeed

  #+BEGIN_SRC emacs-lisp
    (use-package elfeed)
    (use-package elfeed-org
      :init
      (setq elfeed-set-max-connections 32)
      (setq rmh-elfeed-org-files (list (expand-file-name "rss-feeds.org" org-directory)))
      (elfeed-org)
      :bind
      (("C-c r" . elfeed)
       :map elfeed-show-mode-map
       ("o" . elfeed-show-visit)
       :map elfeed-search-mode-map
       ("o" . elfeed-search-browse-url)))

   #+END_SRC

* Elfeed-Tube

  Use elfeed for youtube channels

  #+BEGIN_SRC emacs-lisp
    (use-package elfeed-tube
      :after elfeed
      :demand t
      :config
      ;; (setq elfeed-tube-auto-save-p nil) ; default value
      ;; (setq elfeed-tube-auto-fetch-p t)  ; default value
      (elfeed-tube-setup)

      :bind (:map elfeed-show-mode-map
                  ("F" . elfeed-tube-fetch)
                  ([remap save-buffer] . elfeed-tube-save)
                  :map elfeed-search-mode-map
                  ("F" . elfeed-tube-fetch)
                  ([remap save-buffer] . elfeed-tube-save)))


    (use-package elfeed-tube-mpv
      :bind (:map elfeed-show-mode-map
                  ("C-c C-f" . elfeed-tube-mpv-follow-mode)
                  ("C-c C-w" . elfeed-tube-mpv-where)))
  #+END_SRC

* Elfeed with xwidgets

  #+BEGIN_SRC emacs-lisp
    (use-package elfeed-webkit
       :init
       (setq elfeed-webkit-auto-tags '(webkit comics))
       :config
       (elfeed-webkit-auto-enable-by-tag)
       :bind (:map elfeed-show-mode-map
                   ("t" . elfeed-webkit-toggle)))
  #+END_SRC

* Org Present

  #+BEGIN_SRC emacs-lisp

    (unless (package-installed-p 'org-present)
      (package-install 'org-present))

    (defun db/org-present-prepare-slide (buffer-name heading)
      ;; Show only top-level headlines
      (org-overview)

      ;; Unfold the current entry
      (org-show-entry)

      ;; Show only direct subheadings of the slide but don't expand them
      (org-show-children))

    (defun db/org-present-start ()
      ;; Tweak font sizes
      (setq-local face-remapping-alist '((default (:height 1.5) variable-pitch)
                     (header-line (:height 4.0) variable-pitch)
                     (org-document-title (:height 1.75) org-document-title)
                     (org-code (:height 1.55) org-code)
                     (org-verbatim (:height 1.55) org-verbatim)
                     (org-block (:height 1.25) org-block)
                     (org-block-begin-line (:height 0.7) org-block)))

      ;; Set a blank header line string to create blank space at the top
      (setq header-line-format " ")

      ;; Display inline images automatically
      (org-display-inline-images)

      ;; Center the presentation and wrap lines
      (visual-fill-column-mode 1)
      (visual-line-mode 1))

    (defun db/org-present-end ()
      ;; Reset font customizations
      (setq-local face-remapping-alist '((default variable-pitch default)))

      ;; Clear the header line string so that it isn't displayed
      (setq header-line-format nil)

      ;; Stop displaying inline images
      (org-remove-inline-images)

      ;; Stop centering the document
      (visual-fill-column-mode 0)
      (visual-line-mode 0))

    ;; Turn on variable pitch fonts in Org Mode buffers
    ;; (add-hook 'org-mode-hook 'variable-pitch-mode)

    ;; Register hooks with org-present
    (add-hook 'org-present-mode-hook 'db/org-present-start)
    (add-hook 'org-present-mode-quit-hook 'db/org-present-end)
    (add-hook 'org-present-after-navigate-functions 'db/org-present-prepare-slide)

  #+END_SRC

* Org Transculsion

  #+BEGIN_SRC emacs-lisp

    (use-package org-transclusion
      :after org
      :init
      )

  #+END_SRC

* Org Habit Stats

  Comprehensive [[https://github.com/ml729/org-habit-stats][stats on your habits]].
   
  #+BEGIN_SRC emacs-lisp

    ;; if it is installed
    (if (db/add-to-load-path "~/.emacs.d/lisp/org-habit-stats" t)
        (load "org-habit-stats"))

  #+END_SRC

* Blogging / Org2Blog

  Blogging set up for https://www.donald-brady.com

  #+BEGIN_SRC emacs-lisp
    (use-package org2blog
      :config
      (setq org2blog/wp-blog-alist
            '(
              ("wordpress"
               :url "https://donaldbrady.wordpress.com/xmlrpc.php"
               :username "donald.brady@gmail.com")))
      (setq org2blog/wp-image-upload t)
      (setq org2blog/wp-image-thumbnails t)
      (setq org2blog/wp-show-post-in-browser 'ask)
      :bind
      ("\C-c h" . org2blog-user-interface))

  #+END_SRC

* Mastodon

  From here: https://codeberg.org/martianh/mastodon.el
  
  #+BEGIN_SRC emacs-lisp

    (use-package mastodon
      :config
      (setq mastodon-tl--show-avatars t)
      (setq mastodon-media--avatar-height 40)
      (mastodon-discover))

    (setq mastodon-instance-url "https://mastodon.social"
          mastodon-active-user "donald_brady")



  #+END_SRC

* Which Key

  Prompts with possibe keys after a short delay

  #+BEGIN_SRC emacs-lisp
    (use-package which-key
      :config
      (which-key-mode t))
  #+END_SRC
  
* Developer Enhancements

** Git Gutter

   #+BEGIN_SRC emacs-lisp
     (use-package git-gutter
       :config
       (setq git-gutter:modified-sign "|")
       (setq git-gutter:added-sign "|")
       (setq git-gutter:deleted-sign "|")
       (global-git-gutter-mode t))
   #+END_SRC

* Developer Modes

  #+BEGIN_SRC emacs-lisp
    (require 'yaml-mode)
    (add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-mode))
   #+END_SRC

* ChatGPT Integration as a Shell

  Using https://github.com/xenodium/chatgpt-shell

  #+BEGIN_SRC emacs-lisp

    (use-package chatgpt-shell
      :init
      (setq chatgpt-shell-openai-key
          (auth-source-pick-first-password :host "api.openai.com")))
   
    (define-key global-map (kbd "C-c g r") 'chatgpt-shell-send-region)

  #+END_SRC

  #+RESULTS:
  : chatgpt-shell-send-region

* Company

  #+BEGIN_SRC emacs-lisp
    (use-package company
      :config
      (add-hook 'after-init-hook 'global-company-mode))

    (use-package company-emoji
      :init
      (add-to-list 'company-backends 'company-emoji))

  #+END_SRC

* Hydra

  Starting to use Hydra for better navigation options and rusty memory when
  accessing seldom used modes.

  #+BEGIN_SRC emacs-lisp
    (use-package hydra :commands defhydra)
    (use-package use-package-hydra)
  #+END_SRC

** My File Hydra

   This is taken from [[https://sachachua.com/dotemacs/index.html][sachachua]] but seems over complex.
   
   #+BEGIN_SRC emacs-lisp
          (defvar my-refile-map (make-sparse-keymap))

          (defmacro my-defshortcut (key file)
            `(progn
               (set-register ,key (cons 'file ,file))
               (bookmark-store ,file (list (cons 'filename ,file)
                                           (cons 'position 1)
                                           (cons 'front-context-string "")) nil)
               (define-key my-refile-map
                           (char-to-string ,key)
                           (lambda (prefix)
                             (interactive "p")
                             (let ((org-refile-targets '(((,file) :maxlevel . 6)))
                                   (current-prefix-arg (or current-prefix-arg '(4))))
                               (call-interactively 'org-refile))))))

          (defmacro defshortcuts (name body &optional docstring &rest heads)
            (declare (indent defun) (doc-string 3))
            (cond ((stringp docstring))
                  (t
                   (setq heads (cons docstring heads))
                   (setq docstring "")))
            (list
             'progn
             (append `(defhydra ,name (:exit t))
                     (mapcar (lambda (h)
                               (list (elt h 0) (list 'find-file (elt h 1)) (elt h 2)))
                             heads))
             (cons 'progn
                   (mapcar (lambda (h) (list 'my-defshortcut (string-to-char (elt h 0)) (elt h 1)))
                           heads))))

          (defmacro defshortcuts+ (name body &optional docstring &rest heads)
            (declare (indent defun) (doc-string 3))
            (cond ((stringp docstring))
                  (t
                   (setq heads (cons docstring heads))
                   (setq docstring "")))
            (list
             'progn
             (append `(defhydra+ ,name (:exit t))
                     (mapcar (lambda (h)
                               (list (elt h 0) (list 'find-file (elt h 1)) (elt h 2)))
                             heads))
             (cons 'progn
                   (mapcar (lambda (h) (list 'my-defshortcut (string-to-char (elt h 0)) (elt h 1)))
                           heads))))


          (use-package hydra
            :config
            (defshortcuts my-file-shortcuts ()
              ("i" (db/current-index-file) "Index File")
              ("j" (db/current-monthly-journal) "Monthly Journal File")
              ("b" "~/OrgDocuments/personal/Books/first-90-days/the-first-90-days.org" "Current Book")
              ("s" "~/OrgDocuments/personal/shopping.org" "Shopping List")
              ("p" "~/OrgDocuments/personal/peloton.org" "Peloton Log"))
            :bind
            ("C-c f" . #'my-file-shortcuts/body))

   #+END_SRC

** Mastodon Hydra

   #+BEGIN_SRC emacs-lisp

     (defhydra mastodon-help (:color blue :hint nil)
       "
     Timelines^^   Toots^^^^           Own Toots^^   Profiles^^      Users/Follows^^  Misc^^
     ^^-----------------^^^^--------------------^^----------^^-------------------^^------^^-----
     _H_ome        _n_ext _p_rev       _r_eply       _A_uthors       follo_W_         _X_ lists
     _L_ocal       _T_hread of toot^^  wri_t_e       user _P_rofile  _N_otifications  f_I_lter
     _F_ederated   (un) _b_oost^^      _e_dit        ^^              _R_equests       _C_opy URL
     fa_V_orites   (un) _f_avorite^^   _d_elete      _O_wn           su_G_estions     _S_earch
     _#_ tagged    (un) p_i_n^^        ^^            _U_pdate own    _M_ute user      _h_elp
     _@_ mentions  (un) boo_k_mark^^   show _E_dits  ^^              _B_lock user
     boo_K_marks   _v_ote^^
     trendin_g_
     _u_pdate
     "
       ("H" mastodon-tl--get-home-timeline)
       ("L" mastodon-tl--get-local-timeline)
       ("F" mastodon-tl--get-federated-timeline)
       ("V" mastodon-profile--view-favourites)
       ("#" mastodon-tl--get-tag-timeline)
       ("@" mastodon-notifications--get-mentions)
       ("K" mastodon-profile--view-bookmarks)
       ("g" mastodon-search--trending-tags)
       ("u" mastodon-tl--update :exit nil)

       ("n" mastodon-tl--goto-next-toot)
       ("p" mastodon-tl--goto-prev-toot)
       ("T" mastodon-tl--thread)
       ("b" mastodon-toot--toggle-boost :exit nil)
       ("f" mastodon-toot--toggle-favourite :exit nil)
       ("i" mastodon-toot--pin-toot-toggle :exit nil)
       ("k" mastodon-toot--bookmark-toot-toggle :exit nil)
       ("c" mastodon-tl--toggle-spoiler-text-in-toot)
       ("v" mastodon-tl--poll-vote)

       ("A" mastodon-profile--get-toot-author)
       ("P" mastodon-profile--show-user)
       ("O" mastodon-profile--my-profile)
       ("U" mastodon-profile--update-user-profile-note)

       ("W" mastodon-tl--follow-user)
       ("N" mastodon-notifications-get)
       ("R" mastodon-profile--view-follow-requests)
       ("G" mastodon-tl--get-follow-suggestions)
       ("M" mastodon-tl--mute-user)
       ("B" mastodon-tl--block-user)

       ("r" mastodon-toot--reply)
       ("t" mastodon-toot)
       ("e" mastodon-toot--edit-toot-at-point)
       ("d" mastodon-toot--delete-toot)
       ("E" mastodon-toot--view-toot-edits)

       ("I" mastodon-tl--view-filters)
       ("X" mastodon-tl--view-lists)
       ("C" mastodon-toot--copy-toot-url)
       ("S" mastodon-search--search-query)
       ("h" describe-mode)
       )

     (define-key mastodon-mode-map "?" 'mastodon-help/body)

   #+END_SRC

** Org Mode Hydra

   #+BEGIN_SRC emacs-lisp

   #+END_SRC
   
** Dired Mode Hydra

   #+BEGIN_SRC emacs-lisp
          (defhydra hydra-dired (:hint nil :color pink)
       "
     _+_ mkdir          _v_iew           _m_ark             _(_ details        _i_nsert-subdir    wdired
     _C_opy             _O_ view other   _U_nmark all       _)_ omit-mode      _$_ hide-subdir    C-x C-q : edit
     _D_elete           _o_pen other     _u_nmark           _l_ redisplay      _w_ kill-subdir    C-c C-c : commit
     _R_ename           _M_ chmod        _t_oggle           _g_ revert buf     _e_ ediff          C-c ESC : abort
     _Y_ rel symlink    _G_ chgrp        _E_xtension mark   _s_ort             _=_ pdiff
     _S_ymlink          ^ ^              _F_ind marked      _._ toggle hydra   \\ flyspell
     _r_sync            ^ ^              ^ ^                ^ ^                _?_ summary
     _z_ compress-file  _A_ find regexp
     _Z_ compress       _Q_ repl regexp

     T - tag prefix
     "
       ("\\" dired-do-ispell)
       ("(" dired-hide-details-mode)
       (")" dired-omit-mode)
       ("+" dired-create-directory)
       ("=" diredp-ediff)         ;; smart diff
       ("?" dired-summary)
       ("$" diredp-hide-subdir-nomove)
       ("A" dired-do-find-regexp)
       ("C" dired-do-copy)        ;; Copy all marked files
       ("D" dired-do-delete)
       ("E" dired-mark-extension)
       ("e" dired-ediff-files)
       ("F" dired-do-find-marked-files)
       ("G" dired-do-chgrp)
       ("g" revert-buffer)        ;; read all directories again (refresh)
       ("i" dired-maybe-insert-subdir)
       ("l" dired-do-redisplay)   ;; relist the marked or singel directory
       ("M" dired-do-chmod)
       ("m" dired-mark)
       ("O" dired-display-file)
       ("o" dired-find-file-other-window)
       ("Q" dired-do-find-regexp-and-replace)
       ("R" dired-do-rename)
       ("r" dired-do-rsynch)
       ("S" dired-do-symlink)
       ("s" dired-sort-toggle-or-edit)
       ("t" dired-toggle-marks)
       ("U" dired-unmark-all-marks)
       ("u" dired-unmark)
       ("v" dired-view-file)      ;; q to exit, s to search, = gets line #
       ("w" dired-kill-subdir)
       ("Y" dired-do-relsymlink)
       ("z" diredp-compress-this-file)
       ("Z" dired-do-compress)
       ("q" nil)
       ("." nil :color blue))

       (define-key dired-mode-map "?" 'hydra-dired/body)

   #+END_SRC

   #+RESULTS:
   : hydra-dired/body

** PDF Tools Hydra

   #+BEGIN_SRC emacs-lisp

     (defhydra hydra-pdftools (:color blue :hint nil)
             "
                                                                           ╭───────────┐
            Move  History   Scale/Fit     Annotations  Search/Link    Do   │ PDF Tools │
        ╭──────────────────────────────────────────────────────────────────┴───────────╯
              ^^_g_^^      _B_    ^↧^    _+_    ^ ^     [_al_] list    [_s_] search    [_u_] revert buffer
              ^^^↑^^^      ^↑^    _H_    ^↑^  ↦ _W_ ↤   [_am_] markup  [_o_] outline   [_i_] info
              ^^_p_^^      ^ ^    ^↥^    _0_    ^ ^     [_at_] text    [_F_] link      [_d_] dark mode
              ^^^↑^^^      ^↓^  ╭─^─^─┐  ^↓^  ╭─^ ^─┐   [_ad_] delete  [_f_] search link
         _h_ ←pag_e_→ _l_  _N_  │ _P_ │  _-_    _b_     [_aa_] dired
              ^^^↓^^^      ^ ^  ╰─^─^─╯  ^ ^  ╰─^ ^─╯   [_y_]  yank
              ^^_n_^^      ^ ^  _r_eset slice box
              ^^^↓^^^
              ^^_G_^^
        --------------------------------------------------------------------------------
             "
             ("\\" hydra-master/body "back")
             ("<ESC>" nil "quit")
             ("al" pdf-annot-list-annotations)
             ("ad" pdf-annot-delete)
             ("aa" pdf-annot-attachment-dired)
             ("am" pdf-annot-add-markup-annotation)
             ("at" pdf-annot-add-text-annotation)
             ("y"  pdf-view-kill-ring-save)
             ("+" pdf-view-enlarge :color red)
             ("-" pdf-view-shrink :color red)
             ("0" pdf-view-scale-reset)
             ("H" pdf-view-fit-height-to-window)
             ("W" pdf-view-fit-width-to-window)
             ("P" pdf-view-fit-page-to-window)
             ("n" pdf-view-next-page-command :color red)
             ("p" pdf-view-previous-page-command :color red)
             ("d" pdf-view-dark-minor-mode)
             ("b" pdf-view-set-slice-from-bounding-box)
             ("r" pdf-view-reset-slice)
             ("g" pdf-view-first-page)
             ("G" pdf-view-last-page)
             ("e" pdf-view-goto-page)
             ("o" pdf-outline)
             ("s" pdf-occur)
             ("i" pdf-misc-display-metadata)
             ("u" pdf-view-revert-buffer)
             ("F" pdf-links-action-perfom)
             ("f" pdf-links-isearch-link)
             ("B" pdf-history-backward :color red)
             ("N" pdf-history-forward :color red)
             ("l" image-forward-hscroll :color red)
             ("h" image-backward-hscroll :color red))

   #+END_SRC
* Globally set keys

  #+BEGIN_SRC emacs-lisp
    ;; keyboard macros
    (global-set-key (kbd "<f1>") 'start-kbd-macro)
    (global-set-key (kbd "<f2>") 'end-kbd-macro)
    (global-set-key (kbd "<f3>") 'call-last-kbd-macro)

    ;; replace buffer-menu with ibuffer
    (global-set-key (kbd "C-x C-b") 'ibuffer)
    (global-set-key (kbd "<f12>") 'bury-buffer) ;; F12 on logi keybpard
    (global-set-key (kbd "C-c M-l") 'global-display-line-numbers-mode)

  #+END_SRC

* Theme and Faces and Fun

  #+BEGIN_SRC emacs-lisp

    (setq custom-safe-themes t)
    (load-theme 'ef-deuteranopia-dark)
    (nyan-mode)

  #+END_SRC

* Start a server

  #+BEGIN_SRC emacs-lisp
    (load "server")
    (unless (server-running-p) (server-start))
  #+END_SRC

  #+BEGIN_SRC emacs-lisp
    (file-notify-rm-all-watches)
  #+END_SRC
