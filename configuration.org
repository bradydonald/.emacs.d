#+TITLE: Emacs Configuration
#+AUTHOR: Donald Brady
#+EMAIL: donald.brady@gmail.com
#+OPTIONS: toc:nil num:nil

* Configure =use-package=

This setup borrows heavily from the fantastic Org Mode talk here: [[https://www.youtube.com/watch?v=SzA2YODtgK4][Great Org Mode Talk]]
by Harry Schwartz.

Use =use-package= to install and configure packages. My =init.el= includes
the initial setup for =package.el= and ensures that =use-package= is installed.

This makes sure that =use-package= will install the package if it's not already
available. 

#+begin_src emacs-lisp
  (require 'use-package-ensure)
  (setq use-package-always-ensure t)
#+end_src

Always compile packages, and use the newest version available.

#+begin_src emacs-lisp
  (use-package auto-compile
    :config (auto-compile-on-load-mode))

  (setq load-prefer-newer t)
#+end_src

* Personal Details Setup

Sets up some personal information sucha as email

#+begin_src emacs-lisp

  (setq user-full-name "Donald Brady" user-mail-address "donaldbrady@gmail.com")

#+end_src

* Set up savefile, backup, and autosave directories

#+begin_src emacs-lisp

  (defconst dbrady-savefile-dir (expand-file-name "savefile" user-emacs-directory))

  ;; create the savefile dir if it doesn't exist
  (unless (file-exists-p dbrady-savefile-dir) (make-directory dbrady-savefile-dir))

  ;; store all backup and autosave files in the tmp dir
  (setq backup-directory-alist `((".*" . ,temporary-file-directory)))
  (setq auto-save-file-name-transforms `((".*" ,temporary-file-directory t)))

  ;; saveplace remembers your location in a file when saving files
  (use-package saveplace
    :config
    (setq save-place-file (expand-file-name "saveplace" dbrady-savefile-dir))
    ;; activate it for all buffers
    (setq-default save-place t))

  (use-package savehist
    :config
    (setq savehist-additional-variables
    ;; search entries
    '(search-ring regexp-search-ring)
    ;; save every minute
    savehist-autosave-interval 60
    ;; keep the home clean
    savehist-file (expand-file-name "savehist" dbrady-savefile-dir))
    (savehist-mode +1))

#+end_src

* Basic Configurations

Place for a grab bag of basic settings

#+begin_src emacs-lisp

  (setq inhibit-startup-screen t)
  (when (fboundp 'tool-bar-mode) (tool-bar-mode -1))
  (setq ring-bell-function 'ignore)
  (line-number-mode t)
  (column-number-mode t)
  (size-indication-mode t)
  (fset 'yes-or-no-p 'y-or-n-p)
  (setq require-final-newline t)
  (setq-default fill-column 80)
  (add-hook 'text-mode-hook 'auto-fill-mode)
  (prefer-coding-system 'utf-8)
  (set-default-coding-systems 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (setq-default indent-tabs-mode nil)   
  (setq-default tab-width 4)            
  ;; smart tab behavior - indent or complete
  (setq tab-always-indent 'complete)
  (global-display-line-numbers-mode 1) ; line number in margin
  (global-hl-line-mode 1) ; highlight current line
  ;; Attempts to optimize Windows - way too slow
  (setq inhibit-compacting-font-caches t)
  (setq undo-limit 40000)
  ;; (when (boundp 'w32-pipe-read-delay)
  ;;   (setq w32-pipe-read-delay 0))
  ;; 
  
  ;; scroll to the bottom of repls on output
  (add-hook 'comint-output-filter-functions 'comint-postoutput-scroll-to-bottom)
#+end_src

* Custom Packages

Use this method as an easier way to identify and load packages but it does separate the
confiuration from the use-package

#+BEGIN_SRC emacs-lisp

  (defvar my-packages '(
                        default-text-scale
                        easy-hugo
                        elec-pair
                        elfeed
                        elfeed-org
                        elpy
                        emacsql-sqlite3
                        git-timemachine
                        gnuplot
                        htmlize
                        ivy
                        magit
                        org-roam
                        org-superstar
                        paren
                        pdf-tools
                        recentf
                        swiper
                        undo-tree
                        ))
#+END_SRC

* Install packages

#+BEGIN_SRC emacs-lisp
  (dolist (p my-packages)
    (unless (package-installed-p p)
      (package-refresh-contents)
      (package-install p))
    (add-to-list 'package-selected-packages p))
#+END_SRC

* Configure Built-in Packages

Configuration for a bunch of built in packages.

#+begin_src emacs-lisp

  ;; paren matching
  (show-paren-mode +1)
  (electric-pair-mode +1)

  ;; recent files
  (setq recentf-save-file (expand-file-name "recentf" dbrady-savefile-dir))
  (setq recentf-max-saved-items 100)
  (setq recentf-max-menu-items 15)
  (setq recentf-auto-cleanup 'never)
  (recentf-mode +1)

  ;; ivy
  (ivy-mode 1)
  (setq ivy-use-virtual-buffers t)
  (setq enable-recursive-minibuffers t)
  (global-set-key (kbd "C-c C-r") 'ivy-resume)
  (global-set-key (kbd "<f6>") 'ivy-resume)

  ;; swiper
  (global-set-key "\C-s" 'swiper)

  ;; default text scale
  ;; binds C-M-= and C-M-- to increase and decrease the face size
  (default-text-scale-mode)

  ;; config changes made through the customize UI will be stored here
  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))

  (when (file-exists-p custom-file)
    (load custom-file))

#+end_src

* Spray Speed Reader

[[https://gitlab.com/iankelling/spray][Speed reading mode]]. Just enter the mode and use keys h/left arrow, l/right arrow, f and s for faster
and slower, q quits

#+begin_src emacs-lisp

  (require 'spray)
  (setq spray-wpm 200)

#+end_src

* PDF Tools

[[https://github.com/politza/pdf-tools][PDF Tools]] is a much better pdf viewer

#+BEGIN_SRC emacs-lisp
  (pdf-loader-install)
#+END_SRC

* Flyspell / hunspell Configuration

** Install hunspell in msys2.                                         :win32:

Install [[https://www.msys2.org/][msys2]]. Install the developer packages and git:

~pacman -S --needed base-devel msys2-devel~

This involves downloading and building hunspell from the its [[https://github.com/hunspell/hunspell][repo]]. This does not come with
dictionaries which can be downloaded from [[https://github.com/LibreOffice/dictionaries][here]] and placed into:

~/usr/share/hunspell~ 

#+begin_src emacs-lisp

  ; this is windows specific now that I am using linux as well
  (if (string-equal system-type "windows-nt")
      (progn
        (setq ispell-program-name (executable-find "hunspell"))
        (setq ispell-hunspell-dict-paths-alist '(("en_US" "C:/msys64/usr/share/hunspell/en_US.aff")))
        (setq ispell-local-dictionary "en_US")
        (setq ispell-local-dictionary-alist '(("en_US" "[[:alpha:]]" "[^[:alpha:]]" "[']" nil ("-d" "en_US") nil utf-8)))))

#+end_src

The performance of emacs on windows in a heavy corp spyware environment is much worse. Do not want
to default spell check a bunch of org files that would be loaded

#+begin_src emacs-lisp

  ;; default is just use flyspell package
  ;; performance on windows
  ;;(use-package flyspell
  ;;:config
  ;; (add-hook 'gfm-mode-hook 'flyspell-mode)

  ;; (add-hook 'text-mode-hook 'flyspell-mode)
  ;; (add-hook 'git-commit-mode-hook 'flyspell-mode))

#+end_src

* magit

#+begin_src emacs-lisp
  (global-set-key (kbd "C-x g") 'magit-status)
  (setq magit-push-always-verify nil)
#+end_src

=git-timemachine=, which lets you quickly page through the history of a file and =undo-tree= are both
loaded as well.

* Hippie Expand Setup

This is a more powerful completion system.

#+begin_src emacs-lisp

;; hippie expand is dabbrev expand on steroids
(setq hippie-expand-try-functions-list '(try-expand-dabbrev
                                         try-expand-dabbrev-all-buffers
                                         try-expand-dabbrev-from-kill
                                         try-complete-file-name-partially
                                         try-complete-file-name
                                         try-expand-all-abbrevs
                                         try-expand-list
                                         try-expand-line
                                         try-complete-lisp-symbol-partially
                                         try-complete-lisp-symbol))

;; use hippie-expand instead of dabbrev
(global-set-key (kbd "M-/") #'hippie-expand)
(global-set-key (kbd "s-/") #'hippie-expand)

#+end_src

* Exporting

Allow =babel= to evaluate Emacs lisp, Ruby, Python, or Gnuplot code.

#+begin_src emacs-lisp

  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (ruby . t)
     (python . t)
     (sql . t)
     (shell . t)
     (gnuplot . t)))
#+end_src

Don't ask before evaluating code blocks.

#+begin_src emacs-lisp
  (setq org-confirm-babel-evaluate nil)
#+end_src

=htmlize= is used to ensure that exported code blocks use syntax highlighting.

Translate regular ol' straight quotes to typographically-correct curly quotes
when exporting.

#+begin_src emacs-lisp
  (setq org-export-with-smart-quotes t)
#+end_src

** Exporting

Allow export to markdown (for hugo) and beamer (for presentations).

#+begin_src emacs-lisp
  (require 'ox-md)
  (require 'ox-beamer)
#+end_src

* Blogging with =Hugo=

#+begin_src emacs-lisp

  (setq easy-hugo-basedir "~/bradydonald.github.io_dev/")
  (setq easy-hugo-url "https://bradydonald.github.io/")
  (setq easy-hugo-sshdomain "bradydonald")
  (setq easy-hugo-postdir "content/posts")
  (setq easy-hugo-root "/home/blog/")
  (setq easy-hugo-previewtime "300")
  (global-set-key (kbd "C-c C-e") 'easy-hugo)

#+end_src

* Org Mode

Ran into an org-mode error where agenda does not work. Running
=(byte-recompile-directory package-user-dir nil 'force)= fixes is as recommended
in this [[https://stackoverflow.com/questions/54580647/org-agenda-wrong-number-of-arguments-error/58731899#58731899?newreg=759b3def501940dcbe190fdd2498b1f4][article]].

Some basic configuration for Org Mode beginning with minor modes
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook 'auto-fill-mode 'org-roam-mode 'flyspell-mode)
  (add-hook 'org-mode-hook (lambda () (org-superstar-mode 1)))
#+END_SRC

** Personal and Work

I use Org Mode at work and for personal purposes. I use =db-home-org-dir= and =db-work-org-dir= to
locate the relevant directories.

#+begin_src emacs-lisp
  (setq db-home-org-dir "~/OrgDocuments")
  (setq db-work-org-dir "~/Deloitte (O365D)/Team Donald - General/OrgDocuments")
  ;; the existence of the above directory tells me this is my work laptop
  (setq db-org-at-work (file-directory-p db-work-org-dir))
#+end_src


** Source Blocks

#+begin_src emacs-lisp
  (setq org-src-fontify-natively t) ;; syntax highlighting in source blocks
  (setq org-src-tab-acts-natively t) ;; Make TAB act as if language's major mode.
  (setq org-src-window-setup 'current-window) ;; Use the current window rather than popping open a new onw

#+end_src

** TODO Task Handling and Agenda
   On both linux and windows with dependencies turned on trying to complete a parent task in the agenda
      causes a hang so turning off enforcing of dependencies.

Establishes the states and other setting related to task handling. 

#+BEGIN_SRC emacs-lisp

  ;; task handling
  ;; (setq org-enforce-todo-dependencies t)
  ;; (setq org-enforce-todo-checkbox-dependencies t)
  (setq org-todo-keywords
        '((sequence "TODO" "STARTED" "|" "DONE" "SUSPENDED")))
  (setq org-log-done 'time)
  (setq org-log-into-drawer t)
  (setq org-log-reschedule 'note)

  ;; agenda settings
  (setq org-agenda-span 7)
  (setq org-agenda-start-on-weekday nil)
  (setq diary-file (expand-file-name "diary" db-home-org-dir))
  (setq org-agenda-include-diary t)

#+end_src

** Takes care of work and play

Set up the agenda files which are in two directories, one for personal and one for work. 

#+begin_src emacs-lisp

  ;; Set up agenda files
  (setq org-agenda-files (directory-files-recursively db-home-org-dir "org$"))
  (if db-org-at-work
      (setq org-agenda-files (append org-agenda-files (directory-files-recursively db-work-org-dir "org$"))))

  ;; some other defaults
  (setq org-directory db-home-org-dir)
  (setq org-default-notes-file (expand-file-name db-home-org-dir "index.org"))

#+end_src

I have monthly log files used to take notes / journal that are sources of refile items but not
targets. They are named YYYY-MM(w).org

#+begin_src emacs-lisp

  (defun db-filtered-refile-targets ()
    "Removes month journals as valid refile targets"
    (remove nil (mapcar (lambda (x)
                          (if (string-match-p "2[0-9]*\-[0-9]+w?" x)
                              nil x)) org-agenda-files)))

  (setq org-refile-targets '((db-filtered-refile-targets :maxlevel . 5)))

#+end_src

** Org Capture Setup

Org capture templates for Chrome org-capture from site:
~https://github.com/sprig/org-capture-extension~

Added this file: ~/.local/share/applications/org-protocol.desktop~

#+begin_src emacs-lisp
  (setq org-modules (quote (org-protocol))) 
  (require 'org-protocol)
#+end_src

*** TODO Setting up org-protocol handler. This page has best description:
[[https://github.com/sprig/org-capture-extension#set-up-handlers-in-emacs][This page]] has the best description. This is working in linux only, hence the todo. 

#+begin_src emacs-lisp

 (defun transform-square-brackets-to-round-ones(string-to-transform)
   "Transforms [ into ( and ] into ), other chars left unchanged."
   (concat 
   (mapcar #'(lambda (c) (if (equal c ?[) ?\( (if (equal c ?]) ?\) c))) string-to-transform))
   )

 ;; if you set this variable you have to redefine the default t/Todo.
 (setq org-capture-templates 
       `(
         ("t" "Todo" entry (file+headline ,(concat org-directory "/index.org") "Refile")
          "* TODO %?\n\n  %i\n  %a")
         ("p" "Protocol" entry (file+headline ,(concat org-directory "/index.org") "Refile")
          "* %^{Title}\nSource: %u, %c\n #+BEGIN_QUOTE\n%i\n#+END_QUOTE\n\n\n%?")	
         ("L" "Protocol Link" entry (file+headline ,(concat org-directory "/index.org") "Refile")
          "* %? [[%:link][%(transform-square-brackets-to-round-ones \"%:description\")]]\n")
         ))

#+end_src

* Org Roam

Requires installation of sqlite:

~pacman -S sqlite~

#+begin_src emacs-lisp

    (setq org-roam-directory-alist '("~/OrgDocuments"
                                     "~/Deloitte (O365D)/Team Donald - General/OrgDocuments"))

    (defun db/toggle-org-roam-directory ()
      "cycles through a list of directories and configures org-roam directory"
      (interactive)
      (setq org-roam-directory-alist (append (cdr org-roam-directory-alist) (cons (car org-roam-directory-alist) ())))
      (setq org-roam-directory (car org-roam-directory-alist))
      (org-roam-db-build-cache)
      (setq org-default-notes-file (append org-roam-directory "/index.org"))
      (message "org-roam-directory now '%s'" (car org-roam-directory-alist)))

    (setq org-roam-directory (car org-roam-directory-alist))
    (setq org-roam-index-file "index.org")

    ;; (define-key org-roam-mode-map (kbd "C-c n l") 'org-roam)
    ;; (define-key org-roam-mode-map (kbd "C-c n f") 'org-roam-find-file)
    ;; (define-key org-roam-mode-map (kbd "C-c n j") 'org-roam-jump-to-index)
    ;; (define-key org-roam-mode-map (kbd "C-c n b") 'org-roam-switch-to-buffer)
    ;; (define-key org-roam-mode-map (kbd "C-c n g") 'org-roam-graph)

    (define-key org-mode-map (kbd "C-c n i") 'org-roam-insert)
    (define-key org-mode-map (kbd "C-c l") 'org-store-link)

#+end_src

* RSS with =elfeed=

Install elfeed and load up my feeds.

#+begin_src emacs-lisp
  (setq elfeed-set-max-connections 32)
  (elfeed-org)
  (setq rmh-elfeed-org-files (list (expand-file-name "rss-feeds.org" db-home-org-dir)))
#+end_src

Open =elfeed= with =C-c r=:

#+begin_src emacs-lisp
  (global-set-key (kbd "C-c r") 'elfeed)
#+end_src

Use =o= to browse the entry in a Web browser.

#+begin_src emacs-lisp
  (define-key elfeed-show-mode-map "o" 'elfeed-show-visit)
  (define-key elfeed-search-mode-map "o" 'elfeed-search-browse-url)
#+end_src
* Globally Set Keys

This section has all globally set keys unless they are related to a package or mode config. 

#+begin_src emacs-lisp

  ;; use hippie-expand instead of dabbrev
  (global-set-key (kbd "M-/") #'hippie-expand)
  (global-set-key (kbd "s-/") #'hippie-expand)

  ;; keyboard macros
  (global-set-key (kbd "<f1>") #'start-kbd-macro)
  (global-set-key (kbd "<f2>") #'end-kbd-macro)
  (global-set-key (kbd "<f3>") #'call-last-kbd-macro)
  ;; org keys
  (define-key global-map "\C-ca" 'org-agenda)
  (define-key global-map "\C-cc" 'org-capture)

  ;; replace buffer-menu with ibuffer
  (global-set-key (kbd "C-x C-b") #'ibuffer)

  ;; Lenovo Function Key Bindings
  (global-set-key (kbd "<XF86Favorites>") 'bury-buffer) ;; The Star on F12

#+end_src

* Finally, start a server

#+begin_src emacs-lisp
  (server-start)
#+end_src
