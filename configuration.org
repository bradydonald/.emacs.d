* Package management

  Where we get packages from:
  
  #+BEGIN_SRC emacs-lisp
    (require 'package)
    (setq package-enable-at-startup nil)
    ;; too easy to get gpg errors in windows build    
    (setq package-check-signature nil)

    (setq package-archives
	  '(("gnu"          . "https://elpa.gnu.org/packages/")
	    ("melpa"        . "https://melpa.org/packages/")
	    ("melpa-stable" . "https://stable.melpa.org/packages/")
	    ("org"          . "https://orgmode.org/elpa/")
	    ("nongnu"       . "https://elpa.nongnu.org/nongnu/")))
  #+END_SRC

  Now that Emacs knows where get from let's initialize:

  #+BEGIN_SRC emacs-lisp

    (package-initialize)

    (unless (package-installed-p 'use-package)
      (package-refresh-contents)
      (package-install 'use-package))

    (eval-when-compile
      (require 'use-package))

    (setq use-package-always-ensure t)
    (setq use-package-compute-statistics t)
    (use-package diminish) ; no longer included with use-package by default

    (use-package auto-package-update
      :ensure t
      :config
      (setq auto-package-update-interval 14 ;; days
        auto-package-update-prompt-before-update t
        auto-package-update-delete-old-versions t
        auto-package-update-hide-results t)
      (auto-package-update-maybe))
  #+END_SRC

  Let's also add a way to ensure certain system packages are installed
  alongside Emacs packages.  This is useful when, for example, you
  need the =rg= executable, or an npm package.
  
  #+BEGIN_SRC emacs-lisp
    (use-package use-package-ensure-system-package
      :ensure t)
  #+END_SRC

* Basic Settings

  Place for a grab bag of basic settings

  #+BEGIN_SRC emacs-lisp

    (setq inhibit-startup-screen t)
    (when (fboundp 'tool-bar-mode) (tool-bar-mode -1))
    (setq ring-bell-function 'ignore)
    (line-number-mode t)
    (column-number-mode t)
    (size-indication-mode t)
    (fset 'yes-or-no-p 'y-or-n-p)
    (setq require-final-newline t)
    (setq-default fill-column 80)
    (add-hook 'text-mode-hook 'auto-fill-mode)
    (prefer-coding-system 'utf-8)
    (set-default-coding-systems 'utf-8)
    (set-terminal-coding-system 'utf-8)
    (set-keyboard-coding-system 'utf-8)
    (setq-default indent-tabs-mode nil)   
    (setq-default tab-width 4)            
    ;; smart tab behavior - indent or complete
    (setq tab-always-indent 'complete)
    (global-display-line-numbers-mode 0) ; line number in margin
    (global-hl-line-mode 0) ; highlight current line
    (global-auto-revert-mode 1)
    (setq global-auto-revert-non-file-buffers t)
    (setq-default buffer-file-coding-system 'utf-8-unix)    
    ;; scroll to the bottom of repls on output
    (add-hook 'comint-output-filter-functions 'comint-postoutput-scroll-to-bottom)

    (defvar default-gc-cons-threshold most-positive-fixnum
      "for startup make hella big during startup.")

    ;; make garbage collector less invasive
    (setq gc-cons-threshold default-gc-cons-threshold gc-cons-percentage 0.6)

    ;; ediff in same window
    (setq ediff-window-setup-function 'ediff-setup-windows-plain)

    ;; my email
    (setq user-full-name "Donald Brady" user-mail-address "donald.brady@gmail.com")

  #+END_SRC

* Visual Appearance

    #+BEGIN_SRC emacs-lisp

      ;; Let the desktop background show through
      (setq db/my-alpha 97)
      (set-frame-parameter (selected-frame) 'alpha '(97 . 100))
      (add-to-list 'default-frame-alist '(alpha . (90 . 90)))

      (defun db/toggle-transparency ()
        (interactive)
        (setq current-alpha (car (frame-parameter (selected-frame) 'alpha)))
        (if (= current-alpha 100)
            (set-frame-parameter (selected-frame) 'alpha '(97 . 100))
          (set-frame-parameter (selected-frame) 'alpha '(100 . 100))))      

      ;; Install doom-themes
      (unless (package-installed-p 'doom-themes)
        (package-install 'doom-themes))

      ;; Load up doom-palenight for the System Crafters look
      (load-theme 'doom-palenight t)

      ;; Set reusable font name variables
      (defvar db/fixed-width-font "JetBrains Mono"
        "The font to use for monospaced (fixed width) text.")

      (defvar db/variable-width-font "Iosevka Aile"
        "The font to use for variable-pitch (document) text.")

      ;; NOTE: These settings might not be ideal for your machine, tweak them as needed!
      (set-face-attribute 'default nil :font db/fixed-width-font :weight 'light :height 180)
      (set-face-attribute 'fixed-pitch nil :font db/fixed-width-font :weight 'light :height 190)
      (set-face-attribute 'variable-pitch nil :font db/variable-width-font :weight 'light :height 1.3)

  #+END_SRC

* Set up savefile, recent files, backup, and autosave features

  #+BEGIN_SRC emacs-lisp

    (defconst dbrady-savefile-dir (expand-file-name "savefile" user-emacs-directory))

    ;; create the savefile dir if it doesn't exist
    (unless (file-exists-p dbrady-savefile-dir) (make-directory dbrady-savefile-dir))

    ;; store all backup and autosave files in the tmp dir
    (setq backup-directory-alist `((".*" . ,temporary-file-directory)))
    (setq auto-save-file-name-transforms `((".*" ,temporary-file-directory t)))

    ;; saveplace remembers your location in a file when saving files
    (use-package saveplace
      :config
      (setq save-place-file (expand-file-name "saveplace" dbrady-savefile-dir))
      ;; activate it for all buffers
      (setq-default save-place t))

    (use-package savehist
      :config
      (setq savehist-additional-variables
            ;; search entries
            '(search-ring regexp-search-ring)
            ;; save every minute
            savehist-autosave-interval 60
            ;; keep the home clean
            savehist-file (expand-file-name "savehist" dbrady-savefile-dir))
      (savehist-mode +1))

  #+END_SRC

  #+BEGIN_SRC emacs-lisp
    (use-package recentf
      :config
      (setq recentf-save-file (expand-file-name "recentf" dbrady-savefile-dir))
      (setq recentf-max-saved-items 50)
      (setq recentf-max-menu-items 15)
      (setq recentf-auto-cleanup 'never)
      (recentf-mode +1))
  #+END_SRC

* Vanilla Packages

  The packages are loaded as is

  #+BEGIN_SRC emacs-lisp
    (use-package eglot)
    (use-package elec-pair)
    (use-package flycheck)
    (use-package git-timemachine)
    (use-package gnuplot)
    (use-package s) ;; some nice easy string manipulation functions
    (use-package magit)
    (use-package deadgrep) ;; requires ripgrep binary
    (use-package doom-themes)
  #+END_SRC

* Load any lisp files

  Load any .el files in =.emacs.d/lisp= directory. This is not recursive so any
  code in sub-directories will not be loaded. This is intentional to allow for
  later selective loading if there are dependencies. 
  
  #+BEGIN_SRC emacs-lisp
    (defun load-directory (dir)
      (let ((load-it (lambda (f)
               (load-file (concat (file-name-as-directory dir) f)))
             ))
    (mapc load-it (directory-files dir nil "\\.el$"))))
    (load-directory "~/.emacs.d/lisp")
  #+END_SRC
  
* Paren Matching

  Configuration for a bunch of built in packages.

  #+BEGIN_SRC emacs-lisp

    (use-package paren
      :config
      (show-paren-mode +1))

  #+END_SRC

* Windows Specific Setup
  
** Spelling

   Setup for msys2
  
   #+BEGIN_EXAMPLE
     pacman -S mingw-w64-x86_64-aspell
     pacman -S mingw-w64-x86_64-aspell-en
   #+END_SRC
  
   #+BEGIN_SRC emacs-lisp
     (if (eq system-type "windows-nt")
         (setq ispell-program-name "aspell.exe"))
   #+END_SRC

** SQL Timeout

   sqlite performance on windows seems really bad. Have to increase timeout.

   #+BEGIN_SRC emacs-lisp
     (setq emacsql-global-timeout 60)
   #+END_SRC

** WSL to use Windows Native Browser

   #+BEGIN_SRC emacs-lisp
     (when (and (eq system-type 'gnu/linux)
                (string-match
                 "Linux.*Microsoft.*Linux"
                 (shell-command-to-string "uname -a")))
       (setq
        browse-url-generic-program  "/mnt/c/Windows/System32/cmd.exe"
        browse-url-generic-args     '("/c" "start")
        browse-url-browser-function #'browse-url-generic))
   #+END_SRC
   
* Avy
  Avy has one really useful function =avy-goto-line= which supports multiple
  buffers

  #+BEGIN_SRC emacs-lisp
    (use-package avy
      :bind (("M-g f" . avy-goto-line)))
  #+END_SRC
  
* Dired Mode

  Dired mode is built in and powerful but easy to forget the commands and
  capabilities. Make things a bit easier to remember for me

  #+BEGIN_SRC emacs-lisp
    ;; dired-x comes with emacs but isn't loaded by default.
    (require 'dired-x)

    (setq-default dired-omit-files-p t) ; Buffer-local variable
    (setq dired-omit-files (concat dired-omit-files "\\|^\\..+$"))
    (setq dired-dwim-target t) ;; guess destination
    (setq dired-recursive-copies 'always)
    (setq dired-recursive-deletes 'always)

    (define-key dired-mode-map (kbd "% f") 'find-name-dired)
    (define-key dired-mode-map (kbd "% .") 'dired-omit-mode)
    (define-key dired-mode-map (kbd "% w") 'db/wsl-open-in-external-app)

  #+END_SRC

* Text Scaling

  =default-text-scale= allows you to quickly resize text. By default binds to
  C-M-= and C-M-- to increase and decrease the face size 

  #+BEGIN_SRC emacs-lisp
    (use-package default-text-scale
      :config
      (default-text-scale-mode))
  #+END_SRC

* Ivy

  #+BEGIN_SRC emacs-lisp
    (use-package ivy
      :config
      (setq ivy-use-virtual-buffers t)
      (setq ivy-use-selectable-prompt t)
      (setq enable-recursive-minibuffers t)
      (ivy-mode 1))
  #+END_SRC

* SUSPENDED Undo Tree

  Performance on msys2 is very sub-par so turning off.
  
  #+BEGIN_SRC emacs-lisp
    ;; (use-package undo-tree
    ;;   :config
    ;;   (setq undo-tree-history-directory-alist '(("." . "~/.emacs.d/undo")))
    ;;   (global-undo-tree-mode))
  #+END_SRC
  
* Swiper
  Use swiper for better searching
  #+BEGIN_SRC emacs-lisp
    (use-package swiper
      :bind
      (("\C-s" . swiper)))
  #+END_SRC

* Orderless
  When searching order does not matter making it easier to find things. 

  #+BEGIN_SRC emacs-lisp
    (use-package orderless
      :config
      (setq completion-styles '(orderless)))
  #+END_SRC

* Marginalia
  Provides richer annotaions in minibuffer

  #+BEGIN_SRC emacs-lisp

    (use-package marginalia
      ;; Either bind `marginalia-cycle` globally or only in the minibuffer
    :bind (("M-A" . marginalia-cycle)
           :map minibuffer-local-map
           ("M-A" . marginalia-cycle))
    :init
    ;; Must be in the :init section of use-package such that the mode gets
    ;; enabled right away. Note that this forces loading the package.
    (marginalia-mode))

  #+END_SRC

* PDF Tools
  PDF viewer and annotator

  #+BEGIN_SRC emacs-lisp
    (use-package pdf-tools
      :init
      (pdf-loader-install))
  #+END_SRC

* Yas Snippets
  Use yas snippets templating package

  #+BEGIN_SRC emacs-lisp
    (use-package yasnippet
      :config
      (yas-global-mode 1))
    (use-package yasnippet-snippets)
  #+END_SRC

* Projectile

  [[https://projectile.mx/][Projectile]] is useful for navigating dev projects
  
  #+BEGIN_SRC emacs-lisp
    (use-package projectile :ensure t)
    (require 'projectile)
    (projectile-mode +1)
    (define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
    (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
  #+END_SRC

* Org Mode

** Org Mode Packages

   #+BEGIN_SRC emacs-lisp
     (use-package org)
     (use-package org-contrib :ensure t)
     (use-package org-superstar)
     (use-package org-edna)
     (use-package org-ql)
     (use-package counsel)
     (require 'org-habit)
  #+END_SRC

** Org Appearance

  #+BEGIN_SRC emacs-lisp

    ;; Load org-faces to make sure we can set appropriate faces
    (require 'org-faces)

    ;; Hide emphasis markers on formatted text
    (setq org-hide-emphasis-markers t)

    ;; Resize Org headings
    (dolist (face '((org-level-1 . 1.2)
		    (org-level-2 . 1.1)
		    (org-level-3 . 1.05)
		    (org-level-4 . 1.0)
		    (org-level-5 . 1.1)
		    (org-level-6 . 1.1)
		    (org-level-7 . 1.1)
		    (org-level-8 . 1.1)))
      (set-face-attribute (car face) nil :font db/variable-width-font :weight 'medium :height (cdr face)))

    ;; Make the document title a bit bigger
    (set-face-attribute 'org-document-title nil :font db/variable-width-font :weight 'bold :height 1.3)

    ;; Make sure certain org faces use the fixed-pitch face when variable-pitch-mode is on
    (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-table nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-formula nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-code nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch)

    ;;; Centering Org Documents --------------------------------

    ;; Install visual-fill-column
    (unless (package-installed-p 'visual-fill-column)
      (package-install 'visual-fill-column))

    ;; Configure fill width
    (setq visual-fill-column-width 110
	  visual-fill-column-center-text t)


  #+END_SRC
  
** Basic Org Config  

   #+BEGIN_SRC emacs-lisp
     (add-hook 'org-mode-hook (lambda () (org-superstar-mode 1)))
     (define-key org-mode-map (kbd "C-c l") 'org-store-link)
     (define-key org-mode-map (kbd "C-x n s") 'org-toggle-narrow-to-subtree)
     (define-key org-mode-map (kbd "C-c C-j") 'counsel-org-goto)

     (setq org-image-actual-width nil)
     (setq org-modules (append '(org-protocol) org-modules))
     (setq org-modules (append '(habit) org-modules))
     (setq org-catch-invisible-edits 'smart)
     (setq org-ctrl-k-protect-subtree t)
     (set-face-attribute 'org-headline-done nil :strike-through t)
     (setq org-return-follows-link t)
     (setq org-adapt-indentation t)
     (setq org-odt-preferred-output-format "docx")
   #+END_SRC

** Org File Locations

   My setup now includes two org-directories under an umberlla OrgDocuments
   directory. They are personal and dcllp (work). The default opening setup is
   to default to personal. Some files may also be gpg encrypted and need to be
   added as well.

   #+BEGIN_SRC emacs-lisp
     (setq org-directory-personal "~/OrgDocuments/personal")
     (setq org-directory-work "~/OrgDocuments/dcllp")
     (setq org-directory org-directory-personal)
     (setq org-id-locations-file (expand-file-name ".org-id-locations" org-directory))
     (setq org-attach-dir-relative t)

     (defun db/org-agenda-files ()
       ;; org files for agenda
       (setq ofiles (directory-files-recursively org-directory "org$"))
       ;; some may be encrypted though
       (setq gfiles (directory-files-recursively org-directory "org.gpg$"))
       (append ofiles gfiles))

     (setq org-agenda-files (db/org-agenda-files))
     (setq org-default-notes-file (concat org-directory "/index.org"))
  #+END_SRC

** Org Roam

   Likewise org-roam defaults to personal.

   #+BEGIN_SRC emacs-lisp
     (setq org-roam-v2-ack t)
     (use-package org-roam)
     (setq org-roam-directory (expand-file-name "roam" org-directory))
     (setq org-roam-db-location (expand-file-name "org-roam.db" org-roam-directory))
     (setq org-roam-db-autosync-mode t)
     
     ;; required for org-roam bookmarklet 
     (require 'org-roam-protocol)

     ;; Org-roam Capture Templates

     ;; Starter pack. If there is only one, it uses automatically without asking.

     (setq org-roam-capture-templates
           '(("d" "default" plain "%?"
              :if-new (file+head"%(format-time-string \"%Y-%m-%d--%H-%M-%SZ--${slug}.org\" (current-time) t)"
                                "#+title: ${title}\n#+filetags: %^G:\n\n* ${title}\n\n")
              :unnarrowed t)
             ("y" "yank" plain "%?"
              :if-new (file+head"%(format-time-string \"%Y-%m-%d--%H-%M-%SZ--${slug}.org\" (current-time) t)"
                                "#+title: ${title}\n#+filetags: %^G\n%c\n")
              :unnarrowed t)
             ("o" "org-roam-it" plain "%?"
              :if-new (file+head"%(format-time-string \"%Y-%m-%d--%H-%M-%SZ--${slug}.org\" (current-time) t)"
                                "#+title: ${title}\n#+filetags:\n{ref}\n")
              :unnarrowed t)))

   #+END_SRC

** Language Support

   #+BEGIN_SRC emacs-lisp
     (org-babel-do-load-languages
      'org-babel-load-languages
      '((emacs-lisp . t)
        (ruby . t)
        (python . t)
        (sql . t)
        (shell . t)
        (clojure . t)
        (gnuplot . t)))

     (setq org-confirm-babel-evaluate nil)
     (setq org-export-with-smart-quotes t)
     (setq org-src-fontify-natively t)
     (setq org-src-tab-acts-natively t)
     (setq org-src-window-setup 'current-window)

   #+END_SRC

** Task Handling and Agenda

   Establishes the states and other settings related to task handling.

   #+BEGIN_SRC emacs-lisp

     (setq org-enforce-todo-dependencies t)
     (setq org-enforce-todo-checkbox-dependencies t)
     (setq org-deadline-warning-days 7)

     (setq org-todo-keywords '((sequence
                                "TODO(t)"
                                "STARTED(s)"
                                "DELEGATED(e)"
                                "WAITING(w)" "|"
                                "DONE(d)"
                                "SUSPENDED(u)"
                                "SKIPPED(k)")))
     (setq org-log-done 'time)
     (setq org-log-into-drawer t)
     (setq org-log-reschedule 'note)

     ;; agenda settings
     (setq org-agenda-span 1)
     (setq org-agenda-start-on-weekday nil)

     (add-hook 'org-agenda-mode-hook (lambda ()
                                       (define-key org-agenda-mode-map (kbd "S") 'org-agenda-schedule)))
     (add-hook 'org-agenda-mode-hook (lambda ()
                                       (define-key org-agenda-mode-map (kbd "D") 'org-agenda-deadline)))

   #+END_SRC


   Stealing Prot's agenda setup which is really nice and doesn't depend on org-super-agenda

   #+BEGIN_SRC emacs-lisp

     (setq org-agenda-custom-commands
           `(("A" "Daily agenda and top priority tasks"
              ((tags-todo "*"
                          ((org-agenda-skip-function '(org-agenda-skip-if nil '(timestamp)))
                           (org-agenda-skip-function
                            `(org-agenda-skip-entry-if
                              'notregexp ,(format "\\[#%s\\]" (char-to-string org-priority-highest))))
                           (org-agenda-block-separator nil)
                           (org-agenda-overriding-header "Important tasks without a date\n")))
               (agenda "" ((org-agenda-span 1)
                           (org-deadline-warning-days 0)
                           (org-agenda-block-separator nil)
                           (org-scheduled-past-days 0)
                           ;; We don't need the `org-agenda-date-today'
                           ;; highlight because that only has a practical
                           ;; utility in multi-day views.
                           (org-agenda-day-face-function (lambda (date) 'org-agenda-date))
                           (org-agenda-format-date "%A %-e %B %Y")
                           (org-agenda-overriding-header "\nToday's agenda\n")))
               (agenda "" ((org-agenda-start-on-weekday nil)
                           (org-agenda-start-day "+1d")
                           (org-agenda-span 3)
                           (org-deadline-warning-days 0)
                           (org-agenda-block-separator nil)
                           (org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                           (org-agenda-overriding-header "\nNext three days\n")))
               (agenda "" ((org-agenda-time-grid nil)
                           (org-agenda-start-on-weekday nil)
                           ;; We don't want to replicate the previous section's
                           ;; three days, so we start counting from the day after.
                           (org-agenda-start-day "+3d")
                           (org-agenda-span 14)
                           (org-agenda-show-all-dates nil)
                           (org-agenda-time-grid nil)
                           (org-deadline-warning-days 0)
                           (org-agenda-block-separator nil)
                           (org-agenda-entry-types '(:deadline))
                           (org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                           (org-agenda-overriding-header "\nUpcoming deadlines (+14d)\n")))))
             ("P" "Plain text daily agenda and top priorities"
              ((tags-todo "*"
                          ((org-agenda-skip-function '(org-agenda-skip-if nil '(timestamp)))
                           (org-agenda-skip-function
                            `(org-agenda-skip-entry-if
                              'notregexp ,(format "\\[#%s\\]" (char-to-string org-priority-highest))))
                           (org-agenda-block-separator nil)
                           (org-agenda-overriding-header "Important tasks without a date\n")))
               (agenda "" ((org-agenda-span 1)
                           (org-deadline-warning-days 0)
                           (org-agenda-block-separator nil)
                           (org-scheduled-past-days 0)
                           ;; We don't need the `org-agenda-date-today'
                           ;; highlight because that only has a practical
                           ;; utility in multi-day views.
                           (org-agenda-day-face-function (lambda (date) 'org-agenda-date))
                           (org-agenda-format-date "%A %-e %B %Y")
                           (org-agenda-overriding-header "\nToday's agenda\n")))
               (agenda "" ((org-agenda-start-on-weekday nil)
                           (org-agenda-start-day "+1d")
                           (org-agenda-span 3)
                           (org-deadline-warning-days 0)
                           (org-agenda-block-separator nil)
                           (org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                           (org-agenda-overriding-header "\nNext three days\n")))
               (agenda "" ((org-agenda-time-grid nil)
                           (org-agenda-start-on-weekday nil)
                           ;; We don't want to replicate the previous section's
                           ;; three days, so we start counting from the day after.
                           (org-agenda-start-day "+3d")
                           (org-agenda-span 14)
                           (org-agenda-show-all-dates nil)
                           (org-agenda-time-grid nil)
                           (org-deadline-warning-days 0)
                           (org-agenda-block-separator nil)
                           (org-agenda-entry-types '(:deadline))
                           (org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                           (org-agenda-overriding-header "\nUpcoming deadlines (+14d)\n"))))
              ((org-agenda-with-colors nil)
               (org-agenda-prefix-format "%t %s")
               (org-agenda-current-time-string ,(car (last org-agenda-time-grid)))
               (org-agenda-fontify-priorities nil)
               (org-agenda-remove-tags t))
              ("agenda.txt"))))

     (defvar prot-org-custom-daily-agenda
       ;; NOTE 2021-12-08: Specifying a match like the following does not
       ;; work.
       ;;
       ;; tags-todo "+PRIORITY=\"A\""
       ;;
       ;; So we match everything and then skip entries with
       ;; `org-agenda-skip-function'.
       `((tags-todo "*"
                    ((org-agenda-skip-function '(org-agenda-skip-if nil '(timestamp)))
                     (org-agenda-skip-function
                      `(org-agenda-skip-entry-if
                        'notregexp ,(format "\\[#%s\\]" (char-to-string org-priority-highest))))
                     (org-agenda-block-separator nil)
                     (org-agenda-overriding-header "Important tasks without a date\n")))
         (agenda "" ((org-agenda-span 1)
                     (org-deadline-warning-days 0)
                     (org-agenda-block-separator nil)
                     (org-scheduled-past-days 0)
                     ;; We don't need the `org-agenda-date-today'
                     ;; highlight because that only has a practical
                     ;; utility in multi-day views.
                     (org-agenda-day-face-function (lambda (date) 'org-agenda-date))
                     (org-agenda-format-date "%A %-e %B %Y")
                     (org-agenda-overriding-header "\nToday's agenda\n")))
         (agenda "" ((org-agenda-start-on-weekday nil)
                     (org-agenda-start-day "+1d")
                     (org-agenda-span 3)
                     (org-deadline-warning-days 0)
                     (org-agenda-block-separator nil)
                     (org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                     (org-agenda-overriding-header "\nNext three days\n")))
         (agenda "" ((org-agenda-time-grid nil)
                     (org-agenda-start-on-weekday nil)
                     ;; We don't want to replicate the previous section's
                     ;; three days, so we start counting from the day after.
                     (org-agenda-start-day "+3d")
                     (org-agenda-span 14)
                     (org-agenda-show-all-dates nil)
                     (org-agenda-time-grid nil)
                     (org-deadline-warning-days 0)
                     (org-agenda-block-separator nil)
                     (org-agenda-entry-types '(:deadline))
                     (org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                     (org-agenda-overriding-header "\nUpcoming deadlines (+14d)\n"))))
       "Custom agenda for use in `org-agenda-custom-commands'.")

     (setq org-agenda-custom-commands
           `(("A" "Daily agenda and top priority tasks"
              ,prot-org-custom-daily-agenda)
             ("P" "Plain text daily agenda and top priorities"
              ,prot-org-custom-daily-agenda
              ((org-agenda-with-colors nil)
               (org-agenda-prefix-format "%t %s")
               (org-agenda-current-time-string ,(car (last org-agenda-time-grid)))
               (org-agenda-fontify-priorities nil)
               (org-agenda-remove-tags t))
              ("agenda.txt"))))

   #+END_SRC         

** Diary Settings

    I don't use the diary file but it's useful for holidays.

    #+BEGIN_SRC emacs-lisp
      (setq calendar-bahai-all-holidays-flag nil)
      (setq calendar-christian-all-holidays-flag t)
      (setq calendar-hebrew-all-holidays-flag t)
      (setq calendar-islamic-all-holidays-flag t)
   #+END_SRC

** Calfw

   [[https://github.com/kiwanami/emacs-calfw][Calfw]] generates useful calendar views suitable for printing or providing a
   more visual outlook on the day, week, two weeks, or month

   #+BEGIN_SRC emacs-lisp
     (use-package calfw)
     (use-package calfw-org)
     (require 'calfw)
     (require 'calfw-org)

     (defun db/my-open-calendar ()
       (interactive)
       (cfw:open-calendar-buffer
        :contents-sources
        (list
         (cfw:org-create-source "Green")  ; orgmode source
         ;;    (cfw:howm-create-source "Blue")  ; howm source
         ;;    (cfw:cal-create-source "Orange") ; diary source
         ;;    (cfw:ical-create-source "Moon" "~/moon.ics" "Gray")  ; ICS source1
         ;;    (cfw:ical-create-source "gcal" "https://..../basic.ics" "IndianRed") ; google calendar ICS
         )))
    #+END_SRC

** Org Edna

   Provides more powerful org dependency management.

   #+BEGIN_SRC emacs-lisp
     (org-edna-mode)

     (defun db/org-edna-blocked-by-descendants ()
       "Adds PROPERTY blocking this tasks unless descendants are DONE"
       (interactive)
       (org-set-property "BLOCKER" "descendants"))

     (defun db/org-edna-blocked-by-ancestors ()
       "Adds PROPERTY blocking this tasks unless ancestors are DONE"
       (interactive)
       (org-set-property "BLOCKER" "ancestors"))

     (defun db/org-edna-current-id ()
       "Get the current ID to make it easier to set up BLOCKER ids"
       (interactive)
       (set-register 'i (org-entry-get (point) "ID"))
       (message "ID stored"))

     (defun db/org-edna-blocked-by-id ()
       "Adds PROPERTY blocking task at point with specific task ID"
       (interactive)
       (org-set-property "BLOCKER" (s-concat "ids(" (get-register 'i) ")")))

     (define-key org-mode-map (kbd "C-c C-x <up>") 'db/org-edna-blocked-by-ancestors)
     (define-key org-mode-map (kbd "C-c C-x <down>") 'db/org-edna-blocked-by-descendants)
     (define-key org-mode-map (kbd "C-c C-x <left>") 'db/org-edna-current-id)
     (define-key org-mode-map (kbd "C-c C-x <right>") 'db/org-edna-blocked-by-id)
     (define-key org-mode-map (kbd "C-c C-x i") 'org-id-get-create)
     ;; override y (agenda year) with more useful todo yesterday for marking habits done prior day 
     (define-key org-agenda-mode-map (kbd "y") 'org-agenda-todo-yesterday)

   #+END_SRC

** Filter Refile Targets

   I have monthly log files used to take notes / journal that are sources of refile
   items but not targets. They are named YYYY-MM(w).org

   #+BEGIN_SRC emacs-lisp
     (defun db-filtered-refile-targets ()
       "Removes month journals as valid refile targets"
       (remove nil (mapcar (lambda (x)
                             (if (string-match-p "journals" x)
                                 nil x)) org-agenda-files)))

     (setq org-refile-targets '((db-filtered-refile-targets :maxlevel . 10)))

   #+END_SRC

** Org Capture Setup

   Org capture templates for Chrome org-capture from [[https://github.com/sprig/org-capture-extension][site]].

   Added this file: ~/.local/share/applications/org-protocol.desktop~ using the
   following command:

   #+BEGIN_EXAMPLE
     cat > "${HOME}/.local/share/applications/org-protocol.desktop" << EOF
     [Desktop Entry]
     Name=org-protocol
     Exec=emacsclient %u
     Type=Application
     Terminal=false
     Categories=System;
     MimeType=x-scheme-handler/org-protocol;
     EOF
   #+END_EXAMPLE

   and then run

   #+BEGIN_EXAMPLE
     update-desktop-database ~/.local/share/applications
   #+END_EXAMPLE

   #+BEGIN_SRC emacs-lisp
     (require 'org-protocol)
   #+END_SRC

*** Setting up org-protocol handler. This page has best description:
    [[https://github.com/sprig/org-capture-extension#set-up-handlers-in-emacs][This page]] has the best description. This is working in linux only, hence the todo. 

    #+BEGIN_SRC emacs-lisp
      (defun transform-square-brackets-to-round-ones(string-to-transform)
        "Transforms [ into ( and ] into ), other chars left unchanged."
        (concat 
         (mapcar #'(lambda (c) (if (equal c ?[) ?\( (if (equal c ?]) ?\) c))) string-to-transform))
        )

      (defvar db/org-contacts-template "* %(org-contacts-template-name)
              :PROPERTIES:
              :ADDRESS: %^{289 Cleveland St. Brooklyn, 11206 NY, USA}
              :MOBILE: %^{MOBILE}
              :BIRTHDAY: %^{yyyy-mm-dd}
              :EMAIL: %(org-contacts-template-email)
              :NOTE: %^{NOTE}
              :END:" "Template for org-contacts.")

      ;; if you set this variable you have to redefine the default t/Todo.
      (setq org-capture-templates 
            `(

              ("t" "Tasks")

              ;; TODO     (t) Todo template
              ("tt" "Todo" entry (file+headline ,org-default-notes-file "Refile")
               "* TODO %?"
               :empty-lines 1)

              ("te" "Delegated" entry (file+headline ,org-default-notes-file "Refile")
               "* DELEGATED %?
               :PROPERTIES:
               :OWNER: %^{Delegated to?}
               :END:"
               :empty-lines 1)

              ;; Note (n) template
              ("n" "Note" entry (file+headline ,org-default-notes-file "Refile")
               "* %? %(%i)"
               :empty-lines 1)

              ;; Protocol (p) template
              ("p" "Protocol" entry (file+headline ,org-default-notes-file "Refile")
               "* %^{Title}
                          Source: %u, %c
                         ,#+BEGIN_QUOTE
                         %i
                         ,#+END_QUOTE
                         %?"
               :empty-lines 1)

              ;; Protocol Link (L) template
              ("L" "Protocol Link" entry (file+headline ,org-default-notes-file "Refile")
               "* %? [[%:link][%(transform-square-brackets-to-round-ones \"%:description\")]]"
               :empty-lines 1)

              ;; Goal (G) template
              ("G" "Goal" entry (file+headline ,org-default-notes-file "Refile")
               "* GOAL %^{Describe your goal}
            Added on %U - Last reviewed on %U
                 :SMART:
                 :Sense: %^{What is the sense of this goal?}
            :Measurable: %^{How do you measure it?}
               :Actions: %^{What actions are needed?}
             :Resources: %^{Which resources do you need?}
               :Timebox: %^{How much time are you spending for it?}
                   :END:"
               :empty-lines 1)
              ;; Contact (c) template
              ("c" "Contact" entry (file+headline ,(concat org-directory "/contacts.org") "Contacts")
               "* %(org-contacts-template-name)
            :PROPERTIES:
             :ADDRESS: %^{289 Cleveland St. Brooklyn, 11206 NY, USA}
            :BIRTHDAY: %^{yyyy-mm-dd}
               :EMAIL: %(org-contacts-template-email)
                 :TEL: %^{NUMBER}
                :NOTE: %^{NOTE}
            :END:"
               :empty-lines 1)
              ))

   #+END_SRC        

** Org Download

   Drag and drop support for images

   #+BEGIN_SRC emacs-lisp
     (use-package org-download)
     (require 'org-download)
     (setq org-download-method 'attach)
     ;; Drag-and-drop to `dired`
     (add-hook 'dired-mode-hook 'org-download-enable)
   #+END_SRC

** Personal and Work Toggle

   #+BEGIN_SRC emacs-lisp
     (defun db/org-work-context ()
       (interactive)
       (setq org-directory org-directory-work)
       (db/org-switch-context))

     (defun db/org-personal-context ()
       (interactive)
       (setq org-directory org-directory-personal)
       (db/org-switch-context))

     (defun db/org-switch-context ()
       (setq org-agenda-files (db/org-agenda-files))
       (setq org-default-notes-file (concat org-directory "/index.org"))
       (setq org-id-locations-file (expand-file-name ".org-id-locations" org-directory))
       (setq org-roam-directory (expand-file-name "roam" org-directory))
       (setq org-roam-db-location (expand-file-name "org-roam.db" org-roam-directory))
       (org-roam-db-sync))
  #+END_SRC

** Other Customizations

* TODO Reading Email with mu4e
  :LOGBOOK:
  - Note taken on [2022-06-04 Sat 06:30] \\
    Really struggling to get mu and isync in msys2. Maybe a dead end.
  :END:

#    Load mu4e
   
#    So, mu4e isn't in melpa (wtf) and has to be installed by installing mu.

#    #+BEGIN_SRC emacs-lisp
#      (add-to-list 'load-path "/usr/local/share/emacs/site-lisp/mu4e")
#      (require 'mu4e)
#    #+END_SRC

# ** Contexts

#    #+BEGIN_SRC emacs-lisp
#      (setq mu4e-contexts
#            `( ,(make-mu4e-context
#                 :name "gmail"
#                 :enter-func (lambda () (mu4e-message "Entering gmail context"))
#                 :leave-func (lambda () (mu4e-message "Leaving gmail Context"))
#                 ;; we match based on the contact-fields of the message
#                 :match-func (lambda (msg)
#                               (when msg
#                                 (mu4e-message-contact-field-matches msg
#                                                                     :to "donald.brady@gmail.com")))
#                 :vars '( ( user-mail-address	    . "donald.brady@gmail.com"  )
#                          ( user-full-name	    . "Donald Brady" )
#                          ( mu4e-compose-signature .
#                            (concat
#                             "Donald Brady\n"
#                             "e: donald.brady@gmail.com\n"))))))

#      (setq mu4e-context-policy 'pick-first)

#      ;; use mu4e for e-mail in emacs
#      (setq mail-user-agent 'mu4e-user-agent)

#      ;; these must start with a "/", and must exist
#      ;; (i.e.. /home/user/Maildir/gmail/Sent must exist) you use e.g. 'mu mkdir' and
#      ;; 'mu init' to make the Maildirs if they don't already exist.

#      (setq mu4e-sent-folder   "/gmail/Sent")
#      (setq mu4e-drafts-folder "/gmail/Drafts")
#      (setq mu4e-trash-folder  "/gmail/Trash")
#      (setq mu4e-refile-folder "/gmail/Archive")

# #+END_SRC

# ** Fetching

# ** Use mbsync for fetching email.

#    #+BEGIN_SRC emacs-lisp
#      (setq mu4e-get-mail-command "mbsync -V gmail")
#    #+END_SRC

# ** Composing

# ** Reading

#    #+BEGIN_SRC emacs-lisp
#      (setq mu4e-attachment-dir "~/Downloads")  

#      (define-key mu4e-view-mode-map (kbd "C-c C-o") 'mu4e~view-browse-url-from-binding)  

#      ;; View images inline

#      (setq mu4e-view-show-images t)
#      (when (fboundp 'imagemagick-register-types)
#        (imagemagick-register-types))

# #+END_SRC

# ** Sending

#    You will need to install =msmtp= and configure that as needed.

#    #+BEGIN_SRC emacs-lisp
#      (setq message-send-mail-function 'message-send-mail-with-sendmail)
#      (setq message-sendmail-extra-arguments '("--read-envelope-from"))
#      (setq message-sendmail-f-is-evil 't)
#      (setq sendmail-program "msmtp") 
#    #+END_SRC

# ** Org Agena Integration

#    #+BEGIN_SRC emacs-lisp
#      (require 'org-mu4e)
#      (setq org-mu4e-link-query-in-headers-mode nil)
#    #+END_SRC

# ** Org Contacts

#    #+BEGIN_SRC emacs-lisp
#      (load-file (expand-file-name "lisp/org-contacts/org-contacts.el" user-emacs-directory))
#      (require 'org-contacts)

#      (setq org-contacts-files '("~/OrgDocuments/personal/contacts.org"))
#      (setq mu4e-org-contacts-file (car org-contacts-files))
#      (add-to-list 'mu4e-headers-actions
#                   '("org-contact-add" . mu4e-action-add-org-contact) t)
#      (add-to-list 'mu4e-view-actions
#                   '("org-contact-add" . mu4e-action-add-org-contact) t)

#    #+END_SRC             

#    #+BEGIN_SRC emacs-lisp
#      (global-set-key (kbd "C-c m") 'mu4e)
#    #+END_SRC

* Hyperbole

  Change Hyperbole key to M-\ which is nicely above the enter key on this
  laptop.
  
  #+BEGIN_SRC emacs-lisp
    (use-package hyperbole
      :config
      (add-hook 'hyperbole-init-hook (lambda () (hkey-set-key "\M-\\" 'hkey-either))))
  #+END_SRC
  
* Elfeed

  Read news with elfeed

  #+BEGIN_SRC emacs-lisp
    (use-package elfeed)
    (use-package elfeed-org
      :init
      (setq elfeed-set-max-connections 32)
      (setq rmh-elfeed-org-files (list (expand-file-name "rss-feeds.org" org-directory-personal)))
      (elfeed-org)
      :bind
      (("C-c r" . elfeed)
       :map elfeed-show-mode-map
       ("o" . elfeed-show-visit)
       :map elfeed-search-mode-map
       ("o" . elfeed-search-browse-url)))

   #+END_SRC

* Org Present

  #+BEGIN_SRC emacs-lisp

    (unless (package-installed-p 'org-present)
      (package-install 'org-present))

    (defun db/org-present-prepare-slide (buffer-name heading)
      ;; Show only top-level headlines
      (org-overview)

      ;; Unfold the current entry
      (org-show-entry)

      ;; Show only direct subheadings of the slide but don't expand them
      (org-show-children))

    (defun db/org-present-start ()
      ;; Tweak font sizes
      (setq-local face-remapping-alist '((default (:height 1.5) variable-pitch)
					 (header-line (:height 4.0) variable-pitch)
					 (org-document-title (:height 1.75) org-document-title)
					 (org-code (:height 1.55) org-code)
					 (org-verbatim (:height 1.55) org-verbatim)
					 (org-block (:height 1.25) org-block)
					 (org-block-begin-line (:height 0.7) org-block)))

      ;; Set a blank header line string to create blank space at the top
      (setq header-line-format " ")

      ;; Display inline images automatically
      (org-display-inline-images)

      ;; Center the presentation and wrap lines
      (visual-fill-column-mode 1)
      (visual-line-mode 1))

    (defun db/org-present-end ()
      ;; Reset font customizations
      (setq-local face-remapping-alist '((default variable-pitch default)))

      ;; Clear the header line string so that it isn't displayed
      (setq header-line-format nil)

      ;; Stop displaying inline images
      (org-remove-inline-images)

      ;; Stop centering the document
      (visual-fill-column-mode 0)
      (visual-line-mode 0))

    ;; Turn on variable pitch fonts in Org Mode buffers
    (add-hook 'org-mode-hook 'variable-pitch-mode)

    ;; Register hooks with org-present
    (add-hook 'org-present-mode-hook 'db/org-present-start)
    (add-hook 'org-present-mode-quit-hook 'db/org-present-end)
    (add-hook 'org-present-after-navigate-functions 'db/org-present-prepare-slide)

  #+END_SRC

* Blogging / Org2Blog

  Blogging set up for https://www.donald-brady.com

  #+BEGIN_SRC emacs-lisp
    (use-package org2blog
      :config
      (setq org2blog/wp-blog-alist
            '(
              ("wordpress"
               :url "https://donaldbrady.wordpress.com/xmlrpc.php"
               :username "donald.brady@gmail.com")))
      (setq org2blog/wp-image-upload t)
      (setq org2blog/wp-image-thumbnails t)
      :bind
      ("\C-c h" . org2blog-user-interface))

  #+END_SRC

* Globally set keys

  #+BEGIN_SRC emacs-lisp
    ;; keyboard macros
    (global-set-key (kbd "<f1>") 'start-kbd-macro)
    (global-set-key (kbd "<f2>") 'end-kbd-macro)
    (global-set-key (kbd "<f3>") 'call-last-kbd-macro)

    (define-key global-map (kbd "\C-ca") 'org-agenda)
    (define-key global-map (kbd "\C-cc") 'org-capture)
    (define-key global-map (kbd "C-c n b") 'org-roam-buffer-toggle)
    (define-key global-map (kbd "C-c n f") 'org-roam-node-find)
    (define-key global-map (kbd "C-c n c") 'org-roam-capture)              
    (define-key global-map (kbd "C-c n g") 'org-roam-graph)
    (define-key global-map (kbd "C-c n i") 'org-roam-insert)
    (define-key global-map (kbd "C-c n .") 'org-roam-dailies-goto-today)
    (define-key global-map (kbd "C-c n d") 'org-roam-dailies-capture-today)
    (define-key global-map (kbd "C-c n y") 'org-roam-dailies-goto-yesterday)
    (define-key global-map (kbd "C-c n t") 'org-roam-dailies-goto-tomorrow)
    (define-key global-map (kbd "C-c n i") 'org-roam-node-insert)

    ;; replace buffer-menu with ibuffer
    (global-set-key (kbd "C-x C-b") 'ibuffer)

    (global-set-key (kbd "<f12>") 'bury-buffer) ;; F12 on logi keybpard

  #+END_SRC

* Theme and Faces

  #+BEGIN_SRC emacs-lisp
    (load-theme 'doom-palenight t)
    (set-face-attribute 'default nil :font "JetBrains Mono" :weight 'light :height 100)
    (set-face-attribute 'fixed-pitch nil :font "JetBrains Mono" :weight 'light :height 100)
    (set-face-attribute 'variable-pitch nil :font "Iosevka Aile" :weight 'light :height 1.0)

    (require 'org-faces)

    ;; Hide emphasis markers on formatted text
    (setq org-hide-emphasis-markers nil)

    ;; Resize Org headings
    (dolist (face '((org-level-1 . 1.2)
                    (org-level-2 . 1.1)
                    (org-level-3 . 1.05)
                    (org-level-4 . 1.0)
                    (org-level-5 . 1.1)
                    (org-level-6 . 1.1)
                    (org-level-7 . 1.1)
                    (org-level-8 . 1.1)))
      (set-face-attribute (car face) nil :font "Iosevka Aile" :weight 'medium :height (cdr face)))

    ;; Make the document title a bit bigger
    (set-face-attribute 'org-document-title nil :font "Iosevka Aile" :weight 'bold :height 1.3)

    ;; Make sure certain org faces use the fixed-pitch face when variable-pitch-mode is on
    (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-table nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-formula nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-code nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch)

  #+END_SRC

* Start a server

  #+BEGIN_SRC emacs-lisp
    (load "server")
    (unless (server-running-p) (server-start))
    (put 'upcase-region 'disabled nil)
  #+END_SRC
