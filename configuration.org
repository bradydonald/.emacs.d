#+TITLE: Emacs Configuration
#+AUTHOR: Donald Brady
#+EMAIL: donald.brady@gmail.com
#+OPTIONS: toc:nil num:nil

* Configure =use-package=
  :PROPERTIES:
  :ID:       8352bab3-a374-4b98-b11c-9755ba47431e
  :END:

Use =use-package= to install and configure packages. My =init.el= includes
the initial setup for =package.el= and ensures that =use-package= is installed.

This makes sure that =use-package= will install the package if it's not already
available. 

#+begin_src emacs-lisp
  (require 'use-package-ensure)
  (setq use-package-always-ensure t)
#+end_src

Always compile packages, and use the newest version available.

#+begin_src emacs-lisp
  (use-package auto-compile
    :config (auto-compile-on-load-mode))

  (setq load-prefer-newer t)
#+end_src

* Personal Details Setup
  :PROPERTIES:
  :ID:       600d0ff3-d412-44f0-ba75-2f5d83eaf1d8
  :END:

Sets up some personal information sucha as email

#+begin_src emacs-lisp

  (setq user-full-name "Donald Brady" user-mail-address "donaldbrady@gmail.com")

#+end_src

* Set up savefile, backup, and autosave directories
  :PROPERTIES:
  :ID:       657d5eef-edf6-4bd9-9c42-7fc2a4f6003f
  :END:

#+begin_src emacs-lisp

  (defconst dbrady-savefile-dir (expand-file-name "savefile" user-emacs-directory))

  ;; create the savefile dir if it doesn't exist
  (unless (file-exists-p dbrady-savefile-dir) (make-directory dbrady-savefile-dir))

  ;; store all backup and autosave files in the tmp dir
  (setq backup-directory-alist `((".*" . ,temporary-file-directory)))
  (setq auto-save-file-name-transforms `((".*" ,temporary-file-directory t)))

  ;; saveplace remembers your location in a file when saving files
  (use-package saveplace
    :config
    (setq save-place-file (expand-file-name "saveplace" dbrady-savefile-dir))
    ;; activate it for all buffers
    (setq-default save-place t))

  (use-package savehist
    :config
    (setq savehist-additional-variables
    ;; search entries
    '(search-ring regexp-search-ring)
    ;; save every minute
    savehist-autosave-interval 60
    ;; keep the home clean
    savehist-file (expand-file-name "savehist" dbrady-savefile-dir))
    (savehist-mode +1))

#+end_src

* Basic Configurations
  :PROPERTIES:
  :ID:       f45f3dbd-7b86-4e74-8d8e-1e2abf00a8d5
  :END:

Place for a grab bag of basic settings

#+begin_src emacs-lisp

  (setq inhibit-startup-screen t)
  (when (fboundp 'tool-bar-mode) (tool-bar-mode -1))
  (setq ring-bell-function 'ignore)
  (line-number-mode t)
  (column-number-mode t)
  (size-indication-mode t)
  (fset 'yes-or-no-p 'y-or-n-p)
  (setq require-final-newline t)
  (setq-default fill-column 80)
  (add-hook 'text-mode-hook 'auto-fill-mode)
  (prefer-coding-system 'utf-8)
  (set-default-coding-systems 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (setq-default indent-tabs-mode nil)   
  (setq-default tab-width 4)            
  ;; smart tab behavior - indent or complete
  (setq tab-always-indent 'complete)
  (global-display-line-numbers-mode 1) ; line number in margin
  (global-hl-line-mode 1) ; highlight current line
  
  ;; scroll to the bottom of repls on output
  (add-hook 'comint-output-filter-functions 'comint-postoutput-scroll-to-bottom)
#+end_src

* Custom Packages
  :PROPERTIES:
  :ID:       1e034465-4892-4d7e-90f9-5c083c71898c
  :END:

Use this method as an easier way to identify and load packages but it does separate the
configuration from the use-package

#+BEGIN_SRC emacs-lisp

  (defvar my-packages '(
                        avy
                        default-text-scale
                        easy-hugo
                        eglot
                        elec-pair
                        elfeed
                        elfeed-org
                        elpy
                        epresent
                        exec-path-from-shell ; ensure emacs env matches shell!!
                        flycheck
                        git-timemachine
                        gnuplot
                        htmlize
                        ivy
                        lsp-mode
                        magit
                        org-edna
                        ox-reveal
                        org-superstar
                        paren
                        pdf-tools
                        projectile
                        python
                        pyvenv
                        recentf
                        s
                        swiper
                        yasnippet
                        yasnippet-snippets
                        ))
#+END_SRC

* Install packages
  :PROPERTIES:
  :ID:       2e841ff0-7be9-4535-8b9d-f6bf9441e3b0
  :END:

#+BEGIN_SRC emacs-lisp
  (dolist (p my-packages)
    (unless (package-installed-p p)
      (package-refresh-contents)
      (package-install p))
    (add-to-list 'package-selected-packages p))
#+END_SRC

* Configure Built-in Packages
  :PROPERTIES:
  :ID:       242eccaa-df22-4bbe-9c99-b2d9d733a18b
  :END:

Configuration for a bunch of built in packages.

#+begin_src emacs-lisp

    ;; paren matching
    (show-paren-mode +1)

    ;; recent files
    (setq recentf-save-file (expand-file-name "recentf" dbrady-savefile-dir))
    (setq recentf-max-saved-items 100)
    (setq recentf-max-menu-items 15)
    (setq recentf-auto-cleanup 'never)
    (recentf-mode +1)

    ;; ivy
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq enable-recursive-minibuffers t)
    (global-set-key (kbd "C-c C-r") 'ivy-resume)
    (global-set-key (kbd "<f6>") 'ivy-resume)

    ;; swiper
    (global-set-key "\C-s" 'swiper)

    ;; default text scale
    ;; binds C-M-= and C-M-- to increase and decrease the face size
    (default-text-scale-mode)

    ;; config changes made through the customize UI will be stored here
    (setq custom-file (expand-file-name "custom.el" user-emacs-directory))

    (when (file-exists-p custom-file)
      (load custom-file))

    (when (memq window-system '(mac ns x))
      (exec-path-from-shell-initialize))
#+end_src

* Dired Mode
  :PROPERTIES:
  :ID:       65626b8b-5aee-420a-8ac8-8b80234fa939
  :END:

Dired mode is powerful but easy to forget the commands and capabilities. Make
things a bit easuer to remember

#+BEGIN_SRC emacs-lisp
  (require 'dired-x)
  (setq-default dired-omit-files-p t) ; Buffer-local variable
  (setq dired-omit-files (concat dired-omit-files "\\|^\\..+$"))
  (define-key dired-mode-map (kbd "% f") 'find-name-dired)
  (define-key dired-mode-map (kbd "% .") 'dired-omit-mode)

  ;; Changes to prevent navigating in dired mode from creating a bunch of buffers for every directory
  (put 'dired-find-alternate-file 'disabled nil)
  (add-hook 'dired-mode-hook
   (lambda ()
    (define-key dired-mode-map (kbd "^")
      (lambda () (interactive) (find-alternate-file "..")))
    (define-key dired-mode-map (kbd "e")
      (lambda () (interactive) (find-alternate-file (dired-copy-filename-as-kill))))
    (define-key dired-mode-map (kbd "f")
      (lambda () (interactive) (find-alternate-file (dired-copy-filename-as-kill))))))

#+END_SRC

These functions mimic Directory Opus by bringing up two dired buffers via
/db\/dopus-in/, one in the directory you were in, and one in your home
directory. When exting via /db\/dopus-out/ the window state is restored.

#+BEGIN_SRC emacs-lisp
  (defun db/dopus-in ()
    "Stores the current buffer state and switches to a splt view with two dired
    mode buffers ala Dopus on windows"
    (interactive)
    (window-configuration-to-register 'a)
    (delete-other-windows)
    (dired default-directory)
    (dired-other-window (expand-file-name "~"))
    (other-window 1))

  (defun db/dopus-out ()
    "Returns the stored buffer state after your all done manipulating files Dopus style"
    (interactive)
    (jump-to-register 'a 'DELETE))

#+END_SRC

* Spray Speed Reader
  :PROPERTIES:
  :ID:       cccfbec6-0803-42ee-871b-501ec95f2829
  :END:

[[https://gitlab.com/iankelling/spray][Speed reading mode]]. Just enter the mode and use keys h/left arrow, l/right arrow, f and s for faster
and slower, q quits

#+begin_src emacs-lisp

  (require 'spray)
  (setq spray-wpm 200)

#+end_src

* PDF Tools
  :PROPERTIES:
  :ID:       e5a1d999-0f70-443a-80ed-4a93272e16ef
  :END:

[[https://github.com/politza/pdf-tools][PDF Tools]] is a much better pdf viewer

#+BEGIN_SRC emacs-lisp
  (pdf-loader-install)
#+END_SRC

* Projectile
  :PROPERTIES:
  :ID:       32b9642e-b3af-4ee0-9d52-a5ce6383cd33
  :END:
Use =projectile= for projects navigation

#+BEGIN_SRC emacs-lisp
  (projectile-mode +1)
  (define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
  (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
  ;; prefer to show directory in the project vs finding a file
  (setq projectile-switch-project-action #'projectile-dired)
#+END_SRC

* Magit
  :PROPERTIES:
  :ID:       a3bd4086-b584-4b88-a4fe-b305fb07bcde
  :END:

#+begin_src emacs-lisp
  (global-set-key (kbd "C-x g") 'magit-status)
  (setq magit-push-always-verify nil)
#+end_src

* Hippie Expand Setup
  :PROPERTIES:
  :ID:       c1331a7e-cf79-40d0-801b-c17d0825e024
  :END:

This is a more powerful completion system.

#+begin_src emacs-lisp

;; hippie expand is dabbrev expand on steroids
(setq hippie-expand-try-functions-list '(try-expand-dabbrev
                                         try-expand-dabbrev-all-buffers
                                         try-expand-dabbrev-from-kill
                                         try-complete-file-name-partially
                                         try-complete-file-name
                                         try-expand-all-abbrevs
                                         try-expand-list
                                         try-expand-line
                                         try-complete-lisp-symbol-partially
                                         try-complete-lisp-symbol))

;; use hippie-expand instead of dabbrev
(global-set-key (kbd "M-/") #'hippie-expand)
(global-set-key (kbd "s-/") #'hippie-expand)

#+end_src

* Blogging with =Hugo=
  :PROPERTIES:
  :ID:       67481416-6aae-4e6a-b5e5-738865758abf
  :END:

#+begin_src emacs-lisp

  (setq easy-hugo-basedir "~/bradydonald.github.io_dev/")
  (setq easy-hugo-url "https://bradydonald.github.io/")
  (setq easy-hugo-sshdomain "bradydonald")
  (setq easy-hugo-postdir "content/posts")
  (setq easy-hugo-root "/home/blog/")
  (setq easy-hugo-previewtime "300")
  (global-set-key (kbd "C-c C-e") 'easy-hugo)

#+end_src

* Org Mode
  :PROPERTIES:
  :ID:       e0126b34-3618-44d3-b02c-c66a886be06d
  :END:

Set up for all things =org-mode=

Ran into an org-mode error where agenda does not work. Running
=(byte-recompile-directory package-user-dir nil 'force)= fixes is as recommended
in this [[https://stackoverflow.com/questions/54580647/org-agenda-wrong-number-of-arguments-error/58731899#58731899?newreg=759b3def501940dcbe190fdd2498b1f4][article]].

Some basic configuration for Org Mode beginning with minor modes for spell
checking and replacing the =*='s with various types of bullets.
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook 'auto-fill-mode 'org-roam-mode 'flyspell-mode)
  (add-hook 'org-mode-hook (lambda () (org-superstar-mode 1)))
  (define-key org-mode-map (kbd "C-c n i") 'org-roam-insert)
  (define-key org-mode-map (kbd "C-c l") 'org-store-link)
  (define-key org-mode-map (kbd "C-x n s") 'org-toggle-narrow-to-subtree)
#+END_SRC

** Language Support
   :PROPERTIES:
   :ID:       94b80e87-3dc2-4b51-9d1d-04eeaf40be93
   :END:

Setup =babel= to evaluate Emacs lisp, Ruby, Python, or Gnuplot code.

#+begin_src emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (ruby . t)
     (python . t)
     (sql . t)
     (shell . t)
     (gnuplot . t)))
#+end_src

Don't ask before evaluating code blocks.

#+begin_src emacs-lisp
  (setq org-confirm-babel-evaluate nil)
#+end_src

=htmlize= is used to ensure that exported code blocks use syntax highlighting.

Translate regular ol' straight quotes to typographically-correct curly quotes
when exporting.

#+begin_src emacs-lisp
  (setq org-export-with-smart-quotes t)
#+end_src

** Personal and Work
   :PROPERTIES:
   :ID:       4aea64cb-a921-4bac-b3af-f7911a3f6dda
   :END:

I use Org Mode at work and for personal purposes. I use =db-home-org-dir= and =db-work-org-dir= to
locate the relevant directories.

#+begin_src emacs-lisp
  ;; under git control
  (setq db-home-org-dir "~/OrgDocuments")

  ;; under OneDrive control at work
  (setq db-work-org-dir "~/Deloitte (O365D)/Team Donald - General/OrgDocuments")
  ;; the existence of the above directory tells me this is my work laptop
  (setq db-org-at-work (file-directory-p db-work-org-dir))

  ;; Dropbox as well, for sync with orgzly
  (setq db-dropbox-org-dir "~/Dropbox/OrgDocuments")

#+end_src

** Source Blocks
   :PROPERTIES:
   :ID:       4874d2a6-f4db-4124-a9c7-f3b612855894
   :END:

#+begin_src emacs-lisp
  (setq org-src-fontify-natively t) ;; syntax highlighting in source blocks
  (setq org-src-tab-acts-natively t) ;; Make TAB act as if language's major mode.
  (setq org-src-window-setup 'current-window) ;; Use the current window rather than popping open a new onw
#+end_src

** Task Handling and Agenda
   :PROPERTIES:
   :ID:       60ae4867-c4fc-493e-be7b-bfa4d325b38e
   :END:

Establishes the states and other settings related to task handling. 

#+BEGIN_SRC emacs-lisp

  ;; task handling

  ;; On both linux and windows with dependencies turned on trying to complete a
  ;; parent task in the agenda causes a hang so turning off enforcing of
  ;; dependencies.
  ;; (setq org-enforce-todo-dependencies t)
  ;; (setq org-enforce-todo-checkbox-dependencies t)

  (setq org-todo-keywords
        '((sequence "TODO" "STARTED" "|" "DONE" "SUSPENDED")))
  (setq org-log-done 'time)
  (setq org-log-into-drawer t)
  (setq org-log-reschedule 'note)

  ;; agenda settings
  (setq org-agenda-span 7)
  (setq org-agenda-start-on-weekday nil)
  (setq diary-file (expand-file-name "diary" db-home-org-dir))
  (setq org-agenda-include-diary t)

#+end_src

** Org Edna
   :PROPERTIES:
   :ID:       9ccb479a-26d3-4936-a920-650a6917e2a3
   :END:
   More powerful org dependency management

#+BEGIN_SRC emacs-lisp
  (org-edna-mode)

  ;; create id's when using org capture
  (add-hook 'org-capture-prepare-finalize-hook 'org-id-get-create)

  (defun db/org-add-ids-to-headlines-in-file ()
    "Add ID properties to all headlines in the current file which
      do not already have one."
    (interactive)
    (org-map-entries 'org-id-get-create))

  (add-hook 'org-mode-hook
            (lambda ()
              (add-hook 'before-save-hook 'db/org-add-ids-to-headlines-in-file nil 'local)))

  (defun db/org-current-id ()
    "Get the current ID to make it easier to set up BLOCKER ids"
    (interactive)
    (org-entry-get (point) "ID"))

#+END_SRC

** Takes care of work and play
   :PROPERTIES:
   :ID:       371fd705-0777-403b-8e3d-c8bee04500bf
   :END:

 Set up the agenda files which are in several directories and may or may not be
 available dependening on if work or home context.

 #+begin_src emacs-lisp

   ;; Always available as managed in git
   (setq org-agenda-files (directory-files-recursively db-home-org-dir "org$"))

   ;; If not at work add the Dropbox
   (if (not db-home-org-dir)
       (setq org-agenda-files (append org-agenda-files (directory-files-recursively db-dropbox-org-dir "org$"))))

   ;; if at work add the OneDrive
   (if db-org-at-work
       (setq org-agenda-files (append org-agenda-files (directory-files-recursively db-work-org-dir "org$"))))

   ;; some other defaults
   (setq org-directory db-home-org-dir)
   (setq org-default-notes-file (expand-file-name db-home-org-dir "index.org"))

 #+end_src

 I have monthly log files used to take notes / journal that are sources of refile
 items but not targets. They are named YYYY-MM(w).org

 #+begin_src emacs-lisp

   (defun db-filtered-refile-targets ()
     "Removes month journals as valid refile targets"
     (remove nil (mapcar (lambda (x)
                           (if (string-match-p "2[0-9]*\-[0-9]+w?" x)
                               nil x)) org-agenda-files)))

   (setq org-refile-targets '((db-filtered-refile-targets :maxlevel . 5)))

 #+end_src

** Org Capture Setup
   :PROPERTIES:
   :ID:       a71b8e30-4d07-4515-a505-214f5ed7fd76
   :END:

Org capture templates for Chrome org-capture from [[https://github.com/sprig/org-capture-extension][site]].

Added this file: ~/.local/share/applications/org-protocol.desktop~ using the
following command:

#+BEGIN_EXAMPLE
  cat > "${HOME}/.local/share/applications/org-protocol.desktop" << EOF
  [Desktop Entry]
  Name=org-protocol
  Exec=emacsclient %u
  Type=Application
  Terminal=false
  Categories=System;
  MimeType=x-scheme-handler/org-protocol;
  EOF
#+END_EXAMPLE

and then run =update-desktop-database ~/.local/share/applications/=

#+begin_src emacs-lisp
  (setq org-modules (quote (org-protocol))) 
  (require 'org-protocol)
#+end_src

*** TODO Setting up org-protocol handler. This page has best description:
    :PROPERTIES:
    :ID:       6529722e-7964-4622-93d0-d08981cbf965
    :END:
[[https://github.com/sprig/org-capture-extension#set-up-handlers-in-emacs][This page]] has the best description. This is working in linux only, hence the todo. 

#+begin_src emacs-lisp

 (defun transform-square-brackets-to-round-ones(string-to-transform)
   "Transforms [ into ( and ] into ), other chars left unchanged."
   (concat 
   (mapcar #'(lambda (c) (if (equal c ?[) ?\( (if (equal c ?]) ?\) c))) string-to-transform))
   )

 ;; if you set this variable you have to redefine the default t/Todo.
 (setq org-capture-templates 
       `(
         ("t" "Todo" entry (file+headline ,(concat org-directory "/index.org") "Refile")
          "* TODO %?\n\n  %i\n")
         ("p" "Protocol" entry (file+headline ,(concat org-directory "/index.org") "Refile")
          "* %^{Title}\nSource: %u, %c\n #+BEGIN_QUOTE\n%i\n#+END_QUOTE\n\n\n%?")	
         ("L" "Protocol Link" entry (file+headline ,(concat org-directory "/index.org") "Refile")
          "* %? [[%:link][%(transform-square-brackets-to-round-ones \"%:description\")]]\n")
         ))

#+end_src

** Org Reveal
   :PROPERTIES:
   :ID:       0f688a3c-1ad0-4c44-97d0-1fc11a47b9d0
   :END:

#+BEGIN_SRC emacs-lisp
  (use-package ox-reveal
  :ensure ox-reveal)

  (use-package htmlize
  :ensure t)
#+END_SRC

** Exporting
   :PROPERTIES:
   :ID:       e337068f-fd8d-4534-94dd-07a779cec7ce
   :END:

Allow export to markdown (for hugo) and beamer (for presentations).

#+begin_src emacs-lisp
  (require 'ox-md)
  (require 'ox-beamer)
#+end_src

* RSS with =elfeed=
  :PROPERTIES:
  :ID:       f06c120a-78db-401b-beba-d813bf323ee9
  :END:

Install elfeed and load up my feeds.

#+begin_src emacs-lisp
  (setq elfeed-set-max-connections 32)
  (elfeed-org)
  (setq rmh-elfeed-org-files (list (expand-file-name "rss-feeds.org" db-home-org-dir)))
#+end_src

Open =elfeed= with =C-c r=:

#+begin_src emacs-lisp
  (global-set-key (kbd "C-c r") 'elfeed)
#+end_src

Use =o= to browse the entry in a Web browser.

#+begin_src emacs-lisp
  (define-key elfeed-show-mode-map "o" 'elfeed-show-visit)
  (define-key elfeed-search-mode-map "o" 'elfeed-search-browse-url)
#+end_src
* Globally Set Keys
  :PROPERTIES:
  :ID:       8bcad50b-37df-42a4-aece-fce4b6db05e2
  :END:

This section has all globally set keys unless they are related to a package or mode config. 

#+begin_src emacs-lisp

  ;; use hippie-expand instead of dabbrev
  (global-set-key (kbd "M-/") #'hippie-expand)
  (global-set-key (kbd "s-/") #'hippie-expand)

  ;; keyboard macros
  (global-set-key (kbd "<f1>") #'start-kbd-macro)
  (global-set-key (kbd "<f2>") #'end-kbd-macro)
  (global-set-key (kbd "<f3>") #'call-last-kbd-macro)
  (global-set-key (kbd "<f4>") 'db/dopus-in)
  (global-set-key (kbd "<f5>") 'db/dopus-out)

  ;; org keys
  (define-key global-map "\C-ca" 'org-agenda)
  (define-key global-map "\C-cc" 'org-capture)

  ;; replace buffer-menu with ibuffer
  (global-set-key (kbd "C-x C-b") #'ibuffer)

  ;; Lenovo Function Key Bindings
  (global-set-key (kbd "<XF86Favorites>") 'bury-buffer) ;; The Star on F12

  ;; avy goto line is quite useful
  (global-set-key (kbd "M-g f") 'avy-goto-line)

  ;; M-0 to toggle hiding
  (global-set-key (kbd "M-0") 'hs-toggle-hiding)

#+end_src

* Execute and windows specific configuration
  :PROPERTIES:
  :ID:       f71cbf9c-e18e-430b-a0ef-c3d883f9de56
  :END:
** Flyspell / hunspell Configuration                                  :win32:
   :PROPERTIES:
   :ID:       3a161139-f490-440b-859a-14ad475c1a1c
   :END:

Install [[https://www.msys2.org/][msys2]]. Install the developer packages and git:

~pacman -S --needed base-devel msys2-devel~

This involves downloading and building hunspell from the its [[https://github.com/hunspell/hunspell][repo]]. This does not come with
dictionaries which can be downloaded from [[https://github.com/LibreOffice/dictionaries][here]] and placed into:

~/usr/share/hunspell~ 

#+begin_src emacs-lisp

  ; this is windows specific now that I am using linux as well
  (if (string-equal system-type "windows-nt")
      (progn
        (setq ispell-program-name (executable-find "hunspell"))
        (setq ispell-hunspell-dict-paths-alist '(("en_US" "/usr/share/hunspell/en_US.aff")))
        (setq ispell-local-dictionary "en_US")
        (setq ispell-local-dictionary-alist '(("en_US" "[[:alpha:]]" "[^[:alpha:]]" "[']" nil ("-d" "en_US") nil utf-8)))))

#+end_src

The performance of emacs on windows in a heavy corp spyware environment is much worse. Do not want
to default spell check a bunch of org files that would be loaded

#+begin_src emacs-lisp

  ;; default is just use flyspell package
  ;; performance on windows
  ;;(use-package flyspell
  ;;:config
  ;; (add-hook 'gfm-mode-hook 'flyspell-mode)

  ;; (add-hook 'text-mode-hook 'flyspell-mode)
  ;; (add-hook 'git-commit-mode-hook 'flyspell-mode))

#+end_src

** Some attempted Windows performance tweaks                          :win32:
   :PROPERTIES:
   :ID:       ae3f7356-6d74-4660-8b85-bc0505bddede
   :END:

#+begin_src emacs-lisp
  ;; Attempts to optimize Windows - way too slow
  (setq inhibit-compacting-font-caches t)
  (setq undo-limit 40000)
  ;; (when (boundp 'w32-pipe-read-delay)
  ;;   (setq w32-pipe-read-delay 0))
  ;; 
#+end_src
* Python Setup
  :PROPERTIES:
  :ID:       d07ce918-587d-4d3c-8ea0-5441dc3c674b
  :END:

Configuration for /Python/ development including lsp using =pyright=. Pyright uses
=node=.

Good practice is to install =nvm= which lets you install and manage multiple
node versions, similar to =pyenv=. Once =nvm= is installed then install the latest
version of node. 

*Caution* when using =npm= to install pyright no sudo is needed
as =npm= isn't a command, but a shell script. Using sudo will fail as the right
environment won't be present. To install pyright do =npm install -g pyright &&
pip install black flake8= along with =black= and =flake8=

*Caution* =nvm= manipulates your environment variables to manage the current
 version of =node=. 

#+BEGIN_EXAMPLE
  d@extreme-u:~/.emacs.d$ nvm list
  ->      v14.9.0
  default -> v14.9.0
  node -> stable (-> v14.9.0) (default)
  stable -> 14.9 (-> v14.9.0) (default)
  iojs -> N/A (default)
  unstable -> N/A (default)
  lts/* -> lts/erbium (-> N/A)
  lts/argon -> v4.9.1 (-> N/A)
  lts/boron -> v6.17.1 (-> N/A)
  lts/carbon -> v8.17.0 (-> N/A)
  lts/dubnium -> v10.22.0 (-> N/A)
  lts/erbium -> v12.18.3 (-> N/A)
  d@extreme-u:~/.emacs.d$ which node
  /home/d/.nvm/versions/node/v14.9.0/bin/node
#+END_EXAMPLE

so make sure to use the =exec-path-from-shell= package to prevent issues with
=pyright= no having =node= in the path.

#+BEGIN_SRC emacs-lisp
  (use-package python
    :hook
    (python-mode . flycheck-mode)
    (python-mode . lsp-deferred)
    (python-mode . db/activate-pyvenv)
    (python-mode . hs-minor-mode))
#+END_SRC

Use pyvenv to support multiple python environments

#+BEGIN_SRC emacs-lisp
  (use-package pyvenv
    :after python
    :config
    (defun db/activate-pyvenv ()
      "Activate python environment according to the `.venv' file."
      (interactive)
      (pyvenv-mode)
      (let* ((pdir (projectile-project-root)) (pfile (concat pdir ".venv")))
        (if (file-exists-p pfile)
            (pyvenv-workon (with-temp-buffer
                             (insert-file-contents pfile)
                             (nth 0 (split-string (buffer-string)))))))))
#+END_SRC

Use pyright as an lsp

#+BEGIN_SRC emacs-lisp
(use-package lsp-mode
  :commands lsp
  :custom
  (lsp-auto-guess-root t)
  (lsp-keymap-prefix "M-m l")
  (lsp-modeline-diagnostics-enable nil)
  (lsp-keep-workspace-alive nil)
  (lsp-auto-execute-action nil)
  (lsp-before-save-edits nil)
  (lsp-eldoc-enable-hover nil)
  (lsp-diagnostic-package :none)
  (lsp-file-watch-threshold 1500)  ; pyright has more than 1000
  (lsp-enable-links nil)
  :hook
  (lsp-mode . lsp-enable-which-key-integration))

#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package lsp-pyright
    :after lsp-mode
    :custom
    (lsp-pyright-auto-import-completions nil)
    (lsp-pyright-auto-search-paths t)
    (lsp-pyright-python-executable-cmd "python3")
    (lsp-pyright-typechecking-mode "off"))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(yas-global-mode 1)
#+END_SRC

* Start a server
  :PROPERTIES:
  :ID:       562dc6e4-7bf9-4f3c-90b3-5413aba11238
  :END:

#+begin_src emacs-lisp
  (server-start)
#+end_src



