#+TITLE: Emacs Configuration
#+AUTHOR: Donald Brady
#+EMAIL: donald.brady@gmail.com
#+OPTIONS: toc:nil num:nil

* Configure =use-package=

This setup borrows heavily from the fantastic Org Mode talk here: [[https://www.youtube.com/watch?v=SzA2YODtgK4][Great Org Mode Talk]]
by Harry Schwartz.

Use =use-package= to install and configure packages. My =init.el= includes
the initial setup for =package.el= and ensures that =use-package= is installed.

This makes sure that =use-package= will install the package if it's not already
available. 

#+begin_src emacs-lisp
  (require 'use-package-ensure)
  (setq use-package-always-ensure t)
#+end_src

Always compile packages, and use the newest version available.

#+begin_src emacs-lisp
  (use-package auto-compile
    :config (auto-compile-on-load-mode))

  (setq load-prefer-newer t)
#+end_src

* Personal Details Setup

Sets up some personal information sucha as email

#+begin_src emacs-lisp

  (setq user-full-name "Donald Brady" user-mail-address "donaldbrady@gmail.com")

#+end_src

* Set up savefile, backup, and autosave directories

#+begin_src emacs-lisp

  (defconst dbrady-savefile-dir (expand-file-name "savefile" user-emacs-directory))

  ;; create the savefile dir if it doesn't exist
  (unless (file-exists-p dbrady-savefile-dir) (make-directory dbrady-savefile-dir))

  ;; store all backup and autosave files in the tmp dir
  (setq backup-directory-alist `((".*" . ,temporary-file-directory)))
  (setq auto-save-file-name-transforms `((".*" ,temporary-file-directory t)))

  ;; saveplace remembers your location in a file when saving files
  (use-package saveplace
    :config
    (setq save-place-file (expand-file-name "saveplace" dbrady-savefile-dir))
    ;; activate it for all buffers
    (setq-default save-place t))

  (use-package savehist
    :config
    (setq savehist-additional-variables
    ;; search entries
    '(search-ring regexp-search-ring)
    ;; save every minute
    savehist-autosave-interval 60
    ;; keep the home clean
    savehist-file (expand-file-name "savehist" dbrady-savefile-dir))
    (savehist-mode +1))

#+end_src

* Basic Configurations

Place for a grab bag of basic settings

#+begin_src emacs-lisp

  (setq inhibit-startup-screen t)
  (when (fboundp 'tool-bar-mode) (tool-bar-mode -1))
  (setq ring-bell-function 'ignore)
  (line-number-mode t)
  (column-number-mode t)
  (size-indication-mode t)
  (fset 'yes-or-no-p 'y-or-n-p)
  (setq require-final-newline t)
  (setq-default fill-column 100)
  (add-hook 'text-mode-hook 'auto-fill-mode)
  (add-hook 'org-mode-hook 'auto-fill-mode 'org-roam-mode)
  (prefer-coding-system 'utf-8)
  (set-default-coding-systems 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (setq-default indent-tabs-mode nil)   
  (setq-default tab-width 4)            
  ;; smart tab behavior - indent or complete
  (setq tab-always-indent 'complete)
  (global-display-line-numbers-mode 1) ; line number in margin
  (global-hl-line-mode 1) ; highlight current line

#+end_src

* Flyspell / hunspell Configuration

** Install hunspell in msys2.   

Install [[https://www.msys2.org/][msys2]]. Install the developer packages and git:

~pacman -S --needed base-devel msys2-devel~

This involves downloading and building hunspell from the its [[https://github.com/hunspell/hunspell][repo]]. This does not come with
dictionaries which can be downloaded from [[https://github.com/LibreOffice/dictionaries][here]] and placed into:

~/usr/share/hunspell~ 

#+begin_src emacs-lisp

  ; this is windows specific now that I am using linux as well
  (if (string-equal system-type "windows-nt")
      (progn
        (setq ispell-program-name (executable-find "hunspell"))
        (setq ispell-hunspell-dict-paths-alist '(("en_US" "C:/msys64/usr/share/hunspell/en_US.aff")))
        (setq ispell-local-dictionary "en_US")
        (setq ispell-local-dictionary-alist '(("en_US" "[[:alpha:]]" "[^[:alpha:]]" "[']" nil ("-d" "en_US") nil utf-8)))))

  ; default is just use flyspell package
  (use-package flyspell
    :config
    (add-hook 'text-mode-hook 'flyspell-mode)
    (add-hook 'gfm-mode-hook 'flyspell-mode)
    (add-hook 'org-mode-hook 'flyspell-mode)
    (add-hook 'git-commit-mode-hook 'flyspell-mode)
    (add-hook 'mu4e-compose-mode-hook 'flyspell-mode))

#+end_src

* Hippie Expand Setup

This is a more powerful completion system.

#+begin_src emacs-lisp

;; hippie expand is dabbrev expand on steroids
(setq hippie-expand-try-functions-list '(try-expand-dabbrev
                                         try-expand-dabbrev-all-buffers
                                         try-expand-dabbrev-from-kill
                                         try-complete-file-name-partially
                                         try-complete-file-name
                                         try-expand-all-abbrevs
                                         try-expand-list
                                         try-expand-line
                                         try-complete-lisp-symbol-partially
                                         try-complete-lisp-symbol))

;; use hippie-expand instead of dabbrev
(global-set-key (kbd "M-/") #'hippie-expand)
(global-set-key (kbd "s-/") #'hippie-expand)

#+end_src

* Configure Built-in Packages

Configuration for a bunch of built in packages.

#+begin_src emacs-lisp

      (use-package paren
        :config
        (show-paren-mode +1))

      (use-package elec-pair
        :config
        (electric-pair-mode +1))

      ;; (use-package abbrev
      ;;   :config
      ;;   (setq save-abbrevs 'silently)
      ;;   (setq-default abbrev-mode t))

      (use-package recentf
        :config
        (setq recentf-save-file (expand-file-name "recentf" dbrady-savefile-dir)
              recentf-max-saved-items 500
              recentf-max-menu-items 15
              ;; disable recentf-cleanup on Emacs start, because it can cause
              ;; problems with remote files
              recentf-auto-cleanup 'never)
        (recentf-mode +1))

      (use-package ivy
        :ensure t
        :config
        (ivy-mode 1)
        (setq ivy-use-virtual-buffers t)
        (setq enable-recursive-minibuffers t)
        (global-set-key (kbd "C-c C-r") 'ivy-resume)
        (global-set-key (kbd "<f6>") 'ivy-resume))

      (use-package swiper
        :ensure t
        :config
        (global-set-key "\C-s" 'swiper))

      ;; binds C-M-= and C-M-- to increase and decrease the face size
      (use-package default-text-scale
        :config
        (setq default-text-scale-mode t))

      ;; slime namvigation of elisp M-. and M-,
      (use-package elisp-slime-nav)
      (dolist (hook '(emacs-lisp-mode-hook ielm-mode-hook))
        (add-hook hook 'turn-on-elisp-slime-nav-mode))

      ;; config changes made through the customize UI will be stored here
      (setq custom-file (expand-file-name "custom.el" user-emacs-directory))

      (when (file-exists-p custom-file)
        (load custom-file))

#+end_src

* Exporting

Allow =babel= to evaluate Emacs lisp, Ruby, Python, or Gnuplot code.

#+begin_src emacs-lisp
  (use-package gnuplot)

  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (ruby . t)
     (python . t)
     (gnuplot . t)))
#+end_src

Don't ask before evaluating code blocks.

#+begin_src emacs-lisp
  (setq org-confirm-babel-evaluate nil)
#+end_src

Use =htmlize= to ensure that exported code blocks use syntax highlighting.

#+begin_src emacs-lisp
  (use-package htmlize)
#+end_src

Translate regular ol' straight quotes to typographically-correct curly quotes
when exporting.

#+begin_src emacs-lisp
  (setq org-export-with-smart-quotes t)
#+end_src

** Exporting

Allow export to markdown (for hugo) and beamer (for presentations).

#+begin_src emacs-lisp
  (require 'ox-md)
  (require 'ox-beamer)
#+end_src

* RSS with =elfeed=

Install elfeed and load up my feeds.

#+begin_src emacs-lisp
  (use-package elfeed
    :config
    (elfeed-set-max-connections 32))
  (use-package elfeed-org
    :config
    (progn
      (elfeed-org)
      (setq rmh-elfeed-org-files (list (expand-file-name "rss-feeds.org" user-emacs-directory)))))
#+end_src

Open =elfeed= with =C-c r=:

#+begin_src emacs-lisp
  (global-set-key (kbd "C-c r") 'elfeed)
#+end_src

Use =o= to browse the entry in a Web browser.

#+begin_src emacs-lisp
  (define-key elfeed-show-mode-map "o" 'elfeed-show-visit)
  (define-key elfeed-search-mode-map "o" 'elfeed-search-browse-url)
#+end_src
* Blogging with =Hugo=

#+begin_src emacs-lisp

(use-package easy-hugo
  :init
  (setq easy-hugo-basedir "~/bradydonald.github.io_dev/")
  (setq easy-hugo-url "https://bradydonald.github.io/")
  (setq easy-hugo-sshdomain "bradydonald")
  (setq easy-hugo-postdir "content/posts")
  (setq easy-hugo-root "/home/blog/")
  (setq easy-hugo-previewtime "300")
  :bind ("C-c C-e" . easy-hugo))

#+end_src

* Org Mode

Some basic configuration for Org Mode

** Display preferences

Use syntax highlighting in source blocks while editing.

#+begin_src emacs-lisp
  (setq org-src-fontify-natively t)
#+end_src

Make TAB act as if it were issued in a buffer of the language's major mode.

#+begin_src emacs-lisp
  (setq org-src-tab-acts-natively t)
#+end_src

When editing a code snippet, use the current window rather than popping open a
new one (which shows the same information).

#+begin_src emacs-lisp
  (setq org-src-window-setup 'current-window)
#+end_src

** Task and org-capture management

Two locations for org files. One is personal and managed under git, the other is work and managed
under OneDrive and may not exist

#+begin_src emacs-lisp
  (setq org-agenda-files '("~/OrgDocuments"))
  (if (file-directory-p "~/Deloitte (O365D)/Team Donald - General")
    (setq org-agenda-files (append org-agenda-files '("~/Deloitte (O365D)/Team Donald - General"))))
#+end_src

Ensure that a task can't be marked as done if it contains unfinished subtasks or
checklist items. This is handy for organizing "blocking" tasks hierarchically.

#+begin_src emacs-lisp
  (setq org-enforce-todo-dependencies t)
  (setq org-enforce-todo-checkbox-dependencies t)
#+end_src

Default to one weeks of agenda starting with /today/

#+begin_src emacs-lisp
  (setq org-agenda-span 7)
  (setq org-agenda-start-on-weekday nil)
#+end_src

* Org Roam

Requires installation of sqlite:

~pacman -S sqlite~


#+begin_src emacs-lisp

(setq org-roam-directory-alist '("~/OrgDocuments"
                                 "~/Deloitte (O365D)/Team Donald - General"))

(defun db/toggle-org-roam-directory ()
  "cycles through a list of directories and configures org-roam directory"
  (interactive)
  (setq org-roam-directory-alist (append (cdr org-roam-directory-alist) (cons (car org-roam-directory-alist) ())))
  (setq org-roam-directory (car org-roam-directory-alist))
  (org-roam-db-build-cache)
  (message "org-roam-directory now '%s'" (car org-roam-directory-alist)))

(use-package emacsql-sqlite3)
(use-package org-roam
      :hook
      (after-init . org-roam-mode)
      :custom
      (org-roam-directory (car org-roam-directory-alist))
      (org-roam-index-file "index.org")
      :bind (:map org-roam-mode-map
              (("C-c n l" . org-roam)
               ("C-c n f" . org-roam-find-file)
               ("C-c n j" . org-roam-jump-to-index)
               ("C-c n b" . org-roam-switch-to-buffer)
               ("C-c n g" . org-roam-graph))
              :map org-mode-map
              (("C-c n i" . org-roam-insert)
               ("C-c l". org-store-link)
              )))

#+end_src

* Globally Set Keys

This section has all globally set keys unless they are related to a package or mode config. 

#+begin_src emacs-lisp

;; use hippie-expand instead of dabbrev
  (global-set-key (kbd "M-/") #'hippie-expand)
  (global-set-key (kbd "s-/") #'hippie-expand)
  
  ;; keyboard macros
  (global-set-key (kbd "<f1>") #'start-kbd-macro)
  (global-set-key (kbd "<f2>") #'end-kbd-macro)
  (global-set-key (kbd "<f3>") #'call-last-kbd-macro)
  
  ;; replace buffer-menu with ibuffer
  (global-set-key (kbd "C-x C-b") #'ibuffer)

#+end_src

